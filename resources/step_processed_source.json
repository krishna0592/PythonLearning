[{
	"workflow_name": "P2",
	"procedure_name": "reach_email",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "reach_email_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='DELIVERED_EMAILS' and time_bucket_name in ('YTD','QTD','MTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), phy_attr as ( select distinct franchise_name, abbott_customer_id, 'Market_Decile' as ATTRIBUTION_NAME, case WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=8 and cast(hcv_decile.SEGMENT_VALUE as int)<=10 ) THEN 'High  (D8 - D10)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=4 and cast(hcv_decile.SEGMENT_VALUE as int)<=7 ) THEN 'Medium  (D4 - D7)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=1 and cast(hcv_decile.SEGMENT_VALUE as int)<=3 ) THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('HCV_DECILE') and hcv_decile.ads_active_flag = 'Y' union all select distinct franchise_name, abbott_customer_id, 'DUP Decile' as ATTRIBUTION_NAME, case WHEN hcv_decile.SEGMENT_VALUE in ('D8','D9','D10') THEN 'High  (D8 - D10)' WHEN hcv_decile.SEGMENT_VALUE in ('D4','D5','D6','D7') THEN 'Medium  (D4 - D7)' WHEN hcv_decile.SEGMENT_VALUE in ('D1','D2','D3') THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('DUP Decile') and hcv_decile.ads_active_flag = 'Y' ), fact as ( select ter.sales_force, ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, 'OVERALL' as attribution_name, cast(NULL as string) as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join ( select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') union all select ter.sales_force, ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'Market_Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code left join (select * from phy_attr where upper(attribution_name) in ('MARKET_DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise_name = phy_attr.franchise_name inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') union all select ter.sales_force, ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'DUP Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code left join (select * from phy_attr where upper(attribution_name) in ('DUP DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise_name = phy_attr.franchise_name inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'REACH_EMAIL' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.METRIC_TYPE_GROUP as METRIC_TYPE_GROUP, base.METRIC_TYPE_SUBGROUP as METRIC_TYPE_SUBGROUP from (SELECT fact.FRANCHISE, fact.territory_number as GEO_ID, 'territory' as GEO_CODE,count(EMAIL_SENT_COUNT) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.territory_number, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, fact.district as GEO_ID, 'district' as GEO_CODE,count(EMAIL_SENT_COUNT) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.district, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, fact.region as GEO_ID, 'region' as GEO_CODE,count(EMAIL_SENT_COUNT) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.region, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, -1 as GEO_ID, 'nation' as GEO_CODE,count(EMAIL_SENT_COUNT) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "delivered_emails_avg",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "delivered_emails_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='DELIVERED_EMAILS' and time_bucket_name in ('YTD','QTD','MTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ), regn_cnt_terr as ( select region,count(*) as region_count from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where franchise='Hepatology' AND TERRITORY_TYPE_ID IN ('REP') group by 1 ), dist_cnt_terr as (select district,count(*) as district_count from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where franchise='Hepatology' and TERRITORY_TYPE_ID IN ('REP') group by 1 ), phy_attr as ( select distinct franchise_name, abbott_customer_id, 'Market_Decile' as ATTRIBUTION_NAME, case WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=8 and cast(hcv_decile.SEGMENT_VALUE as int)<=10 ) THEN 'High  (D8 - D10)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=4 and cast(hcv_decile.SEGMENT_VALUE as int)<=7 ) THEN 'Medium  (D4 - D7)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=1 and cast(hcv_decile.SEGMENT_VALUE as int)<=3 ) THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('HCV_DECILE') and hcv_decile.ads_active_flag = 'Y' union all select distinct franchise_name, abbott_customer_id, 'DUP Decile' as ATTRIBUTION_NAME, case WHEN hcv_decile.SEGMENT_VALUE in ('D8','D9','D10') THEN 'High  (D8 - D10)' WHEN hcv_decile.SEGMENT_VALUE in ('D4','D5','D6','D7') THEN 'Medium  (D4 - D7)' WHEN hcv_decile.SEGMENT_VALUE in ('D1','D2','D3') THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('DUP Decile') and hcv_decile.ads_active_flag = 'Y' ), fact as ( select ter.sales_force, ter.territory_number, ter.district, ter.region, base.created_by_primary_terr_number, ter.franchise, time.time_bucket_id, 'OVERALL' as attribution_name, cast(NULL as string) as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join ( select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') union all select ter.sales_force, ter.territory_number, ter.district, ter.region, base.created_by_primary_terr_number, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'Market_Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code left join (select * from phy_attr where upper(attribution_name) in ('MARKET_DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise_name = phy_attr.franchise_name inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') union all select ter.sales_force, ter.territory_number, ter.district, ter.region, base.created_by_primary_terr_number, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'DUP Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, EMAIL_SENT_COUNT from abv_hcp360_sales_marketing_dm.fact_field_email_hcp_tbl base left outer join (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and sales_force in ('HCV1','HCV3')) ter on ter.territory_number=base.created_by_primary_terr_number and ter.sales_force=base.created_by_sales_force_code left join (select * from phy_attr where upper(attribution_name) in ('DUP DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise_name = phy_attr.franchise_name inner join time on to_date(base.DATA_DATE) >= to_date(time.start_date) and to_date(base.DATA_DATE) <= to_date(time.end_date) where base.franchise_name='Hepatology' AND DERIVED_CREATED_BY_SALFRC_CODE IN ('HCV1','HCV3') ) select base.franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'DELIVERED_EMAILS_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(32,2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.METRIC_TYPE_GROUP as METRIC_TYPE_GROUP, base.METRIC_TYPE_SUBGROUP as METRIC_TYPE_SUBGROUP from ( SELECT fact.franchise, cast(-1 as string) as GEO_ID, 'nation' as GEO_CODE,count(EMAIL_SENT_COUNT)\/(select count(*) from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where franchise='Hepatology' and TERRITORY_TYPE_ID IN ('REP')) as METRIC_VALUE, TIME_BUCKET_ID, 'TERRITORY' as SEGMENT_NAME, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join rep ON rep.territory_number=fact.created_by_primary_terr_number GROUP BY fact.franchise, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.franchise, fact.region as GEO_ID, 'region' as GEO_CODE,count(EMAIL_SENT_COUNT)\/cast(regn_cnt_terr.region_count as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, 'TERRITORY' as SEGMENT_NAME, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join regn_cnt_terr ON regn_cnt_terr.region=fact.region GROUP BY fact.franchise, fact.region, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group, regn_cnt_terr.region_count union all SELECT fact.franchise, fact.district as GEO_ID, 'district' as GEO_CODE,count(EMAIL_SENT_COUNT)\/cast(dist_cnt_terr.district_count as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, 'TERRITORY' as SEGMENT_NAME, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join dist_cnt_terr ON dist_cnt_terr.district=fact.district GROUP BY fact.franchise, fact.district, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group, dist_cnt_terr.district_count union all SELECT fact.franchise, fact.region as GEO_ID, 'region' as GEO_CODE,count(EMAIL_SENT_COUNT)\/count(distinct rep.district) as METRIC_VALUE, TIME_BUCKET_ID, 'DISTRICT' as SEGMENT_NAME, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join rep ON rep.territory_number=fact.created_by_primary_terr_number GROUP BY fact.franchise, fact.region, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.franchise, cast(-1 as int) as GEO_ID, 'nation' as GEO_CODE,count(EMAIL_SENT_COUNT)\/count(distinct rep.district) as METRIC_VALUE, TIME_BUCKET_ID, 'DISTRICT' as SEGMENT_NAME, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join rep ON rep.territory_number=fact.created_by_primary_terr_number GROUP BY fact.franchise, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_frequency_avg",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "call_frequency_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'CALL_FREQ' and time_bucket_name in ('YTD', 'QTD', 'MTD') ), phy_attr as ( SELECT ABBOTT_CUSTOMER_ID, attribution_name, sub_group FROM abv_hcp360_sales_marketing_dm.DIM_PHYSICIAN_attribute_TBL where upper(attribution_name) in ('MARKET_DECILE', 'DUP DECILE') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( SELECT A.sales_force_code, A.TERRITORY_NUMBER, A.DISTRICT, A.REGION, A.franchise, ROLL_UP_ELIGIBLE_FLAG, external_call_activity_id AS TOTAL_CALLS, a.abbott_customer_id as HCP_Cnt_Ter, 'OVERALL' as attribution_name, cast(NULL as string) as sub_group, time.time_bucket_id FROM abv_hcp360_sales_marketing_dm.CALL_ACTIVITY_TRANS_FACT_TBL A inner join time on to_date(A.CALL_ACTIVITY_DATE) >= to_date(time.start_date) and to_date(A.CALL_ACTIVITY_DATE) <= to_date(time.end_date) where ( trim(A.franchise) )= 'Hepatology' and upper( trim(A.PRESCRIBER_STATUS) )= 'Y' and upper( trim(A.sales_force_code) ) in ('HCV1', 'HCV3') union all SELECT A.sales_force_code, A.TERRITORY_NUMBER, A.DISTRICT, A.REGION, A.franchise, ROLL_UP_ELIGIBLE_FLAG, external_call_activity_id AS TOTAL_CALLS, a.abbott_customer_id as HCP_Cnt_Ter, case when phy_attr.attribution_name is null then 'Market_Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, time.time_bucket_id FROM abv_hcp360_sales_marketing_dm.CALL_ACTIVITY_TRANS_FACT_TBL A inner join time on to_date(A.CALL_ACTIVITY_DATE) >= to_date(time.start_date) and to_date(A.CALL_ACTIVITY_DATE) <= to_date(time.end_date) left join ( select * from phy_attr where upper(attribution_name) in ('MARKET_DECILE') ) phy_attr on A.abbott_customer_id = cast( phy_attr.abbott_customer_id as string ) where ( trim(A.franchise) )= 'Hepatology' and upper( trim(A.PRESCRIBER_STATUS) )= 'Y' and upper( trim(A.sales_force_code) ) in ('HCV1', 'HCV3') union all SELECT A.sales_force_code, A.TERRITORY_NUMBER, A.DISTRICT, A.REGION, A.franchise, ROLL_UP_ELIGIBLE_FLAG, external_call_activity_id AS TOTAL_CALLS, a.abbott_customer_id as HCP_Cnt_Ter, case when phy_attr.attribution_name is null then 'DUP Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group, time.time_bucket_id FROM abv_hcp360_sales_marketing_dm.CALL_ACTIVITY_TRANS_FACT_TBL A inner join time on to_date(A.CALL_ACTIVITY_DATE) >= to_date(time.start_date) and to_date(A.CALL_ACTIVITY_DATE) <= to_date(time.end_date) left join ( select * from phy_attr where upper(attribution_name) in ('DUP DECILE') ) phy_attr on A.abbott_customer_id = cast( phy_attr.abbott_customer_id as string ) where ( trim(A.franchise) )= 'Hepatology' and upper( trim(A.PRESCRIBER_STATUS) )= 'Y' and upper( trim(A.sales_force_code) ) in ('HCV1', 'HCV3') union all SELECT A.sales_force_code, A.TERRITORY_NUMBER, A.DISTRICT, A.REGION, A.franchise, ROLL_UP_ELIGIBLE_FLAG, external_call_activity_id AS TOTAL_CALLS, a.abbott_customer_id as HCP_Cnt_Ter, case when upper( trim(call_plan_flag) ) = 'Y' then cast('CALL_PLAN' as string) when upper( trim(call_plan_flag) ) = 'N' then cast('NON_CALL_PLAN' as string) end as attribution_name, cast(NULL as string) as sub_group, time.time_bucket_id FROM abv_hcp360_sales_marketing_dm.CALL_ACTIVITY_TRANS_FACT_TBL A inner join time on to_date(A.CALL_ACTIVITY_DATE) >= to_date(time.start_date) and to_date(A.CALL_ACTIVITY_DATE) <= to_date(time.end_date) where ( trim(A.franchise) )= 'Hepatology' and upper( trim(A.PRESCRIBER_STATUS) )= 'Y' and upper( trim(A.sales_force_code) ) in ('HCV1', 'HCV3') ) select base.franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'CALL_FREQUENCY_AVG' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.METRIC_TYPE_GROUP as METRIC_TYPE_GROUP, base.METRIC_TYPE_SUBGROUP as METRIC_TYPE_SUBGROUP from ( select base.franchise, 'territory' as geo_code, TERRITORY_NUMBER as geo_id, base.time_bucket_id, cast( NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) as decimal(32, 2) ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup union all select base.franchise, 'district' as geo_code, DISTRICT as geo_id, base.time_bucket_id, cast( NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) as decimal(32, 2) ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup union all select base.franchise, 'region' as geo_code, REGION as geo_id, base.time_bucket_id, cast( NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) as decimal(32, 2) ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup union all select base.franchise, 'nation' as geo_code, cast(-1 as int) as geo_id, base.time_bucket_id, cast( NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) as decimal(32, 2) ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_frequency_avg",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "call_frequency_avg_comp_pct_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'CALL_FREQ' and time_bucket_name in ('QTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( SELECT A.sales_force_code, A.TERRITORY_NUMBER, A.DISTRICT, A.REGION, A.franchise, ROLL_UP_ELIGIBLE_FLAG, external_call_activity_id AS TOTAL_CALLS, a.abbott_customer_id as HCP_Cnt_Ter, cast(NULL as string) as attribution_name, cast(NULL as string) as sub_group, time.time_bucket_id FROM abv_hcp360_sales_marketing_dm.CALL_ACTIVITY_TRANS_FACT_TBL A inner join time on to_date(A.CALL_ACTIVITY_DATE) >= to_date(time.start_date) and to_date(A.CALL_ACTIVITY_DATE) <= to_date(time.end_date) where ( trim(A.franchise) )= 'Hepatology' and upper( trim(A.PRESCRIBER_STATUS) )= 'Y' and upper( trim(A.sales_force_code) ) in ('HCV1', 'HCV3') ), fact as ( select base.franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'CALL_FREQUENCY_AVG' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.METRIC_TYPE_GROUP as METRIC_TYPE_GROUP, base.METRIC_TYPE_SUBGROUP as METRIC_TYPE_SUBGROUP from ( select base.franchise as franchise, 'district' as geo_code, DISTRICT as geo_id, base.time_bucket_id, NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup union all select base.franchise as franchise, 'region' as geo_code, REGION as geo_id, base.time_bucket_id, NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup union all select base.franchise as franchise, 'nation' as geo_code, cast(-1 as int) as geo_id, base.time_bucket_id, NVL( ( count(base.TOTAL_CALLS)\/ NULLIF( CAST( count(distinct base.HCP_Cnt_Ter) AS DECIMAL(10, 0) ), 0 ) ), 0 ) AS metric_value, attribution_name as metric_type_group, sub_group as metric_type_subgroup from base WHERE upper( trim(ROLL_UP_ELIGIBLE_FLAG) )= 'Y' group by franchise, geo_code, geo_id, time_bucket_id, metric_type_group, metric_type_subgroup ) base inner join run_log on run_log.franchise = base.franchise ), district_region_mapping as ( select distinct district, region from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl ), region_nation_mapping as ( select distinct region as geo_id, 'region' as geo_code, '-1' as nat from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl ) select dist.franchise, 'CALL_FREQUENCY_AVG_COMPARISON_PCT' as metric_name, case when region.metric_value = 0 then 0 else cast ( ( ( dist.metric_value - region.metric_value )* 100 \/ region.metric_value ) as decimal(32, 2) ) end as metric_value, dist.physician_id, dist.product_id, dist.product_name, dist.data_refresh_date, dist.run_id, dist.time_bucket_id, dist.geo_id, dist.geo_code, cast('REGION' as string) as segment_name, dist.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id, dist.metric_type_group, dist.metric_type_subgroup from ( select * from fact where upper(geo_code) = 'DISTRICT' ) dist inner join ( select * from district_region_mapping ) mapping on dist.geo_id = mapping.district inner join ( select * from fact where upper(geo_code) = 'REGION' ) region on mapping.region = region.geo_id and dist.franchise = region.franchise and dist.physician_id = region.physician_id and dist.product_id = region.product_id and dist.data_refresh_date = region.data_refresh_date and dist.run_id = region.run_id and dist.time_bucket_id = region.time_bucket_id and coalesce(dist.segment_name, '') = coalesce(region.segment_name, '') and coalesce(dist.market_id, '') = coalesce(region.market_id, '') and coalesce(dist.product_name, '') = coalesce(region.product_name, '') union all select region.franchise, 'CALL_FREQUENCY_AVG_COMPARISON_PCT' as metric_name, case when nation.metric_value = 0 then 0 else cast( ( ( region.metric_value - nation.metric_value )* 100 \/ nation.metric_value ) as decimal(32, 2) ) end as metric_value, region.physician_id, region.product_id, region.product_name, region.data_refresh_date, region.run_id, region.time_bucket_id, region.geo_id, region.geo_code, cast('NATION' as string) as segment_name, region.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id, region.metric_type_group, region.metric_type_subgroup from ( select * from fact where upper(geo_code) in ('REGION') ) region inner join ( select * from region_nation_mapping ) mapping on region.geo_id = mapping.geo_id and upper(region.geo_code) = upper(mapping.geo_code) inner join ( select * from fact where upper(geo_code) = 'NATION' ) nation on mapping.nat = nation.geo_id and region.franchise = nation.franchise and region.physician_id = nation.physician_id and region.product_id = nation.product_id and region.data_refresh_date = nation.data_refresh_date and region.run_id = nation.run_id and region.time_bucket_id = nation.time_bucket_id and coalesce(region.segment_name, '') = coalesce(nation.segment_name, '') and coalesce(region.market_id, '') = coalesce(nation.market_id, '') and coalesce(region.product_name, '') = coalesce(nation.product_name, '')"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_frequency_avg",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "call_frequency_union",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "call_frequency_avg-call_frequency_avg_custom|call_frequency_avg-call_frequency_avg_comp_pct_custom",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_plan_reach_pct_segment",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "call_plan_reach_pct_segment_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'CALL_PLAN' and time_bucket_name in ('QTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), phy_attr as ( select distinct franchise_name, abbott_customer_id, 'Market_Decile' as ATTRIBUTION_NAME, case WHEN ( cast(hcv_decile.SEGMENT_VALUE as int)>= 8 and cast(hcv_decile.SEGMENT_VALUE as int)<= 10 ) THEN 'High  (D8 - D10)' WHEN ( cast(hcv_decile.SEGMENT_VALUE as int)>= 4 and cast(hcv_decile.SEGMENT_VALUE as int)<= 7 ) THEN 'Medium  (D4 - D7)' WHEN ( cast(hcv_decile.SEGMENT_VALUE as int)>= 1 and cast(hcv_decile.SEGMENT_VALUE as int)<= 3 ) THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('HCV_DECILE') and hcv_decile.ads_active_flag = 'Y' union all select distinct franchise_name, abbott_customer_id, 'DUP Decile' as ATTRIBUTION_NAME, case WHEN hcv_decile.SEGMENT_VALUE in ('D8', 'D9', 'D10') THEN 'High  (D8 - D10)' WHEN hcv_decile.SEGMENT_VALUE in ('D4', 'D5', 'D6', 'D7') THEN 'Medium  (D4 - D7)' WHEN hcv_decile.SEGMENT_VALUE in ('D1', 'D2', 'D3') THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('DUP Decile') and hcv_decile.ads_active_flag = 'Y' ), agg_calls_dup as ( select calls.Franchise, calls.territory_number, calls.district, calls.region, time.time_bucket_id, calls.week_end_date, case when attribution_name is null then 'DUP Decile' else attribution_name end as attribution_name, case when sub_group is NULL then 'Non-Writer (D0)' else sub_group end as sub_group, sum(REACH_ATTAINMENT) as ter_REACH_ATTAINMENT, sum( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN REACH_ATTAINMENT END ) as dist_regn_REACH_ATTAINMENT, count(calls.ABBOTT_CUSTOMER_ID) as ter_HCP_COUNT, count( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN calls.ABBOTT_CUSTOMER_ID END ) as dist_regn_HCP_COUNT FROM abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl calls left join ( select * from phy_attr where ATTRIBUTION_NAME in ('DUP Decile') ) pa on calls.abbott_customer_id = cast(pa.abbott_customer_id as string) and calls.Franchise = pa.franchise_name inner join time on to_date(calls.week_end_date) >= to_date(time.START_DATE) and to_date(calls.week_end_date) <= to_date(TIME.END_DATE) Where calls.franchise = 'Hepatology' and calls.current_week_flag = 'Y' and calls.prescriber_status = 'Y' group by calls.Franchise, attribution_name, sub_group, calls.territory_number, calls.district, calls.region, time.time_bucket_id, calls.week_end_date ), agg_calls_mkt as ( select calls.Franchise, calls.territory_number, calls.district, calls.region, time.time_bucket_id, calls.week_end_date, case when attribution_name is null then 'Market_Decile' else attribution_name end as attribution_name, case when sub_group is NULL then 'Non-Writer (D0)' else sub_group end as sub_group, sum(REACH_ATTAINMENT) as ter_REACH_ATTAINMENT, sum( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN REACH_ATTAINMENT END ) as dist_regn_REACH_ATTAINMENT, count(calls.ABBOTT_CUSTOMER_ID) as ter_HCP_COUNT, count( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN calls.ABBOTT_CUSTOMER_ID END ) as dist_regn_HCP_COUNT FROM abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl calls left join ( select * from phy_attr where ATTRIBUTION_NAME in ('Market_Decile') ) pa on calls.abbott_customer_id = cast(pa.abbott_customer_id as string) and calls.Franchise = pa.franchise_name inner join time on to_date(calls.week_end_date) >= to_date(time.START_DATE) and to_date(calls.week_end_date) <= to_date(TIME.END_DATE) Where calls.franchise = 'Hepatology' and calls.current_week_flag = 'Y' and calls.prescriber_status = 'Y' group by calls.Franchise, attribution_name, sub_group, calls.territory_number, calls.district, calls.region, time.time_bucket_id, calls.week_end_date ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'CALL_PLAN_REACH_PCT' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)), TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, attribution_name as METRIC_TYPE_GROUP, SUB_GROUP as METRIC_TYPE_SUBGROUP from ( select 'territory' as geo_code, territory_number as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(ter_REACH_ATTAINMENT)* 100 \/ sum(ter_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_dup group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'district' as geo_code, district as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_dup group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'region' as geo_code, region as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_dup group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'nation' as geo_code, '-1' as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_dup group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'territory' as geo_code, territory_number as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(ter_REACH_ATTAINMENT)* 100 \/ sum(ter_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_mkt group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'district' as geo_code, district as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_mkt group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'region' as geo_code, region as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_mkt group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group union all select 'nation' as geo_code, '-1' as GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as METRIC_VALUE from agg_calls_mkt group by geo_code, GEO_ID, franchise, TIME_BUCKET_ID, attribution_name, sub_group ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_plan_reach_pct_overall",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "call_plan_reach_pct_overall_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'CALL_PLAN' and time_bucket_name in ('QTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), agg_calls as ( select calls.Franchise, calls.territory_number, district, region, calls.week_end_date, sum(REACH_ATTAINMENT) as ter_REACH_ATTAINMENT, sum( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN REACH_ATTAINMENT END ) as dist_regn_REACH_ATTAINMENT, count(calls.ABBOTT_CUSTOMER_ID) as ter_HCP_COUNT, count( case when ROLL_UP_ELIGIBLE_FLAG = 'Y' THEN calls.ABBOTT_CUSTOMER_ID END ) as dist_regn_HCP_COUNT FROM abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl calls Where calls.franchise = 'Hepatology' and calls.current_week_flag = 'Y' and calls.prescriber_status = 'Y' group by calls.Franchise, calls.territory_number, district, region, calls.week_end_date ), base as ( select franchise, TERRITORY_NUMBER as geo_id, 'territory' as geo_code, NVL( sum(ter_REACH_ATTAINMENT)* 100 \/ sum(ter_HCP_COUNT), 0 ) as metric_value, time.time_dimension_id, time.time_bucket_name, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, 'CALL_PLAN_REACH_PCT' as metric_name, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id FROM agg_calls inner join time on Cast(agg_calls.week_end_date as date) >= cast(time.START_DATE as date) and Cast(agg_calls.week_end_date as date) <= cast(TIME.END_DATE as date) WHERE FRANCHISE = 'Hepatology' GROUP BY franchise, geo_id, geo_code, time.time_dimension_id, time.time_bucket_name union select franchise, district as geo_id, 'district' as geo_code, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as metric_value, time.time_dimension_id, time.time_bucket_name, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, 'CALL_PLAN_REACH_PCT' as metric_name, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id from agg_calls inner join time on Cast(agg_calls.week_end_date as date) >= cast(time.START_DATE as date) and Cast(agg_calls.week_end_date as date) <= cast(TIME.END_DATE as date) WHERE FRANCHISE = 'Hepatology' GROUP BY franchise, geo_id, geo_code, time.time_dimension_id, time.time_bucket_name union select franchise, region as geo_id, 'region' as geo_code, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as metric_value, time.time_dimension_id, time.time_bucket_name, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, 'CALL_PLAN_REACH_PCT' as metric_name, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id from agg_calls inner join time on Cast(agg_calls.week_end_date as date) >= cast(time.START_DATE as date) and Cast(agg_calls.week_end_date as date) <= cast(TIME.END_DATE as date) WHERE FRANCHISE = 'Hepatology' GROUP BY franchise, geo_id, geo_code, time.time_dimension_id, time.time_bucket_name union select franchise, '-1' as geo_id, 'nation' as geo_code, NVL( sum(dist_regn_REACH_ATTAINMENT)* 100 \/ sum(dist_regn_HCP_COUNT), 0 ) as metric_value, time.time_dimension_id, time.time_bucket_name, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, 'CALL_PLAN_REACH_PCT' as metric_name, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id from agg_calls inner join time on Cast(agg_calls.week_end_date as date) >= cast(time.START_DATE as date) and Cast(agg_calls.week_end_date as date) <= cast(TIME.END_DATE as date) WHERE FRANCHISE = 'Hepatology' GROUP BY franchise, geo_id, geo_code, time.time_dimension_id, time.time_bucket_name ) select * from ( SELECT base.franchise, base.geo_id, base.geo_code, cast( base.metric_value as decimal(10, 2) ), base.metric_name, base.time_dimension_id as time_bucket_id, run_log.run_id, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id, 'OVERALL' as metric_type_group, cast(NULL as string) as metric_type_subgroup, cast(NULL as string) as access_type, cast(NULL as string) as segment_name from base join run_log on base.franchise = run_log.franchise group by base.franchise, base.geo_id, base.geo_code, base.metric_value, base.metric_name, base.time_dimension_id, run_log.run_id, product_id, product_name, physician_id, data_refresh_date, market_id, plan_id )"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "call_plan_reach_comparison_pct",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "call_plan_reach_comparison_pct_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='CALL_PLAN' and time_bucket_name in ('QTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), agg_calls as ( select calls.Franchise,calls.territory_number,district,region,time.time_bucket_id, sum(REACH_ATTAINMENT) as ter_REACH_ATTAINMENT, sum(case when ROLL_UP_ELIGIBLE_FLAG='Y' THEN REACH_ATTAINMENT END) as dist_regn_REACH_ATTAINMENT, count(calls.ABBOTT_CUSTOMER_ID) as ter_HCP_COUNT, count(case when ROLL_UP_ELIGIBLE_FLAG='Y' THEN calls.ABBOTT_CUSTOMER_ID END) as dist_regn_HCP_COUNT FROM abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl calls inner join time on to_date(calls.week_end_date)>= to_date(time.START_DATE ) and to_date(calls.week_end_date) <= to_date(time.END_DATE) Where calls.franchise='Hepatology' and calls.current_week_flag='Y' and calls.prescriber_status='Y' group by calls.Franchise,calls.territory_number,district,region,time.time_bucket_id ), call_plan_reach_dist as ( select a.franchise,'DISTRICT' as HIERARCHY_LEVEL,district as geo_id,a.time_bucket_id, NVL(sum(dist_regn_REACH_ATTAINMENT)*100\/sum(dist_regn_HCP_COUNT),0) as REACH_ATTAINMENT from agg_calls a group by franchise,HIERARCHY_LEVEL,geo_id,a.time_bucket_id ), dist_region_mapping as ( select distinct district, region from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(territory_type_id)='REP' ), call_plan_reach_reg as ( select a.franchise,'REGION' as HIERARCHY_LEVEL,region as geo_id,a.time_bucket_id, NVL(sum(dist_regn_REACH_ATTAINMENT)*100\/sum(dist_regn_HCP_COUNT),0) as REACH_ATTAINMENT from agg_calls a group by franchise,HIERARCHY_LEVEL,geo_id,a.time_bucket_id ), region_nation_mapping as ( select distinct region,'-1' as geo_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(territory_type_id)='REP' ), call_plan_reach_nat as ( select a.franchise,'NATION' as geo_code,'-1' as geo_id, NVL(sum(dist_regn_REACH_ATTAINMENT)*100\/sum(dist_regn_HCP_COUNT),0) as REACH_ATTAINMENT from agg_calls a group by franchise,geo_code,geo_id ) select base.FRANCHISE, base.GEO_ID, base.GEO_CODE, cast(-1 as int) as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, cast(-1 as int) as PHYSICIAN_ID, 'CALL_PLAN_REACH_COMPARISON_PCT' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, run_id, cast(-1 as int) as MARKET_ID,SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, cast(-1 as int) as PLAN_ID, cast(null as string) as METRIC_TYPE_GROUP,cast(NULL as string) as METRIC_TYPE_SUBGROUP from ( select cprd.franchise,cprd.REACH_ATTAINMENT as district_values,cprr.REACH_ATTAINMENT as region_values,'district' as geo_code,'REGION' as SEGMENT_NAME, cprd.TIME_BUCKET_ID, (cprd.REACH_ATTAINMENT - cprr.REACH_ATTAINMENT) as metric_value, cprd.geo_id from call_plan_reach_dist cprd inner join dist_region_mapping mp on cprd.geo_id=mp.district inner join call_plan_reach_reg cprr on mp.region=cprr.geo_id group by cprd.franchise,cprd.GEO_ID, district_values,region_values,GEO_CODE,cprd.TIME_BUCKET_ID union all select cpr.franchise,cpr.REACH_ATTAINMENT as reg,cprn.REACH_ATTAINMENT as nat,'region' as geo_code,'NATION' as SEGMENT_NAME,cpr.TIME_BUCKET_ID, (cpr.REACH_ATTAINMENT - cprn.REACH_ATTAINMENT) as metric_value, cpr.geo_id from call_plan_reach_reg cpr inner join region_nation_mapping mp on cpr.geo_id=mp.region inner join call_plan_reach_nat cprn on mp.geo_id=cprn.geo_id group by cpr.franchise,cpr.GEO_ID,reg,nat,GEO_CODE,cpr.TIME_BUCKET_ID ) base inner join run_log rl on rl.franchise= base.franchise"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "nbrx_vol_nr",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_vol_nr_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as( SELECT DISTINCT rep.territory_number AS territory_number, rep.territory_number AS geo_id, 'territory' AS geo_code FROM abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep WHERE rep.franchise = 'Hepatology' AND rep.territory_type_id = 'REP' AND rep.sales_force IN ('HCV1', 'HCV3') UNION ALL SELECT DISTINCT rep.territory_number, rep.district AS geo_id, 'district' AS geo_code FROM abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep WHERE rep.franchise = 'Hepatology' AND rep.territory_type_id = 'REP' AND rep.sales_force IN ('HCV1') UNION ALL SELECT DISTINCT rep.territory_number, rep.region AS geo_id, 'region' AS geo_code FROM abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep WHERE rep.franchise = 'Hepatology' AND rep.territory_type_id = 'REP' AND rep.sales_force IN ('HCV1')), time_monthly AS ( SELECT DISTINCT time_dimension_id AS time_bucket_id, time_bucket_name, start_date, end_date FROM abv_hcp360_sales_marketing_dm.time_dimension_tbl WHERE kpi_group = 'NRTL_MONTHLY' AND time_bucket_name IN ('C1M','C3M','C6M','C12M','QTD')), time_weekly AS( SELECT DISTINCT time_dimension_id AS time_bucket_id, time_bucket_name, start_date, end_date FROM abv_hcp360_sales_marketing_dm.time_dimension_tbl WHERE kpi_group = 'RX' AND time_bucket_name IN ('C4W','C8W','C13W')), run_log AS ( SELECT franchise, max(id) AS run_id FROM abv_hcp360_sales_marketing_dm.run_log WHERE upper(franchise) = 'HEPATOLOGY' GROUP BY franchise ), acct AS ( SELECT DISTINCT abbott_account_id, account_name, franchise, sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise = 'Hepatology' ), mdm AS ( SELECT DISTINCT product_family_name, child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name = 'Hepatology' ), mkt AS ( SELECT DISTINCT product_group, product_name FROM abv_hcp360_sales_marketing_dm.dim_market_tbl WHERE trim( lower(product_group_type) ) = 'product' ), fact_monthly AS ( SELECT rx.franchise_name AS franchise, geo_dim.geo_id AS geo_id, geo_dim.geo_code AS geo_code, rx.brand AS product_name, abbott_account_id AS physician_id, cast( sum(metric_value) AS decimal(10, 2) ) AS metric_value, tim.time_bucket_id AS time_bucket_id, run_log.run_id AS run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND rx.franchise_name = acct.franchise AND rx.abbott_customer_id = acct.abbott_account_id INNER JOIN time_monthly tim ON rx.month_start_date BETWEEN tim.start_date AND tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER JOIN run_log ON rx.franchise_name = run_log.franchise WHERE trim( lower(data_group) ) = 'nrtl_monthly' AND trim( upper(metric_name) ) = 'NON_RETAIL_RX' AND lower( trim(franchise_name) ) = 'hepatology' AND trim( lower(mkt.product_group) ) = 'hcv market' AND rx.brand = 'MAVYRET' GROUP BY 1, 2, 3, 4, 5, 7, 8, 9 UNION ALL SELECT rx.franchise_name AS franchise, geo_dim.geo_id AS geo_id, geo_dim.geo_code AS geo_code, rx.brand AS product_name, cast('-1' AS string) AS physician_id, cast( sum(metric_value) AS decimal(10, 2) ) AS metric_value, tim.time_bucket_id AS time_bucket_id, run_log.run_id AS run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND rx.franchise_name = acct.franchise AND rx.abbott_customer_id = acct.abbott_account_id INNER JOIN time_monthly tim ON rx.month_start_date BETWEEN tim.start_date AND tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER JOIN run_log ON rx.franchise_name = run_log.franchise WHERE trim( lower(data_group) ) = 'nrtl_monthly' AND trim( upper(metric_name) ) = 'NON_RETAIL_RX' AND lower( trim(franchise_name) ) = 'hepatology' AND trim( lower(mkt.product_group) ) = 'hcv market' AND rx.brand = 'MAVYRET' GROUP BY 1, 2, 3, 4, 5, 7, 8, 9 ), fact_weekly AS ( SELECT rx.franchise_name AS franchise, geo_dim.geo_id AS geo_id, geo_dim.geo_code AS geo_code, rx.brand AS product_name, '-1' AS physician_id, cast( sum(metric_value) AS decimal(10, 2) ) AS metric_value, tim.time_bucket_id AS time_bucket_id, run_log.run_id AS run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND rx.franchise_name = acct.franchise AND rx.abbott_customer_id = acct.abbott_account_id INNER JOIN time_weekly tim ON rx.week_end_date BETWEEN tim.start_date AND tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER JOIN run_log ON rx.franchise_name = run_log.franchise WHERE trim( lower(data_group) ) = 'nrtl_rx' AND trim( upper(metric_name) ) = 'NBRX' AND lower( trim(franchise_name) ) = 'hepatology' AND trim( lower(mkt.product_group) ) = 'hcv market' AND rx.brand = 'MAVYRET' GROUP BY 1, 2, 3, 4, 5, 7, 8, 9 ) SELECT franchise, geo_id, geo_code, -1 AS PRODUCT_ID, product_name, physician_id, 'NBRX_VOL_NR' AS METRIC_NAME, metric_value, time_bucket_id, To_date( CURRENT_TIMESTAMP() ) AS DATA_REFRESH_DATE, run_id, -1 AS MARKET_ID, Cast(NULL AS STRING) AS SEGMENT_NAME, Cast(NULL AS STRING) AS ACCESS_TYPE, -1 AS PLAN_ID, Cast(NULL AS STRING) AS METRIC_TYPE_GROUP, Cast(NULL AS STRING) AS METRIC_TYPE_SUBGROUP FROM fact_monthly UNION ALL SELECT franchise, geo_id, geo_code, -1 AS PRODUCT_ID, product_name, physician_id, 'NBRX_VOL_NR' AS METRIC_NAME, metric_value, time_bucket_id, To_date( CURRENT_TIMESTAMP() ) AS DATA_REFRESH_DATE, run_id, -1 AS MARKET_ID, Cast(NULL AS STRING) AS SEGMENT_NAME, Cast(NULL AS STRING) AS ACCESS_TYPE, -1 AS PLAN_ID, Cast(NULL AS STRING) AS METRIC_TYPE_GROUP, Cast(NULL AS STRING) AS METRIC_TYPE_SUBGROUP FROM fact_weekly"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "nbrx_vol_change_nr",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_vol_change_nr_all",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as ( select distinct rep.territory_number as territory_number, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1', 'HCV3') union all select distinct rep.territory_number, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1') union all select distinct rep.territory_number, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1') ), tim as ( select distinct time_dimension_id as time_bucket_id, time_bucket_name, start_date, end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'NRTL_MONTHLY' ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), acct AS ( SELECT distinct abbott_account_id, account_name, franchise, sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise = 'Hepatology' ), mdm AS ( SELECT distinct product_family_name, child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name = 'Hepatology' ), mkt AS ( SELECT distinct product_group, product_name FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL WHERE trim( lower(product_group_type) ) = 'product' ), fact1 as ( SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, rx.brand as product_name, abbott_account_id as physician_id, sum(metric_value) as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim( lower(data_group) ) = 'nrtl_monthly' and trim( upper(metric_name) ) = 'NON_RETAIL_RX' AND lower( trim(franchise_name) ) = 'hepatology' AND trim( lower(mkt.product_group) ) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 union all SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, rx.brand as product_name, cast('-1' as string) as physician_id, sum(metric_value) as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim( lower(data_group) ) = 'nrtl_monthly' and trim( upper(metric_name) ) = 'NON_RETAIL_RX' AND lower( trim(franchise_name) ) = 'hepatology' AND trim( lower(mkt.product_group) ) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 ), curr as ( select franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PRODUCT_NAME, PHYSICIAN_ID, 'NBRX_VOL_PCT_CNG_NR' as METRIC_NAME, metric_value, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP, time_bucket_name from fact1 where fact1.PRODUCT_NAME = 'MAVYRET' and time_bucket_name in ('C1M', 'C3M', 'C6M', 'C12M', 'QTD') ), prev as ( select franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PRODUCT_NAME, PHYSICIAN_ID, 'NBRX_VOLUME_PCT_CNG_NR' as METRIC_NAME, metric_value, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP, case when fact1.time_bucket_name = 'P1M' THEN 'C1M' when fact1.time_bucket_name = 'P3M' THEN 'C3M' when fact1.time_bucket_name = 'P6M' THEN 'C6M' when fact1.time_bucket_name = 'P12M' THEN 'C12M' when fact1.time_bucket_name = 'PQTD' THEN 'QTD' end as time_bucket_name from fact1 where fact1.PRODUCT_NAME = 'MAVYRET' and time_bucket_name in ( 'P1M', 'P3M', 'P6M', 'P12M', 'PQTD' ) ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce( curr.product_id, prev.product_id ) as product_id, coalesce( curr.product_name, prev.product_name ) as product_name, coalesce( curr.physician_id, prev.physician_id ) as physician_id, 'NBRX_VOL_PCT_CNG_NR' as metric_name, case when coalesce(prev.metric_value, 0) = 0 then 0 else cast( ( ( ( coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) ) \/ coalesce(prev.metric_value, 0) ) * 100 ) as decimal(10, 2) ) end as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce( curr.data_refresh_date, prev.data_refresh_date ) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce( curr.segment_name, prev.segment_name ) as segment_name, coalesce( curr.ACCESS_TYPE, prev.ACCESS_TYPE ) as ACCESS_TYPE, coalesce(curr.plan_id, prev.plan_id) as plan_id from curr inner join prev on coalesce( lower( trim(curr.franchise) ), '' ) = coalesce( lower( trim(prev.franchise) ), '' ) and coalesce( lower( trim(curr.product_name) ), '' ) = coalesce( lower( trim(prev.product_name) ), '' ) and coalesce( lower( trim(curr.geo_id) ), '' ) = coalesce( lower( trim(prev.geo_id) ), '' ) and coalesce( lower( trim(curr.geo_code) ), '' ) = coalesce( lower( trim(prev.geo_code) ), '' ) and coalesce( lower( trim(curr.physician_id) ), '' ) = coalesce( lower( trim(prev.physician_id) ), '' ) and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce( lower( trim(curr.run_id) ), 0 ) = coalesce( lower( trim(prev.run_id) ), 0 ) and coalesce( lower( trim(curr.product_id) ), 0 ) = coalesce( lower( trim(prev.product_id) ), 0 ) and coalesce( lower( trim(curr.segment_name) ), '' ) = coalesce( lower( trim(prev.segment_name) ), '' ) and coalesce( lower( trim(curr.market_id) ), '' ) = coalesce( lower( trim(prev.market_id) ), '' ) and coalesce( lower( trim(curr.time_bucket_name) ), '' ) = coalesce( lower( trim(prev.time_bucket_name) ), '' )"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "nbrx_volume_share_nr",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_nr_all",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as( select distinct rep.territory_number as territory_number, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1', 'HCV3') union all select distinct rep.territory_number, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1') union all select distinct rep.territory_number, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1')), tim as ( select distinct time_dimension_id as time_bucket_id, time_bucket_name, start_date, end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'NRTL_MONTHLY' ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), acct AS ( SELECT distinct abbott_account_id, account_name, franchise, sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise = 'Hepatology' ), mdm AS ( SELECT distinct product_family_name, child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name = 'Hepatology' ), mkt AS ( SELECT distinct product_group, product_name FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL WHERE trim(lower(product_group_type)) = 'product' ), fact1 as ( SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, cast('MAVYRET' as string) as product_name, abbott_account_id as physician_id, case when sum(metric_value)=0 then 0 else (sum(case when rx.brand='MAVYRET' THEN metric_value end)\/sum(metric_value))*100 end as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim(lower(data_group)) = 'nrtl_monthly' and trim(upper(metric_name)) = 'NON_RETAIL_RX' AND lower(trim(franchise_name)) = 'hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 union all SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, cast('MAVYRET' as string) as product_name, cast('-1' as string) as physician_id, case when sum(metric_value)=0 then 0 else sum(case when rx.brand='MAVYRET' THEN metric_value end)\/sum(metric_value) * 100 end as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim(lower(data_group)) = 'nrtl_monthly' and trim(upper(metric_name)) = 'NON_RETAIL_RX' AND lower(trim(franchise_name)) = 'hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 ) select franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PRODUCT_NAME, PHYSICIAN_ID, 'NBRX_SHARE_NR' as METRIC_NAME, cast(metric_value as decimal(10,2)), TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from fact1 where time_bucket_name in ('C1M', 'C3M', 'C6M', 'C12M', 'QTD')  and metric_value is not null"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "nbrx_volume_share_pct_nr",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_pct_nr_all",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as( select distinct rep.territory_number as territory_number, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1', 'HCV3') union all select distinct rep.territory_number, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1') union all select distinct rep.territory_number, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' and rep.sales_force in ('HCV1')), tim as ( select distinct time_dimension_id as time_bucket_id, time_bucket_name, start_date, end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'NRTL_MONTHLY' ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), acct AS ( SELECT distinct abbott_account_id, account_name, franchise, sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise = 'Hepatology' ), mdm AS ( SELECT distinct product_family_name, child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name = 'Hepatology' ), mkt AS ( SELECT distinct product_group, product_name FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL WHERE trim(lower(product_group_type)) = 'product' ), fact1 as ( SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, cast('MAVYRET' as string) as product_name, abbott_account_id as physician_id, case when sum(metric_value)=0 then 0 else (sum(case when rx.brand='MAVYRET' THEN metric_value end)\/sum(metric_value))*100 end as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim(lower(data_group)) = 'nrtl_monthly' and trim(upper(metric_name)) = 'NON_RETAIL_RX' AND lower(trim(franchise_name)) = 'hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 union all SELECT RX.franchise_name as franchise, geo_dim.GEO_ID as geo_id, geo_dim.GEO_CODE as geo_code, cast('MAVYRET' as string) as product_name, cast('-1' as string) as physician_id, case when sum(metric_value)=0 then 0 else (sum(case when rx.brand='MAVYRET' THEN metric_value end)\/sum(metric_value))*100 end as metric_value, tim.TIME_BUCKET_ID as TIME_BUCKET_ID, run_log.run_id as run_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl rx INNER JOIN geo_dim ON rx.geo_id = geo_dim.territory_number INNER JOIN acct ON rx.sales_force_code = acct.sales_force_code AND RX.franchise_name = acct.franchise AND RX.abbott_customer_id = acct.abbott_account_id inner Join tim on rx.month_start_date between tim.start_date and tim.end_date INNER JOIN mdm ON rx.abbott_product_id = mdm.child_product_id INNER JOIN mkt ON mkt.product_name = mdm.product_family_name INNER join run_log on rx.franchise_name = run_log.franchise WHERE trim(lower(data_group)) = 'nrtl_monthly' and trim(upper(metric_name)) = 'NON_RETAIL_RX' AND lower(trim(franchise_name)) = 'hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' group by 1, 2, 3, 4, 5, 7, 8, 9 ), curr as ( select franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PRODUCT_NAME, PHYSICIAN_ID, metric_value, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP, time_bucket_name from fact1 where time_bucket_name in ('C1M', 'C3M', 'C6M', 'C12M', 'QTD') ), prev as ( select franchise, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PRODUCT_NAME, PHYSICIAN_ID, metric_value, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, run_id, -1 as MARKET_ID, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP, case when fact1.time_bucket_name = 'P1M' THEN 'C1M' when fact1.time_bucket_name = 'P3M' THEN 'C3M' when fact1.time_bucket_name = 'P6M' THEN 'C6M' when fact1.time_bucket_name = 'P12M' THEN 'C12M' when fact1.time_bucket_name = 'PQTD' THEN 'QTD' end as time_bucket_name from fact1 where time_bucket_name in ('P1M', 'P3M', 'P6M', 'P12M', 'PQTD') ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_SHARE_CNG_PCT_NR' as metric_name, cast( coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) as decimal(10, 2)) as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name,coalesce(curr.ACCESS_TYPE, prev.ACCESS_TYPE) as ACCESS_TYPE,coalesce(curr.plan_id, prev.plan_id) as plan_id from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(lower(trim(curr.time_bucket_name)), '') = coalesce(lower(trim(prev.time_bucket_name)), '')"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "daa_mkt_vol_nr_proc",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "daa_mkt_vol_non_retail_proc_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim  as (select distinct rep.territory_number as territory_number,  rep.territory_number as geo_id,                 'territory' as geo_code  from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep  where REP.FRANCHISE='Hepatology' AND                 REP.TERRITORY_TYPE_ID='REP'  and rep.sales_force in ('HCV1','HCV3')                 union all                  select distinct rep.territory_number, rep.district as geo_id,                 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep  where REP.FRANCHISE='Hepatology' AND                 REP.TERRITORY_TYPE_ID='REP'  and rep.sales_force in ('HCV1')                 union all                  select distinct rep.territory_number, rep.region as geo_id,                 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep  where REP.FRANCHISE='Hepatology' AND                 REP.TERRITORY_TYPE_ID='REP'  and rep.sales_force in ('HCV1')                             ), tim as (                 select distinct time_dimension_id,time_bucket_name,start_date,end_date from                 abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group='NRTL_MONTHLY'                                ),                rep AS (                 SELECT  territory_number                        ,district                        ,region                 FROM abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl                 WHERE territory_type_id='REP'                 AND lower(region) IN ('ha', 'hb', 'hc') ), acct AS (                 SELECT  distinct abbott_account_id                        ,account_name                        ,franchise                        ,sales_force_code                 FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl                 WHERE franchise='Hepatology' ), mdm AS (                 SELECT  distinct product_family_name                        ,child_product_id                 FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl                 WHERE franchise_name='Hepatology' ), mkt AS (                 SELECT  distinct product_group                        ,product_name                 FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL                 WHERE trim(lower(product_group_type)) = 'product' ), run_log as      (               select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log               where upper(franchise) = 'HEPATOLOGY'               group by franchise      ) ,fact1 as(                 SELECT   rx.franchise_name as franchise, \t\t\t\t\t\tgeo_dim.geo_id,\t\t\t\t\t\t \t\t\t\t        geo_dim.geo_code                        ,abbott_account_id as physician_id                        ,metric_value                        ,time_dimension                        ,tim.time_dimension_ID                        ,tim.time_bucket_name                                                          FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX                 INNER JOIN geo_dim                 ON RX.geo_id=geo_dim.territory_number                 INNER JOIN acct                 ON RX.sales_force_code=acct.sales_force_code AND RX.franchise_name=acct.franchise AND RX.abbott_customer_id=acct.abbott_account_id                 inner Join tim                 on to_date(rx.month_start_date)>=tim.start_date and to_date(rx.month_start_date)<=tim.end_date                 INNER JOIN mdm                 ON rx.abbott_product_id=mdm.child_product_id                 INNER JOIN mkt                 ON mkt.product_name=mdm.product_family_name                 WHERE (data_group='nrtl_monthly' and metric_name='NON_RETAIL_RX')                 AND franchise_name='Hepatology'                 AND trim(lower(mkt.product_group)) = 'daa market'                ), fact2 AS (                 SELECT  rx.franchise_name as franchise, \t\t\t\t\t\tgeo_dim.geo_id,\t\t\t\t\t\t \t\t\t\t        geo_dim.geo_code                        ,abbott_account_id as physician_id                        ,metric_value                        ,time_dimension                        ,tim.time_dimension_ID                        ,tim.time_bucket_name                                                                            FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX                 INNER JOIN geo_dim                 ON RX.geo_id=geo_dim.territory_number                 INNER JOIN acct                 ON RX.sales_force_code=acct.sales_force_code                 AND  RX.franchise_name=acct.franchise AND RX.abbott_customer_id=acct.abbott_account_id                 inner Join tim \t\t\t\ton to_date(rx.week_end_date)>=tim.start_date and to_date(rx.week_end_date)<=tim.end_date                 INNER JOIN mdm                 ON rx.abbott_product_id=mdm.child_product_id                 INNER JOIN mkt                 ON mkt.product_name=mdm.product_family_name                 WHERE (data_group='nrtl_monthly' and metric_name='NON_RETAIL_RX')     AND franchise_name='Hepatology'                 AND trim(lower(mkt.product_group)) = 'daa market'                )                 select franchise, geo_id,geo_code, -1 as product_id,product_name,'-1' as  physician_id,  metric_name,    time_bucket_id,  data_refresh_date , run_id, -1 as market_id,   segment_name, metric_type_group,    metric_type_subgroup ,  access_type ,-1 as plan_id,  metric_value from (                select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_NR' as metric_name,   time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id,  Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group,  Cast(Null as String) as metric_type_subgroup,  Cast(Null as String) as access_type , cast(Sum(Metric_value) as decimal(10,2)) as metric_value from fact1 inner join run_log on run_log.franchise = fact1.franchise  where  time_bucket_name in ('C1M','C3M','C6M','C12M')   GROUP BY fact1.franchise, geo_id, geo_code,  product_name,  metric_name,  time_bucket_id, data_refresh_date, run_id,  segment_name, access_type,  metric_type_group,  metric_type_subgroup , time_dimension_ID  )  union all  select franchise, geo_id,geo_code, -1 as product_id,product_name,'-1' as  physician_id,  metric_name,    time_bucket_id,  data_refresh_date , run_id, -1 as market_id,   segment_name, metric_type_group,    metric_type_subgroup ,  access_type ,-1 as plan_id,  metric_value from (   select fact2.franchise, geo_id,geo_code,'DAA MARKET' as product_name, 'DAA_MKT_VOL_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group,  Cast(Null as String) as metric_type_subgroup ,  Cast(Null as String) as access_type , cast(Sum(Metric_value) as decimal(10,2)) as metric_value from fact2 inner join run_log on run_log.franchise = fact2.franchise where  time_bucket_name in ('QTD')  GROUP BY fact2.franchise, geo_id, geo_code,  product_name,  metric_name, time_bucket_id, data_refresh_date, run_id,  segment_name, access_type,  metric_type_group, metric_type_subgroup , time_dimension_ID )union all  select franchise, geo_id,geo_code, -1 as product_id,product_name,  physician_id,  metric_name,    time_bucket_id,  data_refresh_date , run_id, -1 as market_id,   segment_name, metric_type_group,    metric_type_subgroup ,  access_type ,-1 as plan_id,  metric_value from (                select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_NR' as metric_name,physician_id,   time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id,  Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group,  Cast(Null as String) as metric_type_subgroup,  Cast(Null as String) as access_type , cast(Sum(Metric_value) as decimal(10,2)) as metric_value from fact1 inner join run_log on run_log.franchise = fact1.franchise  where  time_bucket_name in ('C1M','C3M','C6M','C12M')   GROUP BY fact1.franchise, geo_id, geo_code,  product_name,  metric_name,physician_id,  time_bucket_id, data_refresh_date, run_id,  segment_name, access_type,  metric_type_group,  metric_type_subgroup , time_dimension_ID  )  union all  select franchise, geo_id,geo_code, -1 as product_id,product_name,  physician_id,  metric_name,    time_bucket_id,  data_refresh_date , run_id, -1 as market_id,   segment_name, metric_type_group,    metric_type_subgroup ,  access_type ,-1 as plan_id,  metric_value from (   select fact2.franchise, geo_id,geo_code,'DAA MARKET' as product_name, 'DAA_MKT_VOL_NR' as metric_name,physician_id, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group,  Cast(Null as String) as metric_type_subgroup ,  Cast(Null as String) as access_type , cast(Sum(Metric_value) as decimal(10,2)) as metric_value from fact2 inner join run_log on run_log.franchise = fact2.franchise where  time_bucket_name in ('QTD')  GROUP BY fact2.franchise, geo_id, geo_code,  product_name,  metric_name,physician_id, time_bucket_id, data_refresh_date, run_id,  segment_name, access_type,  metric_type_group, metric_type_subgroup , time_dimension_ID )"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "daa_mkt_vol_change_pct_nr_proc",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "daa_mkt_vol_change_pct_non_retail_proc_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as ( select distinct rep.territory_number as territory_number, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1','HCV3') union all select distinct rep.territory_number, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1') union all select distinct rep.territory_number, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1') ), tim as ( select distinct time_dimension_id,time_bucket_name,start_date,end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group='NRTL_MONTHLY' ), rep AS ( SELECT territory_number ,district ,region FROM abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl WHERE territory_type_id='REP' AND lower(region) IN ('ha', 'hb', 'hc') ), acct AS ( SELECT distinct abbott_account_id ,account_name ,franchise ,sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise='Hepatology' ), mdm AS ( SELECT distinct product_family_name ,child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name='Hepatology' ), mkt AS ( SELECT distinct product_group ,product_name FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL WHERE trim(lower(product_group_type)) = 'product' ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) ,fact1 as( SELECT rx.franchise_name as franchise, geo_dim.geo_id, geo_dim.geo_code ,abbott_account_id as physician_id ,metric_value ,time_dimension ,tim.time_dimension_ID ,tim.time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN geo_dim ON RX.geo_id=geo_dim.territory_number INNER JOIN acct ON RX.sales_force_code=acct.sales_force_code AND RX.franchise_name=acct.franchise AND RX.abbott_customer_id=acct.abbott_account_id inner Join tim on to_date(rx.month_start_date)>=tim.start_date and to_date(rx.month_start_date)<=tim.end_date INNER JOIN mdm ON rx.abbott_product_id=mdm.child_product_id INNER JOIN mkt ON mkt.product_name=mdm.product_family_name WHERE (data_group='nrtl_monthly' and metric_name='NON_RETAIL_RX') AND franchise_name='Hepatology' AND trim(lower(mkt.product_group)) = 'daa market' ), fact2 AS ( SELECT rx.franchise_name as franchise, geo_dim.geo_id, geo_dim.geo_code ,abbott_account_id as physician_id ,metric_value ,time_dimension ,tim.time_dimension_ID ,tim.time_bucket_name FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN geo_dim ON RX.geo_id=geo_dim.territory_number INNER JOIN acct ON RX.sales_force_code=acct.sales_force_code AND RX.franchise_name=acct.franchise AND RX.abbott_customer_id=acct.abbott_account_id inner Join tim on to_date(rx.week_end_date)>=tim.start_date and to_date(rx.week_end_date)<=tim.end_date INNER JOIN mdm ON rx.abbott_product_id=mdm.child_product_id INNER JOIN mkt ON mkt.product_name=mdm.product_family_name WHERE (data_group='nrtl_monthly' and metric_name='NON_RETAIL_RX') AND franchise_name='Hepatology' AND trim(lower(mkt.product_group)) = 'daa market' ) ,cur_CHG_M1 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C1M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_CHG_M1 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P1M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_CHG_M3 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C3M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_CHG_M3 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P3M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_CHG_M6 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,'-1' as physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C6M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_CHG_M6 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P6M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_CHG_M12 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C12M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_CHG_M12 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P12M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_CHG_QTD as ( select fact2.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact2 inner join run_log on run_log.franchise = fact2.franchise where time_bucket_name in ('QTD') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_CHG_QTD as ( select fact2.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact2 inner join run_log on run_log.franchise = fact2.franchise where time_bucket_name in ('PQTD') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_A_CHG_M1 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C1M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_A_CHG_M1 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P1M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_A_CHG_M3 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C3M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_A_CHG_M3 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P3M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_A_CHG_M6 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C6M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_A_CHG_M6 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P6M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_A_CHG_M12 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('C12M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_A_CHG_M12 as ( select fact1.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact1 inner join run_log on run_log.franchise = fact1.franchise where time_bucket_name in ('P12M') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,cur_A_CHG_QTD as ( select fact2.franchise, geo_id,geo_code, 'DAA MARKET' as product_name, physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as CUR_VOL from fact2 inner join run_log on run_log.franchise = fact2.franchise where time_bucket_name in ('QTD') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) ,pre_A_CHG_QTD as ( select fact2.franchise, geo_id,geo_code, 'DAA MARKET' as product_name,physician_id, 'DAA_MKT_VOL_CNG_PCT_NR' as metric_name, time_dimension_ID as time_bucket_id, current_date() as data_refresh_date ,run_log.run_id, Cast(Null as String) as segment_name, Cast(Null as String) as metric_type_group, Cast(Null as String) as metric_type_subgroup , Cast(Null as String) as access_type , Sum(Metric_value) as PRE_VOL from fact2 inner join run_log on run_log.franchise = fact2.franchise where time_bucket_name in ('PQTD') GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12 ) , final as ( select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, '-1' as physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_CHG_M1 curr inner join pre_CHG_M1 pre on curr.geo_id= pre.geo_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, '-1' as physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_CHG_M3 curr inner join pre_CHG_M3 pre on curr.geo_id= pre.geo_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, '-1' as physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_CHG_M6 curr inner join pre_CHG_M6 pre on curr.geo_id= pre.geo_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, '-1' as physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_CHG_M12 curr inner join pre_CHG_M12 pre on curr.geo_id= pre.geo_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, '-1' as physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_CHG_QTD curr inner join pre_CHG_QTD pre on curr.geo_id= pre.geo_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, curr.physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_A_CHG_M1 curr inner join pre_A_CHG_M1 pre on curr.geo_id= pre.geo_id and curr.physician_id=pre.physician_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, curr.physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_A_CHG_M3 curr inner join pre_A_CHG_M3 pre on curr.geo_id= pre.geo_id and curr.physician_id=pre.physician_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, curr.physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_A_CHG_M6 curr inner join pre_A_CHG_M6 pre on curr.geo_id= pre.geo_id and curr.physician_id=pre.physician_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, curr.physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_A_CHG_M12 curr inner join pre_A_CHG_M12 pre on curr.geo_id= pre.geo_id and curr.physician_id=pre.physician_id UNION ALL select curr.franchise,curr.geo_id,curr.geo_code, -1 as product_id, curr.product_name, curr.physician_id, curr.metric_name, curr.time_bucket_id, curr.data_refresh_date ,curr.run_id, '-1' as market_id, curr.segment_name, curr.metric_type_group, curr.metric_type_subgroup , curr.access_type , -1 as plan_id, CASE when pre.PRE_VOL <>0 THEN cast(((curr.CUR_VOL-pre.PRE_vol)\/pre.PRE_VOL)*100 as decimal(10,2)) else 0.00 END AS metric_value from cur_A_CHG_QTD curr inner join pre_A_CHG_QTD pre on curr.geo_id= pre.geo_id and curr.physician_id=pre.physician_id ) select franchise,geo_id,geo_code, product_id, product_name, physician_id, metric_name, time_bucket_id, data_refresh_date ,run_id, market_id, segment_name, metric_type_group, metric_type_subgroup , access_type , plan_id, sum(metric_value) as metric_value from final group by franchise,geo_id,geo_code, product_id, product_name, physician_id, metric_name, time_bucket_id, data_refresh_date ,run_id, market_id, segment_name, metric_type_group, metric_type_subgroup , access_type , plan_id"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "spkr_prog_attendees_avg",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_avg_overall",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group)) = 'SPKR_PROG_ATTENDEES' and time_bucket_name in ('QTD','YTD','C4W','C13W')), rep as ( select distinct * from ( select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_dtl_followup_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') ) rep ), attendee as ( SELECT A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE as sales_force, time.time_bucket_id, cast(count(distinct a.attendee_id) as decimal(10, 2)) as overall, rep.territory_type_id FROM abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl A inner join time on to_date(A.event_date) >= to_date(time.start_date) and to_date(A.event_date) <= to_date(time.end_date) inner join rep on rep.territory_number=A.territory_number and rep.territory_type_id in ('REP','RM','DM') WHERE A.franchise = 'Hepatology' and A.sales_force_code<>'HCV2' and A.prescriber_status = 'Y' GROUP BY A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE, time.time_bucket_id, rep.territory_type_id ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( select attendee.franchise, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee inner join( select franchise, count( territory_number) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, fran.denom, time_bucket_id union select attendee.franchise, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct district) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise, fran.denom, time_bucket_id union select attendee.franchise, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'REGION' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct region) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise, fran.denom, time_bucket_id union select attendee.franchise, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(territory_number) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, attendee.region, regn.denom, time_bucket_id union select attendee.franchise, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(distinct district) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force not in ('HCV2') group by attendee.franchise, attendee.region, regn.denom, time_bucket_id union select attendee.franchise, 'district' as geo_code, attendee.district as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ dist.denom as decimal(10, 2)) as metric_value from attendee join( select district, count(distinct territory_number) as denom from rep where territory_type_id in ('REP') group by district ) dist on attendee.district = dist.district where attendee.territory_type_id in ('REP') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, attendee.district, dist.denom, time_bucket_id ), load_table as ( select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'SPKR_PROG_ATTENDEES_AVG' as METRIC_NAME, cast(nvl(METRIC_VALUE, 0) as decimal(10, 2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, base.SEGMENT_NAME as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast('OVERALL' as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from base inner join run_log on base.franchise = run_log.franchise ) select * from load_table"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "spkr_prog_attendees_avg",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_avg_presVSnonpres",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group)) = 'SPKR_PROG_ATTENDEES' and time_bucket_name in ('QTD','YTD','C4W','C13W')), rep as ( select distinct * from ( select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_dtl_followup_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') ) rep ), attendee as ( SELECT A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE as sales_force, time.time_bucket_id, cast(count(distinct a.attendee_id) as decimal(10, 2)) as overall, rep.territory_type_id, prescriber_status as attr FROM abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl A inner join time on to_date(A.event_date) >= to_date(time.start_date) and to_date(A.event_date) <= to_date(time.end_date) inner join rep on rep.territory_number=A.territory_number and rep.territory_type_id in ('REP','RM','DM') WHERE A.franchise = 'Hepatology' GROUP BY A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE, time.time_bucket_id, rep.territory_type_id, prescriber_status ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee inner join( select franchise, count( territory_number) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, fran.denom,attr, time_bucket_id union select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct district) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, fran.denom, time_bucket_id union select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'REGION' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct region) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, fran.denom, time_bucket_id union select attendee.franchise,attr, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(territory_number) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attr, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attr, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(distinct district) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attr, 'district' as geo_code, attendee.district as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ dist.denom as decimal(10, 2)) as metric_value from attendee join( select district, count(distinct territory_number) as denom from rep where territory_type_id in ('REP') group by district ) dist on attendee.district = dist.district where attendee.territory_type_id in ('REP') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attr, attendee.district, dist.denom, time_bucket_id ), load_table as (select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'SPKR_PROG_ATTENDEES_AVG' as METRIC_NAME, cast(nvl(METRIC_VALUE, 0) as decimal(10, 2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, base.SEGMENT_NAME as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, case when base.attr = 'Y' THEN 'PRESCRIBER' when base.attr = 'N' THEN 'NON-PRESCRIBER' end as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from base inner join run_log on base.franchise = run_log.franchise ) select * from load_table"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "spkr_prog_attendees_avg",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_avg_callVSnoncall",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group)) = 'SPKR_PROG_ATTENDEES' and time_bucket_name in ('QTD','YTD','C4W','C13W')), rep as ( select distinct * from ( select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_dtl_followup_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') ) rep ), attendee as ( SELECT A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE as sales_force, time.time_bucket_id, cast(count(distinct a.attendee_id) as decimal(10, 2)) as overall, rep.territory_type_id, call_plan_flag as attr FROM abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl A inner join time on to_date(A.event_date) >= to_date(time.start_date) and to_date(A.event_date) <= to_date(time.end_date) inner join rep on rep.territory_number=A.territory_number and rep.territory_type_id in ('REP','RM','DM') WHERE A.franchise = 'Hepatology' and A.prescriber_status = 'Y' GROUP BY A.TERRITORY_NUMBER, a.DISTRICT, a.REGION, a.FRANCHISE, A.SALES_FORCE_CODE, time.time_bucket_id, rep.territory_type_id, call_plan_flag ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee inner join( select franchise, count( territory_number) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, fran.denom,attr, time_bucket_id union select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct district) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, fran.denom, time_bucket_id union select attendee.franchise,attr, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'REGION' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct region) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, fran.denom, time_bucket_id union select attendee.franchise,attr, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(distinct territory_number) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attr, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attr, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(distinct district) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force not in ('HCV2') group by attendee.franchise,attr, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attr, 'district' as geo_code, attendee.district as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ dist.denom as decimal(10, 2)) as metric_value from attendee join( select district, count(distinct territory_number) as denom from rep where territory_type_id in ('REP') group by district ) dist on attendee.district = dist.district where attendee.territory_type_id in ('REP') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attr, attendee.district, dist.denom, time_bucket_id ), load_table as (select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'SPKR_PROG_ATTENDEES_AVG' as METRIC_NAME, cast(nvl(METRIC_VALUE, 0) as decimal(10, 2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, base.SEGMENT_NAME as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, case when base.attr='Y' THEN 'CALL_PLAN' when base.attr='N' THEN 'NON_CALL_PLAN' end as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from base inner join run_log on base.franchise = run_log.franchise ) select * from load_table"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "spkr_prog_attendees_avg",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_avg_decile",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group)) = 'SPKR_PROG_ATTENDEES' and time_bucket_name in('QTD','YTD','C4W','C13W')), rep as ( select distinct * from ( select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_attendee_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_dtl_followup_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') union all select distinct a.sales_force, a.territory_number, a.district, a.region, a.franchise, a.territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl a inner join abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl b on a.territory_number=b.territory_number where a.franchise = 'Hepatology' and a.region in ('HA','HB','HC') ) rep ), fact as ( select fact1.abbott_customer_id, fact1.attendee_id, fact1.DISTRICT, fact1.REGION, time.time_bucket_id, fact1.franchise, 'Market_Decile' as attribution_name, fact1.territory_number, fact1.sales_force_code, fact1.prescriber_status, rep.territory_type_id, case WHEN cast(hcv_decile.SEGMENT_VALUE as int)>= 8 and cast(hcv_decile.SEGMENT_VALUE as int) <= 10 THEN 'High (D8 - D10)' WHEN cast(hcv_decile.SEGMENT_VALUE as int)>= 4 and cast(hcv_decile.SEGMENT_VALUE as int) <= 7 THEN 'Medium (D4 - D7)' WHEN cast(hcv_decile.SEGMENT_VALUE as int)>= 1 and cast(hcv_decile.SEGMENT_VALUE as int) <= 3 THEN 'Low (D1 - D3)' ELSE 'Non-Writer (D0)' END AS sub_group from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_ATTENDEE_FACT_TBL fact1 inner join rep on rep.territory_number=fact1.territory_number and rep.territory_type_id in ('REP','RM','DM') inner join time on to_date(fact1.event_date) between to_date(time.start_date) and to_date(time.end_date) left join abv_hcp360_sales_marketing_dm.RLTN_SEGMENT_DETAIL_tbl hcv_decile ON fact1.abbott_customer_id=hcv_decile.abbott_customer_id and hcv_decile.franchise_name='Hepatology' and hcv_decile.segment_name='HCV_DECILE' union all select fact1.abbott_customer_id, fact1.attendee_id, fact1.DISTRICT, fact1.REGION, time.time_bucket_id, fact1.franchise, 'DUP Decile' as attribution_name, fact1.territory_number, fact1.sales_force_code, fact1.prescriber_status, rep.territory_type_id, case WHEN (hcv_decile.SEGMENT_VALUE in ('D8','D9','D10')) THEN 'High (D8 - D10)' WHEN (hcv_decile.SEGMENT_VALUE in ('D4','D5','D6','D7')) THEN 'Medium (D4 - D7)' WHEN (hcv_decile.SEGMENT_VALUE in ('D1', 'D2','D3')) THEN 'Low (D1 - D3)' ELSE 'Non-Writer (D0)' END AS sub_group from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_ATTENDEE_FACT_TBL fact1 inner join rep on rep.territory_number=fact1.territory_number and rep.territory_type_id in ('REP','RM','DM') inner join time on to_date(fact1.event_date) between to_date(time.start_date) and to_date(time.end_date) left join abv_hcp360_sales_marketing_dm.RLTN_SEGMENT_DETAIL_tbl hcv_decile ON fact1.abbott_customer_id=hcv_decile.abbott_customer_id and hcv_decile.franchise_name='Hepatology' and hcv_decile.segment_name like 'DUP%' ), attendee as ( SELECT fact.TERRITORY_NUMBER, fact.DISTRICT, fact.REGION, fact.FRANCHISE, fact.SALES_FORCE_CODE as sales_force, fact.time_bucket_id, cast(count(distinct fact.attendee_id) as decimal(10, 2)) as overall, fact.attribution_name, fact.sub_group, fact.territory_type_id from fact WHERE upper(fact.franchise) = 'HEPATOLOGY' AND upper(SALES_FORCE_CODE) not in ('HCV2') AND upper(fact.prescriber_status) = 'Y' GROUP BY fact.TERRITORY_NUMBER, fact.DISTRICT, fact.REGION, fact.FRANCHISE, fact.SALES_FORCE_CODE, fact.time_bucket_id, fact.attribution_name, fact.sub_group, fact.territory_type_id ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), base as ( select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee inner join( select franchise, count( territory_number) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise, fran.denom,attendee.sub_group,attendee.attribution_name, time_bucket_id union select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct district) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attendee.sub_group,attendee.attribution_name, fran.denom, time_bucket_id union select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'nation' as geo_code, cast(-1 as string) as geo_id, time_bucket_id, 'REGION' as SEGMENT_NAME, cast(sum(overall) \/ fran.denom as decimal(10, 2)) as metric_value from attendee join( select franchise, count(distinct region) as denom from rep where territory_type_id in ('REP') group by franchise ) fran on attendee.franchise=fran.franchise where attendee.sales_force not in ('HCV2') group by attendee.franchise,attendee.sub_group,attendee.attribution_name, fran.denom, time_bucket_id union select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(territory_number) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attendee.sub_group,attendee.attribution_name, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'region' as geo_code, attendee.region as geo_id, time_bucket_id, 'DISTRICT' as SEGMENT_NAME, cast(sum(overall) \/ regn.denom as decimal(10, 2)) as metric_value from attendee join( select region, count(distinct district) as denom from rep where territory_type_id in ('REP') group by region ) regn on attendee.region = regn.region where attendee.territory_type_id in ('REP','DM') and attendee.sales_force not in ('HCV2') group by attendee.franchise,attendee.sub_group,attendee.attribution_name, attendee.region, regn.denom, time_bucket_id union select attendee.franchise,attendee.sub_group,attendee.attribution_name, 'district' as geo_code, attendee.district as geo_id, time_bucket_id, 'TERRITORY' as SEGMENT_NAME, cast(sum(overall) \/ dist.denom as decimal(10, 2)) as metric_value from attendee join( select district, count(distinct territory_number) as denom from rep where territory_type_id in ('REP') group by district ) dist on attendee.district = dist.district where attendee.territory_type_id in ('REP') and attendee.sales_force in ('HCV1','HCV3') group by attendee.franchise,attendee.sub_group,attendee.attribution_name, attendee.district, dist.denom, time_bucket_id ), load_table as ( select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'SPKR_PROG_ATTENDEES_AVG' as METRIC_NAME, cast(nvl(METRIC_VALUE, 0) as decimal(10, 2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, base.SEGMENT_NAME as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, attribution_name as METRIC_TYPE_GROUP, sub_group as METRIC_TYPE_SUBGROUP from base inner join run_log on base.franchise = run_log.franchise ) select * from load_table"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "spkr_prog_attendees_avg",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_avg",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "spkr_prog_attendees_avg-spkr_prog_attendees_avg_overall|spkr_prog_attendees_avg-spkr_prog_attendees_avg_presVSnonpres|spkr_prog_attendees_avg-spkr_prog_attendees_avg_callVSnoncall|spkr_prog_attendees_avg-spkr_prog_attendees_avg_decile",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "P2",
	"procedure_name": "engaged",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "engaged_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='DELIVERED_EMAILS' and time_bucket_name in ('YTD','QTD','MTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), phy_attr as ( select distinct franchise_name, abbott_customer_id, 'Market_Decile' as ATTRIBUTION_NAME, case WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=8 and cast(hcv_decile.SEGMENT_VALUE as int)<=10 ) THEN 'High  (D8 - D10)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=4 and cast(hcv_decile.SEGMENT_VALUE as int)<=7 ) THEN 'Medium  (D4 - D7)' WHEN (cast(hcv_decile.SEGMENT_VALUE as int)>=1 and cast(hcv_decile.SEGMENT_VALUE as int)<=3 ) THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('HCV_DECILE') and  hcv_decile.ads_active_flag = 'Y' union all select distinct franchise_name, abbott_customer_id, 'DUP Decile' as ATTRIBUTION_NAME, case WHEN hcv_decile.SEGMENT_VALUE in ('D8','D9','D10') THEN 'High  (D8 - D10)' WHEN hcv_decile.SEGMENT_VALUE in ('D4','D5','D6','D7') THEN 'Medium  (D4 - D7)' WHEN hcv_decile.SEGMENT_VALUE in ('D1','D2','D3') THEN 'Low  (D1 - D3)' ELSE 'Non-Writer (D0)' END AS SUB_GROUP from abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile where franchise_name = 'Hepatology' and segment_name in ('DUP Decile') and hcv_decile.ads_active_flag = 'Y' ) , fact as( select ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, 'OVERALL' as attribution_name, cast(NULL as string) as sub_group,base.EMAIL_UNIQUE_OPEN_COUNT,base.ABBOTT_CUSTOMER_ID from abv_hcp360_sales_marketing_dm.email_sent_tbl base full outer join ( select distinct territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology') ter on ter.territory_number=base.territory_number inner join time on to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) >= to_date(time.start_date) and to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) <= to_date(time.end_date) where base.franchise='Hepatology' union all select ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'Market_Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group,base.EMAIL_UNIQUE_OPEN_COUNT,base.ABBOTT_CUSTOMER_ID from abv_hcp360_sales_marketing_dm.email_sent_tbl base full outer join ( select distinct territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology') ter on ter.territory_number=base.territory_number left join (select * from phy_attr where upper(attribution_name) in ('MARKET_DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise = phy_attr.franchise_name inner join time on to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) >= to_date(time.start_date) and to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) <= to_date(time.end_date) where base.franchise='Hepatology' union all select ter.territory_number, ter.district, ter.region, ter.franchise, time.time_bucket_id, case when phy_attr.attribution_name is null then 'DUP Decile' else phy_attr.attribution_name end as attribution_name, case when phy_attr.sub_group is NULL then 'Non-Writer (D0)' else phy_attr.sub_group end as sub_group,base.EMAIL_UNIQUE_OPEN_COUNT,base.ABBOTT_CUSTOMER_ID from abv_hcp360_sales_marketing_dm.email_sent_tbl base full outer join ( select distinct territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology') ter on ter.territory_number=base.territory_number left join (select * from phy_attr where upper(attribution_name) in ('DUP DECILE')) phy_attr on base.abbott_customer_id = cast(phy_attr.abbott_customer_id as string) and base.franchise = phy_attr.franchise_name inner join time on to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) >= to_date(time.start_date) and to_date(CAST(base.EMAIL_ACTIVITY_DATE AS timestamp)) <= to_date(time.end_date) where base.franchise='Hepatology' ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'ENGAGED' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID,current_date() as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.METRIC_TYPE_GROUP as METRIC_TYPE_GROUP, base.METRIC_TYPE_SUBGROUP as METRIC_TYPE_SUBGROUP from (SELECT fact.FRANCHISE, fact.territory_number as GEO_ID, 'territory' as GEO_CODE,CAST((SUM(fact.EMAIL_UNIQUE_OPEN_COUNT) )\/ COUNT(fact.ABBOTT_CUSTOMER_ID )*100 AS DECIMAL(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.territory_number, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, fact.district as GEO_ID, 'district' as GEO_CODE,CAST((SUM(fact.EMAIL_UNIQUE_OPEN_COUNT) )\/ COUNT(fact.ABBOTT_CUSTOMER_ID )*100 AS DECIMAL(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.district, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, fact.region as GEO_ID, 'region' as GEO_CODE,CAST((SUM(fact.EMAIL_UNIQUE_OPEN_COUNT) )\/ COUNT(fact.ABBOTT_CUSTOMER_ID )*100 AS DECIMAL(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, fact.region, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group union all SELECT fact.FRANCHISE, cast(-1 as string) as GEO_ID, 'nation' as GEO_CODE,CAST((SUM(fact.EMAIL_UNIQUE_OPEN_COUNT) )\/ COUNT(fact.ABBOTT_CUSTOMER_ID )*100 AS DECIMAL(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact GROUP BY fact.FRANCHISE, TIME_BUCKET_ID, fact.attribution_name, fact.sub_group) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "followup_pct",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "all_geo_time",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as ( select distinct sales_force,territory_number, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' union all select distinct sales_force,territory_number, district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id in ('REP','DM') union all select distinct sales_force, territory_number, region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id in ('REP','DM','RM') union all select distinct sales_force,territory_number, '-1' as geo_id, 'nation' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id in ('REP','DM') ), time_dim as ( select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)='SPKR_PROG_ATTENDEES' and upper(time_bucket_name) in ('C4W','C13W','QTD','YTD') ), run_dim as ( select franchise,max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log group by 1 ) select rx.franchise as franchise, geo.geo_id as geo_id, geo.geo_code as geo_code, -1 as product_id, cast(NULL as string) as product_name, -1 as physician_id, 'FOLLOWUP_PCT' as metric_name, cast((CAST(count( case when rx.follow_up_attendee='Y' then rx.satellite_event_id end ) AS DECIMAL(10,2)))\/(count(rx.satellite_event_id))*100 as decimal(10,2)) as metric_value, tim.time_bucket_id as time_bucket_id, to_date(current_timestamp()) as data_refresh_date, run.run_id as run_id, -1 as market_id, cast(NULL as string) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise group by 1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_committed_avg",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_committed_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with base as ( select ter.franchise as franchise, district as geo_id, 'district' as geo_code, case when count(distinct ter.territory_number) = 0 then 0.00 else abs(cast(SUM(spend.COMMITTED_BUDJET_TOTAL)\/count(distinct ter.territory_number) as decimal(32,2))) end as metric_value , cast('TERRITORY' as string) as segment_name from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT territory_number,(SUM(COMMITTED_BUDJET_TOTAL)) as COMMITTED_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.strategic_spend_tbl A Where upper(trim(PRODUCT_DESCRIPTION)) <> 'STRATEGIC SPEND' and upper(trim(franchise_name))='HEPATOLOGY' group by territory_number ) spend on ter.territory_number=spend.territory_number where upper(trim(ter.franchise))='HEPATOLOGY' and upper(trim(territory_type_id)) in ('REP') and upper(trim(ter.sales_force)) IN ('HCV1','HCV3') Group by geo_id, franchise, geo_code, segment_name union all select ter.franchise as franchise, region as geo_id, 'region' as geo_code, case when count(distinct ter.territory_number) = 0 then 0.00 else abs(cast(SUM(spend.COMMITTED_BUDJET_TOTAL)\/count(distinct ter.territory_number) as decimal(32,2))) end as metric_value , cast('TERRITORY' as string) as segment_name from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT territory_number,(SUM(COMMITTED_BUDJET_TOTAL)) as COMMITTED_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.strategic_spend_tbl A Where upper(trim(PRODUCT_DESCRIPTION)) <> 'STRATEGIC SPEND' and upper(trim(franchise_name))='HEPATOLOGY' group by territory_number ) spend on ter.territory_number=spend.territory_number where upper(trim(ter.franchise))='HEPATOLOGY' and upper(trim(territory_type_id)) in ('REP') and upper(trim(ter.sales_force)) IN ('HCV1','HCV3') Group by geo_id, franchise, geo_code, segment_name union all select ter.franchise as franchise, cast(-1 as int) as geo_id,'nation' as geo_code, case when count(distinct ter.territory_number) = 0 then 0.00 else abs(cast(SUM(spend.COMMITTED_BUDJET_TOTAL)\/count(distinct ter.territory_number) as decimal(32,2))) end as metric_value , cast('TERRITORY' as string) as segment_name from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT territory_number,(SUM(COMMITTED_BUDJET_TOTAL)) as COMMITTED_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.strategic_spend_tbl A Where upper(trim(PRODUCT_DESCRIPTION)) <> 'STRATEGIC SPEND' and upper(trim(franchise_name))='HEPATOLOGY' group by territory_number ) spend on ter.territory_number=spend.territory_number where upper(trim(ter.franchise))='HEPATOLOGY' and upper(trim(territory_type_id)) in ('REP','RM','DM') and upper(trim(ter.sales_force)) IN ('HCV1','HCV3') Group by geo_id, franchise , geo_code, segment_name union all SELECT A.franchise_name as franchise, A.REGION as geo_id, 'region' as geo_code, case when count(distinct rep.DISTRICT) = 0 then 0.00 else abs(cast(sum(A.COMMITTED_BUDJET_TOTAL )\/count(distinct rep.DISTRICT) as decimal(32,2))) end AS metric_value, cast('DISTRICT' as string) as segment_name From abv_hcp360_sales_marketing_dm.strategic_spend_tbl A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND upper(trim(rep.territory_type_id)) IN ('REP','DM') Where upper(trim(PRODUCT_DESCRIPTION)) <> 'STRATEGIC SPEND' AND upper(trim(A.franchise_name))='HEPATOLOGY' GROUP BY geo_id, franchise_name , geo_code, segment_name union all select A.franchise_name as franchise ,cast(-1 as int) as geo_id , 'nation' as geo_code , case when count(distinct rep.DISTRICT) = 0 then 0.00 else abs(cast(SUM(A.COMMITTED_BUDJET_TOTAL)\/count(distinct rep.DISTRICT) as decimal(32,2))) end as metric_value , cast('DISTRICT' as string) as segment_name From abv_hcp360_sales_marketing_dm.strategic_spend_tbl A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND upper(trim(rep.territory_type_id)) IN ('REP','DM') Where upper(trim(PRODUCT_DESCRIPTION)) <> 'STRATEGIC SPEND' AND upper(trim(franchise_name))='HEPATOLOGY' and REP.region <>'HF' group by geo_id, franchise_name, geo_code, segment_name ), time as (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SPKR_PROG' and time_bucket_name in ('YTD')), run_log as (select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) select base.franchise, base.geo_id, base.geo_code, -1 as product_id , cast(null as string) as product_name , -1 as physician_id, cast('SPKR_PROG_COMMITTED_AVG' as string) as metric_name , base.metric_value, time.time_dimension_id as time_bucket_id ,to_date(current_timestamp()) as data_refresh_date,run_id, -1 as market_id, base.segment_name , cast(null as string) access_type, -1 as plan_id , cast(null as string) metric_type_group, cast(null as string) as metric_type_subgroup from base inner join time on time.franchise_name = base.franchise inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_remaining_avg",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_remaining_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with base as (select a.franchise_name as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_REMAINING_AVG' as metric_name, 'DISTRICT' as segment_name, SUM(A.BALANCE_BUDJET_TOTAL) \/count(distinct rep.district) as metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP','DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME='Hepatology' group by a.franchise_name,geo_id, geo_code union all select ter.franchise as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_REMAINING_AVG' as metric_name, 'TERRITORY' as segment_name, cast(SUM(spend.BALANCE_BUDJET_TOTAL)\/count(distinct ter.territory_number) as decimal(10,2)) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date,territory_number,CAST(SUM(BALANCE_BUDJET_TOTAL) AS DECIMAL(10,2)) as BALANCE_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP','RM','DM') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise, geo_id, geo_code union all SELECT a.franchise_name as franchise,a.REGION as geo_id ,'region' as geo_code,'SPKR_PROG_REMAINING_AVG' as metric_name, 'DISTRICT' as segment_name, cast(sum(A.BALANCE_BUDJET_TOTAL )\/count(distinct rep.DISTRICT) as decimal(10,2)) AS metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP','DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME='Hepatology' group by a.franchise_name,geo_id , geo_code union all select ter.franchise as franchise,TER.REGION as geo_id ,'region' as geo_code,'SPKR_PROG_REMAINING_AVG' as metric_name, 'TERRITORY' as segment_name, cast(SUM(spend.SPKR_PROG_REMAINING_AVG)\/count(distinct ter.territory_number) as decimal(10,2))as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date,territory_number,CAST(SUM(BALANCE_BUDJET_TOTAL) AS DECIMAL(10,2)) as SPKR_PROG_REMAINING_AVG from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise, geo_id , geo_code union all select ter.franchise as franchise,ter.district as geo_id ,'district' as geo_code,'SPKR_PROG_REMAINING_AVG' as metric_name,'TERRITORY' as segment_name, cast(SUM(spend.BALANCE_BUDJET_TOTAL)\/count(distinct ter.territory_number) as DECIMAL(10,2)) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date,territory_number,CAST(SUM(BALANCE_BUDJET_TOTAL) AS DECIMAL(10,2)) as BALANCE_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise,geo_id,geo_code ), time as ( select DISTINCT franchise_name,time_dimension_id as TIME_BUCKET_ID, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_PROG' and time_bucket_name in ('YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ) select base.FRANCHISE, GEO_ID, GEO_CODE,cast(-1 as int) as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, cast(-1 as int) as PHYSICIAN_ID, 'SPKR_PROG_REMAINING_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)), TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, cast(-1 as int) as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, cast(-1 as int) as PLAN_ID, cast(null as string) as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from base inner join time on time.franchise_name = base.franchise inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "followup_avg_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "followup_avg_pct_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim  as (  select distinct sales_force,territory_number, territory_number as geo_id, 'territory' as geo_code  from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl  where franchise='Hepatology' and territory_type_id='REP'  union all  select distinct sales_force,territory_number, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl  where franchise='Hepatology' and territory_type_id in ('REP','DM')  union all  select distinct sales_force, territory_number, region as geo_id, 'region' as geo_code  from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl  where franchise='Hepatology' and territory_type_id in ('REP','DM','RM')  union all  select distinct sales_force,territory_number, '-1' as geo_id, 'nation' as geo_code  from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl  where franchise='Hepatology' and territory_type_id in ('REP','DM') ), time_dim as (     select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name     from abv_hcp360_sales_marketing_dm.time_dimension_tbl     where upper(kpi_group)='SPKR_PROG_ATTENDEES'     and upper(time_bucket_name) in ('C4W','C13W','QTD','YTD') ), run_dim as ( select franchise,max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log group by 1 ) select 'FOLLOWUP_AVG_PCT' as metric_name, cast(count( DISTINCT case when rx.follow_up_attendee = 'Y' then  concat(rx.satellite_event_id, rx.abbott_customer_id) end ) \/ count(DISTINCT concat(rx.satellite_event_id, rx.abbott_customer_id)) * 100 as decimal(10,2))  as metric_value, 'nation' as geo_code, '-1' as geo_id, tim.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise as franchise, '-1' as physician_id, -1 as product_id, 'DISTRICT' as segment_name, to_date(current_timestamp()) as data_refresh_date, '-1' as market_id ,-1 as plan_id ,Cast(Null as string) as product_name ,Cast(Null as string) as access_type ,Cast(Null as string) as metric_type_group ,Cast(Null as string) as metric_type_subgroup from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise where geo.geo_code='district' group by 1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 union ALL select 'FOLLOWUP_AVG_PCT' as metric_name, cast(count( DISTINCT case when rx.follow_up_attendee = 'Y' then  concat(rx.satellite_event_id, rx.abbott_customer_id) end ) \/ count(DISTINCT concat(rx.satellite_event_id, rx.abbott_customer_id)) * 100 as decimal(10,2))  as metric_value, 'nation' as geo_code, '-1' as geo_id, tim.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise as franchise, '-1' as physician_id, -1 as product_id, 'TERRITORY' as segment_name, to_date(current_timestamp()) as data_refresh_date, '-1' as market_id ,-1 as plan_id ,Cast(Null as string) as product_name ,Cast(Null as string) as access_type ,Cast(Null as string) as metric_type_group ,Cast(Null as string) as metric_type_subgroup from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on  rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise where geo.geo_code='territory' group by 1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 union all select 'FOLLOWUP_AVG_PCT' as metric_name, cast(count( DISTINCT case when rx.follow_up_attendee = 'Y' then  concat(rx.satellite_event_id, rx.abbott_customer_id) end ) \/ count(DISTINCT concat(rx.satellite_event_id, rx.abbott_customer_id)) * 100 as decimal(10,2))  as metric_value, 'region' as geo_code, rx.region as geo_id, tim.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise as franchise, '-1' as physician_id, -1 as product_id, 'TERRITORY' as segment_name, to_date(current_timestamp()) as data_refresh_date, '-1' as market_id ,-1 as plan_id ,Cast(Null as string) as product_name ,Cast(Null as string) as access_type ,Cast(Null as string) as metric_type_group ,Cast(Null as string) as metric_type_subgroup from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise where geo.geo_code='territory' group by 1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 union ALL select 'FOLLOWUP_AVG_PCT' as metric_name, cast(count( DISTINCT case when rx.follow_up_attendee = 'Y' then  concat(rx.satellite_event_id, rx.abbott_customer_id) end ) \/ count(DISTINCT concat(rx.satellite_event_id, rx.abbott_customer_id)) * 100 as decimal(10,2))  as metric_value, 'region' as geo_code, rx.region as geo_id, tim.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise as franchise, '-1' as physician_id, -1 as product_id, 'DISTRICT' as segment_name, to_date(current_timestamp()) as data_refresh_date, '-1' as market_id ,-1 as plan_id ,Cast(Null as string) as product_name ,Cast(Null as string) as access_type ,Cast(Null as string) as metric_type_group ,Cast(Null as string) as metric_type_subgroup from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise where geo.geo_code='district' group by 1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 union ALL select 'FOLLOWUP_AVG_PCT' as metric_name, cast(count( DISTINCT case when rx.follow_up_attendee = 'Y' then  concat(rx.satellite_event_id, rx.abbott_customer_id) end ) \/ count(DISTINCT concat(rx.satellite_event_id, rx.abbott_customer_id)) * 100 as decimal(10,2))  as metric_value, 'district' as geo_code, rx.district as geo_id, tim.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise as franchise, '-1' as physician_id, -1 as product_id, 'TERRITORY' as segment_name, to_date(current_timestamp()) as data_refresh_date, '-1' as market_id ,-1 as plan_id ,Cast(Null as string) as product_name ,Cast(Null as string) as access_type ,Cast(Null as string) as metric_type_group ,Cast(Null as string) as metric_type_subgroup from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_DTL_FOLLOWUP_TBL rx inner join geo_dim geo on  rx.TERRITORY_NUMBER=geo.TERRITORY_NUMBER inner join time_dim tim on to_date(rx.event_date) <= to_date(tim.end_date) and to_date(rx.event_date) >= to_date(tim.start_date) inner join run_dim run on rx.franchise=run.franchise where geo.geo_code='territory' group by 1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_budget_avg",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "SPKR_PROG_BUDGET_AVG_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with base as ( select a.franchise_name as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_BUDGET_AVG' as metric_name, 'DISTRICT' as segment_name, ( CASE WHEN (SUM(A.BALANCE_BUDJET_TOTAL)\/count(distinct rep.district))<0 THEN ABS((SUM(A.COMMITTED_BUDJET_TOTAL)\/count(distinct rep.district))) + (ABS(SUM(A.USED_BUDJET_TOTAL)\/count(distinct rep.district))) ELSE ABS((SUM(A.COMMITTED_BUDJET_TOTAL)\/count(distinct rep.district))) + (ABS(SUM(A.USED_BUDJET_TOTAL)\/count(distinct rep.district)))+ (SUM(A.BALANCE_BUDJET_TOTAL)\/count(distinct rep.district)) end ) as metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP','DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME='Hepatology' group by a.franchise_name,geo_id, geo_code union all select ter.franchise as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_BUDGET_AVG' as metric_name, 'TERRITORY' as segment_name, ( CASE WHEN (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) < 0 then ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number))) else ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number)))+ (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) end )as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, SUM(BALANCE_BUDJET_TOTAL) as REMAINING, SUM(COMMITTED_BUDJET_TOTAL) as COMMITTED, SUM(USED_BUDJET_TOTAL) as USED from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP','RM','DM') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise, geo_id, geo_code union all SELECT a.franchise_name as franchise,a.REGION as geo_id ,'region' as geo_code,'SPKR_PROG_BUDGET_AVG' as metric_name, 'DISTRICT' as segment_name, ( CASE WHEN (SUM(A.BALANCE_BUDJET_TOTAL)\/count(distinct rep.district)) <0 THEN ABS((SUM(A.COMMITTED_BUDJET_TOTAL)\/count(distinct rep.district))) + ABS((SUM(A.USED_BUDJET_TOTAL)\/count(distinct rep.district))) ELSE (ABS((SUM(A.COMMITTED_BUDJET_TOTAL)\/count(distinct rep.district))) + ABS((SUM(A.USED_BUDJET_TOTAL)\/count(distinct rep.district)))+ +SUM(A.BALANCE_BUDJET_TOTAL)\/count(distinct rep.district)) END )as metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP','DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME='Hepatology' group by a.franchise_name,geo_id , geo_code union all select ter.franchise as franchise,TER.REGION as geo_id ,'region' as geo_code,'SPKR_PROG_BUDGET_AVG' as metric_name, 'TERRITORY' as segment_name, ( CASE WHEN (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) < 0 THEN ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number))) ELSE ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number)))+ (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) END )as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date,territory_number, CAST(SUM(BALANCE_BUDJET_TOTAL) AS DECIMAL(10,2)) as REMAINING, CAST(SUM(COMMITTED_BUDJET_TOTAL) AS DECIMAL(10,2)) as COMMITTED, CAST(SUM(USED_BUDJET_TOTAL) AS DECIMAL(10,2)) as USED from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise, geo_id , geo_code union all select ter.franchise as franchise,ter.district as geo_id ,'district' as geo_code, 'SPKR_PROG_BUDGET_AVG' as metric_name,'TERRITORY' as segment_name, ( CASE WHEN (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) <0 THEN ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number))) ELSE ABS((SUM(spend.COMMITTED)\/count(distinct ter.territory_number))) + ABS((SUM(spend.USED)\/count(distinct ter.territory_number)))+ (SUM(spend.REMAINING)\/count(distinct ter.territory_number)) END ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date,territory_number, CAST(SUM(BALANCE_BUDJET_TOTAL) AS DECIMAL(10,2)) as REMAINING, CAST(SUM(COMMITTED_BUDJET_TOTAL) AS DECIMAL(10,2)) as COMMITTED, CAST(SUM(USED_BUDJET_TOTAL) AS DECIMAL(10,2)) as USED from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name='Hepatology' group by data_date,territory_number ) spend on ter.territory_number=spend.territory_number where ter.franchise='Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') group by ter.franchise,geo_id,geo_code ), time as ( select DISTINCT franchise_name,time_dimension_id as TIME_BUCKET_ID, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_PROG' and time_bucket_name in ('YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'SPKR_PROG_BUDGET_AVG' as METRIC_NAME, ABS(cast(METRIC_VALUE as decimal(10,2))) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(null as string) as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from base inner join time on time.franchise_name = base.franchise inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "CONTRIBUTION_PCT_RTL",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "CONTRIBUTION_PCT_RTL_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as( select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , territory_number as geo_id , 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1' ,'HCV3') and region in ('HA' ,'HB' ,'HC') union all select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , district as geo_id , 'district' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA' ,'HB' ,'HC') union all select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , region as geo_id , 'region' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA' ,'HB' ,'HC')) , CUS as ( select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , territory_number as geo_id , 'territory' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1' ,'HCV3') and region in ('HA' ,'HB' ,'HC') union all select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , district as geo_id , 'district' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1') and region in ('HA' ,'HB' ,'HC') union all select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , region as geo_id , 'region' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1') and region in ('HA' ,'HB' ,'HC') ) , time as ( select franchise_name , time_bucket_name , time_dimension_id as time_bucket_id , start_date , end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group='RX' ) , mdm as ( select distinct product_family_name , child_product_id from abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl where franchise_name='Hepatology' ) , mkt as ( select distinct product_group , product_name from abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL where trim(lower(product_group_type)) = 'product' ) , run_log as ( select franchise , max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) , BASE AS ( SELECT DISTINCT CUST.SALES_FORCE_CODE , CUST.GEO_ID , CUST.GEO_CODE , BRAND , RX.ABBOTT_CUSTOMER_ID as ID , RX.ZIP_CODE , RX.CHANNEL_NAME , RX.Abbott_product_id , metric_value ,'RT' AS CUR_VOL , RX.time_dimension , time.time_bucket_id , rx.franchise_name as franchise , run.run_id FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN CUST ON CUST.ZIP_CODE =RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join mdm on rx.abbott_product_id=mdm.child_product_id inner join mkt on mkt.product_name=mdm.product_family_name inner join time on rx.franchise_name=time.franchise_name and rx.week_end_date between time.start_date and time.end_date inner join run_log run on rx.franchise_name = run.franchise WHERE RX.UNIVERSE_NAME ='1VIEW' AND RX.METRIC_name ='NBRX' and trim(lower(mkt.product_group)) = 'hcv market' and time.time_bucket_name in ('C4W' ,'C8W' ,'C13W') union all SELECT CUS.SALES_FORCE_CODE , CUS.GEO_ID , CUS.GEO_CODE , BRAND , RX.ABBOTT_CUSTOMER_ID as ID , RX.ZIP_CODE ,'-1' as CHANNEL_NAME , RX.Abbott_product_id , metric_value ,'NRT' AS CUR_VOL , RX.time_dimension , time.time_bucket_id , rx.franchise_name as franchise , run.run_id FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX JOIN CUS ON CUS.ZIP_CODE =RX.ZIP_CODE AND CUS.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUS.TERRITORY_NUMBER =RX.GEO_ID inner join time on rx.franchise_name=time.franchise_name and rx.week_end_date between time.start_date and time.end_date inner join mdm on rx.abbott_product_id = mdm.child_product_id inner join mkt on mkt.product_name = mdm.product_family_name INNER join run_log run on rx.franchise_name = run.franchise WHERE RX.UNIVERSE_NAME ='1VIEW' AND RX.METRIC_name ='NBRX' and trim(lower(mkt.product_group)) = 'hcv market' and time.time_bucket_name in ('C4W' ,'C8W' ,'C13W') ) select franchise , geo_id , geo_code , case when sum(metric_value)=0 then 0 else cast((sum ( case when CUR_VOL='RT' then metric_value end ) \/sum(metric_value))*100 as decimal(10,2)) end as metric_value , -1 as product_id , brand as product_name , -1 as physician_id , 'CONTRIBUTION_PCT_RTL' as metric_name , time_bucket_id , to_date(current_timestamp()) as data_refresh_date , run_id , -1 as market_id , cast(NULL as string) as segment_name , cast(NULL as STRING) as access_type , -1 as plan_id , cast(NULL as string) as metric_type_group , cast(NULL as string) as metric_type_subgroup from BASE where BRAND='MAVYRET' group by 1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "nbrx_vol_rtl",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_rtl_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as( select DISTINCT SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') union all select DISTINCT SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') union all select DISTINCT SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code,territory_number,region,district, region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC')), time as ( select franchise_name,time_bucket_name,time_dimension_id as time_bucket_id,start_date,end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group='RX' ), mdm as ( select distinct product_family_name, child_product_id from abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl where franchise_name='Hepatology' ), mkt as ( select distinct product_group, product_name from abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL where trim(lower(product_group_type)) = 'product' ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), BASE AS ( SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND, RX.ABBOTT_CUSTOMER_ID as ID,RX.ZIP_CODE,RX.CHANNEL_NAME, RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension,time.time_bucket_id, rx.franchise_name as franchise, run.run_id FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join mdm on rx.abbott_product_id=mdm.child_product_id inner join mkt on mkt.product_name=mdm.product_family_name inner join time on rx.franchise_name=time.franchise_name and rx.week_end_date between time.start_date and time.end_date inner join run_log run on rx.franchise_name = run.franchise WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_name='NBRX' and trim(lower(mkt.product_group)) = 'hcv market' and time.time_bucket_name in ('C4W','C8W','C13W') ) select franchise, geo_id, geo_code, cast(sum(CUR_VOL) as decimal(10,2)) as metric_value, -1 as product_id, brand as product_name, -1 as physician_id, 'NBRX_VOL_RTL' as metric_name, time_bucket_id, to_date(current_timestamp()) as data_refresh_date, run_id, -1 as market_id, cast(NULL as string) as segment_name, cast(NULL as STRING) as access_type, -1 as plan_id, cast(NULL as string) as metric_type_group, cast(NULL as string) as metric_type_subgroup from BASE where BRAND='MAVYRET' group by 1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "contribution_pct_nr_proc",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "contribution_pct_nr_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as ( select distinct rep.territory_number as territory_number , rep.territory_number as geo_id , 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE ='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1' ,'HCV3') union all select distinct rep.territory_number , rep.district as geo_id , 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE ='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1') union all select distinct rep.territory_number , rep.region as geo_id , 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE ='Hepatology' AND REP.TERRITORY_TYPE_ID='REP' and rep.sales_force in ('HCV1') ) , tim as ( select distinct time_dimension_id , time_bucket_name , start_date , end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group='RX' and time_bucket_name in ('C4W' ,'C8W' ,'C13W') ) , acct AS ( SELECT distinct abbott_account_id , account_name , franchise , sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_account_geo_universe_tbl WHERE franchise='Hepatology' ) , run_log AS ( SELECT franchise , max(id) AS run_id FROM abv_hcp360_sales_marketing_dm.run_log WHERE upper(franchise) = 'HEPATOLOGY' GROUP BY franchise ) , phy AS ( SELECT distinct abbott_customer_id , franchise_name , sales_force_code FROM abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl WHERE franchise_name='Hepatology' ) , mdm AS ( SELECT distinct product_family_name , child_product_id FROM abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl WHERE franchise_name='Hepatology' ) , mkt AS ( SELECT distinct product_group , product_name FROM abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL WHERE trim(lower(product_group_type)) = 'product' ) , fact1 as ( SELECT geo_dim.geo_id , rx.franchise_name as franchise , geo_dim.geo_code , metric_value , time_dimension , tim.time_bucket_name , run_log.run_id , rx.sales_force_code , RX.brand , tim.time_dimension_id FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN geo_dim ON RX.geo_id=geo_dim.territory_number INNER JOIN phy ON RX.sales_force_code =phy.sales_force_code AND RX.franchise_name =phy.franchise_name AND RX.abbott_customer_id=phy.abbott_customer_id inner Join tim on to_date(rx.week_end_date) >=tim.start_date and to_date(rx.week_end_date)<=tim.end_date INNER JOIN mdm ON rx.abbott_product_id=mdm.child_product_id INNER JOIN mkt ON mkt.product_name=mdm.product_family_name INNER JOIN run_log ON rx.franchise_name = run_log.franchise WHERE ( trim(data_group) ='rtl_rx' and trim(metric_name)='NBRX' ) AND Rx.franchise_name ='Hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' ) , fact2 as ( SELECT distinct geo_dim.geo_id , geo_dim.geo_code , account_name , metric_value , time_dimension , tim.time_bucket_name , rx.sales_force_code , RX.brand , rx.franchise_name as franchise , run_log.run_id , tim.start_date , tim.end_date , tim.time_dimension_id FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN geo_dim ON RX.geo_id=geo_dim.territory_number INNER JOIN acct ON RX.sales_force_code =acct.sales_force_code AND RX.franchise_name =acct.franchise AND RX.abbott_customer_id=acct.abbott_account_id inner Join tim on to_date(rx.week_end_date) >=tim.start_date and to_date(rx.week_end_date)<=tim.end_date INNER JOIN mdm ON rx.abbott_product_id=mdm.child_product_id INNER JOIN mkt ON mkt.product_name=mdm.product_family_name INNER JOIN run_log ON rx.franchise_name = run_log.franchise WHERE ( data_group ='nrtl_rx' and metric_name='NBRX' ) AND franchise_name ='Hepatology' AND trim(lower(mkt.product_group)) = 'hcv market' ) , RT_CONT_4W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value) as NBRX_RT_VOL from fact1 where brand='MAVYRET' and time_bucket_name in ('C4W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) , NR_CONT_4W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value)as NBRX_NRT_VOL from fact2 where brand='MAVYRET' and time_bucket_name in ('C4W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) , RT_CONT_8W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value) as NBRX_RT_VOL from fact1 where brand='MAVYRET' and time_bucket_name in ('C8W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) , NR_CONT_8W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value)as NBRX_NRT_VOL from fact2 where brand='MAVYRET' and time_bucket_name in ('C8W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) , RT_CONT_13W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value) as NBRX_RT_VOL from fact1 where brand='MAVYRET' and time_bucket_name in ('C13W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) , NR_CONT_13W as ( select geo_id , geo_code , franchise , time_dimension_id , run_id , Sum(Metric_value)as NBRX_NRT_VOL from fact2 where brand='MAVYRET' and time_bucket_name in ('C13W') GROUP BY geo_id , geo_code , franchise , time_dimension_id , run_id ) select nrt_vol.geo_id , nrt_vol.geo_code , rt_vol.time_dimension_id as time_bucket_id , 'CONTRIBUTION_PCT_NR' as metric_name , -1 as product_id , 'MAVYRET' as product_name , nrt_vol.franchise , '-1' as physician_id , to_date( current_timestamp() ) as data_refresh_date , nrt_vol.run_id , -1 as market_id , cast(null as string) as segment_name , cast(null as string) as access_type, -1 as plan_id , cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup , cast((cast(sum(nbrx_nrt_vol) as decimal(10,2)))\/((cast(sum(nbrx_nrt_vol) as decimal(10,2)))+(cast(sum(nbrx_rt_vol) as decimal(10,2))))*100 as decimal(10,2)) as metric_value from rt_cont_4w rt_vol , nr_cont_4w nrt_vol where rt_vol.geo_id=nrt_vol.geo_id group by 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 union all select nrt_vol.geo_id , nrt_vol.geo_code , rt_vol.time_dimension_id as time_bucket_id , 'CONTRIBUTION_PCT_NR' as metric_name , -1 as product_id , 'MAVYRET' as product_name , nrt_vol.franchise , '-1' as physician_id , to_date( current_timestamp() ) as data_refresh_date , nrt_vol.run_id , -1 as market_id , cast(null as string) as segment_name , cast(null as string) as access_type, -1 as plan_id , cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup , cast((cast(sum(nbrx_nrt_vol) as decimal(10,2)))\/((cast(sum(nbrx_nrt_vol) as decimal(10,2)))+(cast(sum(nbrx_rt_vol) as decimal(10,2))))*100 as decimal(10,2)) as metric_value from rt_cont_8w rt_vol , nr_cont_8w nrt_vol where rt_vol.geo_id=nrt_vol.geo_id group by 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 union all select nrt_vol.geo_id , nrt_vol.geo_code , rt_vol.time_dimension_id as time_bucket_id , 'CONTRIBUTION_PCT_NR' as metric_name , -1 as product_id , 'MAVYRET' as product_name , nrt_vol.franchise , '-1' as physician_id , to_date( current_timestamp() ) as data_refresh_date , nrt_vol.run_id , -1 as market_id , cast(null as string) as segment_name , cast(null as string) as access_type, -1 as plan_id , cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup , cast((cast(sum(nbrx_nrt_vol) as decimal(10,2)))\/((cast(sum(nbrx_nrt_vol) as decimal(10,2)))+(cast(sum(nbrx_rt_vol) as decimal(10,2))))*100 as decimal(10,2)) as metric_value from rt_cont_13w rt_vol , nr_cont_13w nrt_vol where rt_vol.geo_id=nrt_vol.geo_id group by 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "CONTRIBUTION_PCT",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "CONTRIBUTION_PCT_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as( select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , territory_number as geo_id , 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1' , 'HCV3') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , district as geo_id , 'district' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , region as geo_id , 'region' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise_name , abbott_customer_id , zip_code , territory_number , region , district , cast(-1 as string) as geo_id , 'nation' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC')) , CUS as ( select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , territory_number as geo_id , 'territory' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1' , 'HCV3') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , district as geo_id , 'district' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , region as geo_id , 'region' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC') union all select DISTINCT SALES_FORCE_CODE , franchise as franchise_name , ABBOTT_ACCOUNT_ID as abbott_customer_id , zip_code , territory_number , region , district , cast(-1 as string) as geo_id , 'nation' as geo_code from abv_hcp360_sales_marketing_dm.DIM_ACCOUNT_GEO_UNIVERSE_tbl where sales_force_code in ('HCV1') and region in ('HA' , 'HB' , 'HC') ) , time as ( select franchise_name , time_bucket_name , time_dimension_id as time_bucket_id , start_date , end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX' ) , mdm as ( select distinct product_family_name , child_product_id from abv_hcp360_sales_marketing_dm.dim_mdm_product_hier_wide_tbl where franchise_name = 'Hepatology' ) , mkt as ( select distinct product_group , product_name from abv_hcp360_sales_marketing_dm.DIM_MARKET_TBL where trim(lower(product_group_type)) = 'product' ) , run_log as ( select franchise , max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) , BASE AS ( SELECT DISTINCT CUST.SALES_FORCE_CODE , CUST.GEO_ID , CUST.GEO_CODE , BRAND , RX.ABBOTT_CUSTOMER_ID as ID , RX.ZIP_CODE , RX.CHANNEL_NAME , RX.Abbott_product_id , metric_value , 'RT' AS CUR_VOL , RX.time_dimension , time.time_bucket_id , rx.franchise_name as franchise FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX INNER JOIN CUST ON CUST.ZIP_CODE = RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID = RX.ABBOTT_CUSTOMER_ID inner join mdm on rx.abbott_product_id = mdm.child_product_id inner join mkt on mkt.product_name = mdm.product_family_name inner join time on rx.franchise_name = time.franchise_name and rx.week_end_date between time.start_date and time.end_date WHERE RX.UNIVERSE_NAME = '1VIEW' AND RX.METRIC_name = 'NBRX' and trim(lower(mkt.product_group)) = 'hcv market' and time.time_bucket_name in ('C4W' , 'C8W' , 'C13W') union all SELECT CUS.SALES_FORCE_CODE , CUS.GEO_ID , CUS.GEO_CODE , BRAND , RX.ABBOTT_CUSTOMER_ID as ID , RX.ZIP_CODE , '-1' as CHANNEL_NAME , RX.Abbott_product_id , metric_value , 'NRT' AS CUR_VOL , RX.time_dimension , time.time_bucket_id , rx.franchise_name as franchise FROM abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX JOIN CUS ON CUS.ZIP_CODE = RX.ZIP_CODE AND CUS.ABBOTT_CUSTOMER_ID = RX.ABBOTT_CUSTOMER_ID AND CUS.TERRITORY_NUMBER = RX.GEO_ID inner join time on rx.franchise_name = time.franchise_name and rx.week_end_date between time.start_date and time.end_date inner join mdm on rx.abbott_product_id = mdm.child_product_id inner join mkt on mkt.product_name = mdm.product_family_name WHERE RX.UNIVERSE_NAME = '1VIEW' AND RX.METRIC_name = 'NBRX' and trim(lower(mkt.product_group)) = 'hcv market' and time.time_bucket_name in ('C4W' , 'C8W' , 'C13W') ) , nation as ( select franchise , sum(metric_value) as nation_value , 'MAVYRET' as product_name , time_bucket_id from BASE where BRAND = 'MAVYRET' and geo_code = 'nation' group by 1 , 3 , 4 union all select franchise , sum(metric_value) as nation_value , 'DAA MARKET' as product_name , time_bucket_id from BASE where geo_code = 'nation' group by 1 , 3 , 4 ) , calc as ( select BASE.franchise , BASE.geo_id , BASE.geo_code , sum(BASE.metric_value) as metric_value , 'MAVYRET' as product_name , BASE.time_bucket_id from BASE where BRAND = 'MAVYRET' and geo_code not in ('nation' , 'region') group by BASE.franchise , BASE.geo_id , BASE.geo_code , BASE.time_bucket_id UNION ALL select BASE.franchise , BASE.geo_id , BASE.geo_code , sum(BASE.metric_value) as metric_value , 'DAA MARKET' as product_name , BASE.time_bucket_id from BASE where geo_code not in ('nation' , 'region') group by BASE.franchise , BASE.geo_id , BASE.geo_code , BASE.time_bucket_id ) select calc.franchise as franchise , calc.geo_id as geo_id , calc.geo_code as geo_code , cast ( case when nation_value = 0 then 0 else (calc.metric_value \/ nation.nation_value) * 100 end as decimal(10, 2) ) as metric_value , calc.product_name as product_name , calc.time_bucket_id as time_bucket_id , run.run_id as run_id , cast(-1 as int) as product_id , -1 as physician_id , 'CONTRIBUTION_PCT' as metric_name , to_date(current_timestamp()) as data_refresh_date , -1 as market_id , cast(NULL as string) as segment_name , cast(NULL as STRING) as access_type , -1 as plan_id , cast(NULL as string) as metric_type_group , cast(NULL as string) as metric_type_subgroup from calc inner join nation on calc.franchise = nation.franchise and calc.time_bucket_id = nation.time_bucket_id and calc.product_name = nation.product_name INNER join run_log run on calc.franchise = run.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_venue_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_EVENT' and time_bucket_name in ('C4W','C13W','QTD','YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), program_data_terr as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,SATELLITE_EVENT_ID,PGM.event_date from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') where PGM.franchise='Hepatology' and pgm.district=ter.district ), program_data_dis as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,PGM.event_date,SATELLITE_EVENT_ID from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP','DM') where PGM.franchise='Hepatology' and pgm.district=ter.district ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME,-1 as PHYSICIAN_ID,TIME_BUCKET_ID,'SPKR_PROG_COUNT_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, to_date(current_timestamp()) as DATA_REFRESH_DATE,RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.venue_type as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from ( select TER.franchise as franchise,TER.DISTRICT as geo_id,'district' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.venue_type,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select DISTRICT,venue_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY DISTRICT,venue_type,time.time_bucket_id ) PGM ON TER.DISTRICT=PGM.DISTRICT GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.venue_type,PGM.event_count,pgm.Time_bucket_id union ALL select TER.franchise as franchise,TER.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.venue_type,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select REGION,venue_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY REGION,venue_type,time.time_bucket_id ) PGM ON TER.REGION=PGM.REGION GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.venue_type,PGM.event_count,pgm.Time_bucket_id union all select TER.FRANCHISE AS franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.venue_type,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2))as metric_value from program_data_terr TER JOIN ( select FRANCHISE,venue_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,venue_type,time.time_bucket_id ) PGM ON TER.FRANCHISE=PGM.FRANCHISE GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.venue_type,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,dis.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.venue_type,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count \/count(distinct dis.DISTRICT) AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select REGION,venue_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY REGION,venue_type,time.time_bucket_id ) PGM ON dis.REGION=PGM.REGION GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.venue_type,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name, PGM.venue_type,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count\/count(distinct dis.DISTRICT)AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select FRANCHISE,venue_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,venue_type,time.time_bucket_id ) PGM ON dis.FRANCHISE=PGM.FRANCHISE GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.venue_type,PGM.event_count,pgm.Time_bucket_id ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_deck_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_EVENT' and time_bucket_name in ('C4W','C13W','QTD','YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), program_data_terr as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,SATELLITE_EVENT_ID,PGM.event_date from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') where PGM.franchise='Hepatology' and pgm.district=ter.district ), program_data_dis as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,PGM.event_date,SATELLITE_EVENT_ID from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP','DM') where PGM.franchise='Hepatology' and pgm.district=ter.district ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME,-1 as PHYSICIAN_ID,TIME_BUCKET_ID,'SPKR_PROG_COUNT_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, to_date(current_timestamp()) as DATA_REFRESH_DATE,RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, base.deck_type as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from ( select TER.franchise as franchise,TER.DISTRICT as geo_id,'district' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.DECK_TYPE,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select DISTRICT,deck_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY DISTRICT,deck_type,time.time_bucket_id ) PGM ON TER.DISTRICT=PGM.DISTRICT GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.DECK_TYPE,PGM.event_count,pgm.Time_bucket_id union ALL select TER.franchise as franchise,TER.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.DECK_TYPE,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select REGION,deck_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY REGION,deck_type,time.time_bucket_id ) PGM ON TER.REGION=PGM.REGION GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.DECK_TYPE,PGM.event_count,pgm.Time_bucket_id union all select TER.FRANCHISE AS franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,PGM.DECK_TYPE,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2))as metric_value from program_data_terr TER JOIN ( select FRANCHISE,deck_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,deck_type,time.time_bucket_id ) PGM ON TER.FRANCHISE=PGM.FRANCHISE GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.DECK_TYPE,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,dis.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.DECK_TYPE,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count \/count(distinct dis.DISTRICT) AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select REGION,deck_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY REGION,deck_type,time.time_bucket_id ) PGM ON dis.REGION=PGM.REGION GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.DECK_TYPE,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name, PGM.DECK_TYPE,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count\/count(distinct dis.DISTRICT)AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select FRANCHISE,deck_type,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,deck_type,time.time_bucket_id ) PGM ON dis.FRANCHISE=PGM.FRANCHISE GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.DECK_TYPE,PGM.event_count,pgm.Time_bucket_id ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_completed_custom",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_PIF' and time_bucket_name in ('CQTR')) ,run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) ,program_data_terr as ( select ter.Territory_Number,ter.district, ter.region,ter.franchise,completed_pgm.pgm_cnt ,completed_pgm.time_bucket_id,completed_pgm.event_date from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) ter inner join ( select * from ( select Territory_Number,event_date, SATELLITE_EVENT_ID as pgm_cnt from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl A where franchise='Hepatology') sepp inner join time on to_date(sepp.event_date) >= to_date(time.start_date) and to_date(sepp.event_date) <= to_date(time.end_date) )completed_pgm on ter.territory_number=completed_pgm.territory_number ) ,program_data_dis as ( select ter.Territory_Number,ter.district, ter.region,ter.franchise,completed_pgm.pgm_cnt ,completed_pgm.event_date from ( select distinct sales_force,territory_number,district,region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id in ('REP','DM')) ter left join ( select Territory_Number,event_date, SATELLITE_EVENT_ID as pgm_cnt from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl A where franchise='Hepatology' )completed_pgm on ter.territory_number=completed_pgm.territory_number ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID,TIME_BUCKET_ID, 'SPKR_PROG_COUNT_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, 'Completed' as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from ( select Franchise as franchise,pgm.DISTRICT as geo_id,'district' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,Time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select district,franchise,count(DISTINCT(pgm_cnt)) AS NUM1,time_bucket_id from program_data_terr group by district,time_bucket_id,franchise) pgm inner JOIN (select DISTRICT ,count(distinct territory_number) as DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by district )rep ON pgm.DISTRICT=rep.DISTRICT GROUP BY franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union all select Franchise,pgm.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,Time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select region,franchise,count(distinct(pgm_cnt)) as NUM1,time_bucket_id from program_data_terr group by region,time_bucket_id,franchise)pgm inner JOIN (select REGION ,COUNT(DISTINCT territory_number) AS DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by region )rep ON pgm.REGION=rep.REGION GROUP BY franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union all select pgm.FRANCHISE,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select franchise,time_bucket_id,count(distinct(pgm_cnt)) as NUM1 from program_data_terr group by time_bucket_id,franchise)PGM INNER JOIN (select FRANCHISE ,COUNT(distinct territory_number) AS DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by franchise )rep ON PGM.FRANCHISE=REP.FRANCHISE GROUP BY pgm.franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union all select TER.FRANCHISE as franchise,TER.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.Time_bucket_id as time_bucket_id,PGM.final_pgm_cnt as NUM1, count(distinct ter.district) AS DENOM1, CAST(PGM.final_pgm_cnt\/count(distinct ter.DISTRICT) AS DECIMAL(10,2)) as METRIC_VALUE from program_data_dis TER JOIN ( select REGION ,COUNT(DISTINCT(pgm_cnt)) AS final_pgm_cnt,time.time_bucket_id from program_data_dis A inner join time on to_date(A.event_date) >= to_date(time.start_date) and to_date(A.event_date) <= to_date(time.end_date) GROUP BY REGION,time.time_bucket_id ) PGM ON TER.REGION=PGM.REGION GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.final_pgm_cnt,pgm.Time_bucket_id union all select TER.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.Time_bucket_id as time_bucket_id, PGM.final_pgm_cnt as NUM1,count(distinct ter.district) AS DENOM1, CAST(PGM.final_pgm_cnt\/count(distinct ter.DISTRICT) AS DECIMAL(10,2)) as METRIC_VALUE from program_data_dis TER JOIN ( select FRANCHISE ,COUNT(DISTINCT(pgm_cnt)) AS final_pgm_cnt,time.time_bucket_id from program_data_dis A inner join time on to_date(A.event_date) >= to_date(time.start_date) and to_date(A.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,time.time_bucket_id ) PGM ON TER.FRANCHISE=PGM.FRANCHISE GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.final_pgm_cnt,PGM.Time_bucket_id ) base inner join run_log on run_log.franchise=base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_pif_custom",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_PIF' and time_bucket_name in ('CQTR','NQTR')) ,run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) ,program_data_terr as ( select ter.Territory_Number,ter.district, ter.region,ter.franchise,pif_qtr.pif_cnt ,pif_qtr.time_bucket_id,pif_qtr.data_date from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) ter inner join ( select * from ( select Territory_Number,data_date, program_identifier as pif_cnt from abv_hcp360_sales_marketing_dm.speaker_event_pif_prgm_tbl A where franchise='Hepatology') sepp inner join time on to_date(sepp.data_date) >= to_date(time.start_date) and to_date(sepp.data_date) <= to_date(time.end_date) )pif_qtr on ter.territory_number=pif_qtr.territory_number ) , program_data_dis as ( select ter.Territory_Number,ter.district, ter.region,ter.franchise, pif_qtr.pif_cnt,pif_qtr.data_date from ( select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id in ('REP','DM') ) ter left join ( select Territory_Number,data_date, program_identifier as pif_cnt from abv_hcp360_sales_marketing_dm.speaker_event_pif_prgm_tbl A where A.franchise='Hepatology' )pif_qtr on ter.territory_number=pif_qtr.territory_number ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID,TIME_BUCKET_ID,'SPKR_PROG_COUNT_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, to_date(current_timestamp()) as DATA_REFRESH_DATE,RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, \"PIF'd\" as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from ( select Franchise,pgm.DISTRICT as geo_id,'district' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,Time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select district,franchise,count(DISTINCT(pif_cnt)) AS NUM1,time_bucket_id from program_data_terr group by district,time_bucket_id,franchise) pgm inner JOIN (select DISTRICT ,count(distinct territory_number) as DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by district )rep ON pgm.DISTRICT=rep.DISTRICT GROUP BY franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union ALL select Franchise,pgm.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,Time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select region,franchise,count(distinct(pif_cnt)) as NUM1,time_bucket_id from program_data_terr group by region,time_bucket_id,franchise)pgm inner JOIN (select REGION ,COUNT(DISTINCT territory_number) AS DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by region )rep ON pgm.REGION=rep.REGION GROUP BY franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union all select pgm.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,time_bucket_id,NUM1,DENOM1, CAST(NUM1\/DENOM1 AS DECIMAL(10,2)) as METRIC_VALUE from (select franchise,time_bucket_id,count(distinct(pif_cnt)) as NUM1 from program_data_terr group by time_bucket_id,franchise)PGM INNER JOIN (select FRANCHISE ,COUNT(distinct territory_number) AS DENOM1 from (select distinct sales_force,territory_number,district, region,franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise='Hepatology' and territory_type_id='REP' and sales_force IN ('HCV1','HCV3')) de_calc group by franchise )rep ON PGM.FRANCHISE=REP.FRANCHISE GROUP BY pgm.franchise,geo_id,geo_code,metric_name,segment_name,NUM1,DENOM1,Time_bucket_id union all select TER.FRANCHISE as franchise,TER.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.Time_bucket_id as time_bucket_id, PGM.final_pif_cnt as NUM1,count(distinct ter.DISTRICT) AS DENOM1, CAST(PGM.final_pif_cnt \/count(distinct ter.DISTRICT) AS DECIMAL(10,2))as METRIC_VALUE from program_data_dis TER JOIN ( select REGION ,COUNT(DISTINCT(pif_cnt)) AS final_pif_cnt,time.time_bucket_id from program_data_dis A inner join time on to_date(A.data_date) >= to_date(time.start_date) and to_date(A.data_date) <= to_date(time.end_date) GROUP BY REGION,time.time_bucket_id ) PGM ON TER.REGION=PGM.REGION GROUP BY TER.franchise,geo_id,geo_code,metric_name,segment_name,NUM1,Time_bucket_id union ALL select TER.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,PGM.Time_bucket_id as time_bucket_id,PGM.final_pif_cnt as NUM1,count(distinct ter.DISTRICT) AS DENOM1, CAST(PGM.final_pif_cnt\/count(distinct ter.DISTRICT) AS DECIMAL(10,2)) as METRIC_VALUE from program_data_dis TER JOIN ( select franchise ,COUNT(DISTINCT(pif_cnt)) AS final_pif_cnt,time.time_bucket_id from program_data_dis A inner join time on to_date(A.data_date) >= to_date(time.start_date) and to_date(A.data_date) <= to_date(time.end_date) GROUP BY franchise,time.time_bucket_id ) PGM ON TER.franchise=PGM.franchise GROUP BY TER.franchise,geo_id,geo_code,metric_name,segment_name,NUM1,Time_bucket_id ) base inner join run_log on run_log.franchise=base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_total_custom",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='SPKR_EVENT' and time_bucket_name in ('C4W','C13W','QTD','YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), program_data_terr as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,SATELLITE_EVENT_ID,PGM.event_date from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP') and ter.sales_force IN ('HCV1','HCV3') where PGM.franchise='Hepatology' and pgm.district=ter.district ), program_data_dis as ( select PGM.territory_number,PGM.district,PGM.region,PGM.franchise as franchise,deck_type,venue_type,PGM.event_date,SATELLITE_EVENT_ID from abv_hcp360_sales_marketing_dm.speaker_event_program_fact_tbl PGM left JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter ON TER.territory_number=PGM.territory_number AND TER.territory_type_id in ('REP','DM') where PGM.franchise='Hepatology' and pgm.district=ter.district ) select base.FRANCHISE, GEO_ID, GEO_CODE,-1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME,-1 as PHYSICIAN_ID,TIME_BUCKET_ID,'SPKR_PROG_COUNT_AVG' as METRIC_NAME, cast(METRIC_VALUE as decimal(10,2)) as METRIC_VALUE, to_date(current_timestamp()) as DATA_REFRESH_DATE,RUN_ID, -1 as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(null as string) as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from ( select TER.franchise as franchise,TER.DISTRICT as geo_id,'district' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select DISTRICT,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY DISTRICT,time.time_bucket_id ) PGM ON TER.DISTRICT=PGM.DISTRICT GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.event_count,pgm.Time_bucket_id union ALL select TER.franchise as franchise,TER.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2)) as metric_value from program_data_terr TER JOIN ( select REGION,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY REGION,time.time_bucket_id ) PGM ON TER.REGION=PGM.REGION GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.event_count,pgm.Time_bucket_id union all select TER.FRANCHISE AS franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'TERRITORY' as segment_name,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct ter.territory_number) AS DENOM, CAST(PGM.event_count\/count(distinct ter.territory_number) AS DECIMAL(10,2))as metric_value from program_data_terr TER JOIN ( select FRANCHISE,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_terr ter inner join time on to_date(ter.event_date) >= to_date(time.start_date) and to_date(ter.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,time.time_bucket_id ) PGM ON TER.FRANCHISE=PGM.FRANCHISE GROUP BY ter.franchise,geo_id,geo_code,metric_name,segment_name,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,dis.REGION as geo_id,'region' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count \/count(distinct dis.DISTRICT) AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select REGION,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY REGION,time.time_bucket_id ) PGM ON dis.REGION=PGM.REGION GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.event_count,pgm.Time_bucket_id union all select dis.FRANCHISE as franchise,cast(-1 as string) as geo_id,'nation' as geo_code,'SPKR_PROG_COUNT_AVG' as metric_name, 'DISTRICT' as segment_name,pgm.Time_bucket_id as time_bucket_id, PGM.event_count AS NUM, count(distinct dis.DISTRICT) AS DENOM, CAST( PGM.event_count\/count(distinct dis.DISTRICT)AS DECIMAL(10,2)) as metric_value from program_data_dis dis JOIN ( select FRANCHISE,count(SATELLITE_EVENT_ID) as event_count,time.time_bucket_id from program_data_dis dis inner join time on to_date(dis.event_date) >= to_date(time.start_date) and to_date(dis.event_date) <= to_date(time.end_date) GROUP BY FRANCHISE,time.time_bucket_id ) PGM ON dis.FRANCHISE=PGM.FRANCHISE GROUP BY dis.franchise,geo_id,geo_code,metric_name,segment_name,PGM.event_count,pgm.Time_bucket_id ) base inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "P3",
	"procedure_name": "spkr_prog_count_avg",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_avg_union",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "spkr_prog_count_avg-spkr_prog_count_avg_venue_custom|spkr_prog_count_avg-spkr_prog_count_avg_deck_custom|spkr_prog_count_avg-spkr_prog_count_avg_completed_custom|spkr_prog_count_avg-spkr_prog_count_avg_pif_custom|spkr_prog_count_avg-spkr_prog_count_avg_total_custom",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "sell_days",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "sell_days_all_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SELLING_DAYS",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD')",
		"dim_time_kpi_param": "upper(kpi_group) in ('SELLING_DAYS')",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"select_cols_param": "data_date|franchise|geo_id|geo_code|time_dimension_id|time_bucket_name",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('SELLING_DAYS' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|time_bucket_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "sell_days",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "sell_days_union_select_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SELLING_DAYS' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)) as metric_value, product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, cast(null as string) as access_type,cast(-1 as int) as plan_id from sell_days__sell_days_all_geo where upper(time_bucket_name) in ('MTD','QTD','YTD')"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "selling_days",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_all_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SELLING_DAYS_FOR_AVG_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('SELLING_DAYS')",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"select_cols_param": "data_date|franchise|geo_id|geo_code|time_dimension_id|time_bucket_name|territory_number",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('SELLING_DAYS' as STRING)",
		"concat_column_param": "concat(territory_number, data_date)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|time_bucket_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "selling_days",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_union_select_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SELLING_DAYS' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)) as metric_value, product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, cast(null as string) as access_type,cast(-1 as int) as plan_id from selling_days__selling_days_all_geo where upper(time_bucket_name) in ('MTD','QTD','YTD')"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "selling_days_goal",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_goal_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with dim_geo as ( select territory_number, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where upper(territory_type_id)='REP' and upper(franchise) = 'HEPATOLOGY' union all select territory_number, district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where upper(territory_type_id) in ('REP') and upper(franchise) = 'HEPATOLOGY' union all select territory_number, region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where upper(territory_type_id) in ('REP') and upper(franchise) = 'HEPATOLOGY' union all select territory_number, '-1' as geo_id, 'nation' as geo_code from abv_hcp360_sales_marketing_dm.RPT_REP_HIERARCHY_TBL where upper(territory_type_id) in ('REP') and upper(franchise) = 'HEPATOLOGY' ), base as ( SELECT SD.franchise,TERRITORY_NUMBER,196*TOTAL_FACTOR AS metric_value, tp.time_dimension_id from (select * from abv_hcp360_sales_marketing_dm.SELLING_DAYS_FACT_TBL where upper(franchise) = 'HEPATOLOGY') SD inner join ( SELECT franchise, sum(gaiting_factor) as TOTAL_FACTOR, a.time_dimension_id from ( SELECT distinct sdg.franchise, sdg.gaiting_factor,new_calendar_week_number, dt.time_dimension_id FROM ( SELECT CASE WHEN WEEK_DAY_NUMBER>1 THEN calendar_week_number else calendar_week_number-1 END AS new_calendar_week_number,calendar_week_number,day_date, MONTH_START_DATE FROM abv_hcp360_sales_marketing_dm.TIME_PERIOD_TBL) NEW_TP inner join abv_hcp360_sales_marketing_dm.SELLING_DAYS_GAITED_FACTOR_TBL sdg on upper(trim(sdg.franchise)) ='HEPATOLOGY' and NEW_TP.new_calendar_week_number = sdg.week_code inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group) = ('SELLING_DAYS') and upper(time_bucket_name) in ('MTD', 'QTD', 'YTD'))dt on cast(NEW_TP.DAY_DATE as date) >= cast(dt.start_date as date) and cast(NEW_TP.DAY_DATE as date)<= cast(dt.end_date as date) ) a group by franchise, time_dimension_id) tp on SD.FRANCHISE=TP.FRANCHISE GROUP BY sd.franchise,territory_number, metric_value, time_dimension_id ) select franchise, dim_geo.geo_id as geo_id, dim_geo.geo_code as geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast(base.metric_value as decimal(32,2)) as metric_value, cast('SELLING_DAYS_GOAL' as string) as metric_name, base.time_dimension_id as time_bucket_id, current_date() as data_refresh_date, run_dim.id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast(null as string) as metric_type_group, cast(null as string) as metric_type_subgroup from base inner join dim_geo on dim_geo.territory_number = base.territory_number cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by geo_id, franchise, geo_code, product_name,metric_value, metric_name, time_bucket_id, data_refresh_date,run_id, market_id, segment_name, access_type, plan_id, metric_type_group, metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TOT_CALLS_FOR_AVERAGE_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('REP_ACTIVITY')",
		"metric_type_name_param": "TOTAL_CALLS_PER_WEEK",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"prescriber_status_filter_param": "upper(trim(prescriber_status))='Y'",
		"attribution_name_filter_param": "1=1",
		"sub_group_filter_param": "1=1",
		"select_cols_param": "franchise|EXTERNAL_CALL_ACTIVITY_ID|call_activity_date|geo_id|geo_code|time_dimension_id|time_bucket_name",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "cast(NULL as STRING)",
		"metric_type_group_param": "cast('OVERALL' as STRING)",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('AVERAGE_CALLS_PER_DAY' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|time_bucket_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls_seg_call_plan",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "TOT_CALLS_FOR_AVERAGE_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('REP_ACTIVITY')",
		"metric_type_name_param": "TOTAL_CALLS_PER_WEEK",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"prescriber_status_filter_param": "upper(trim(prescriber_status))='Y'",
		"attribution_name_filter_param": "1=1",
		"sub_group_filter_param": "1=1",
		"select_cols_param": "franchise|EXTERNAL_CALL_ACTIVITY_ID|call_activity_date|geo_id|geo_code|time_dimension_id|time_bucket_name|call_plan_flag",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "case when call_plan_flag='Y' THEN 'CALL_PLAN' when call_plan_flag='N' THEN 'NON_CALL_PLAN' end ",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('AVERAGE_CALLS_PER_DAY' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|time_bucket_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls_seg_prescriber_status",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "TOT_CALLS_FOR_AVERAGE_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('REP_ACTIVITY')",
		"metric_type_name_param": "TOTAL_CALLS_PER_WEEK",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"prescriber_status_filter_param": "1=1",
		"attribution_name_filter_param": "1=1",
		"sub_group_filter_param": "1=1",
		"select_cols_param": "franchise|EXTERNAL_CALL_ACTIVITY_ID|call_activity_date|geo_id|geo_code|time_dimension_id|time_bucket_name|prescriber_status",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "case when prescriber_status='Y' THEN 'PRESCRIBER' when prescriber_status='N' THEN 'NON-PRESCRIBER' end as metric_type_group",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('AVERAGE_CALLS_PER_DAY' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|time_bucket_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls_seg_market_decile",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "TOT_CALLS_SEGMENT_FOR_AVERAGE_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('REP_ACTIVITY')",
		"metric_type_name_param": "TOTAL_CALLS_PER_WEEK",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"prescriber_status_filter_param": "upper(trim(prescriber_status))='Y'",
		"attribution_name_filter_param": "upper(attribution_name) in ('MARKET_DECILE')",
		"sub_group_filter_param": "1=1",
		"select_cols_param": "franchise|EXTERNAL_CALL_ACTIVITY_ID|call_activity_date|geo_id|geo_code|time_dimension_id|time_bucket_name|attribution_name|sub_group",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "case when attribution_name is null then 'Market_Decile' else attribution_name end as metric_type_group",
		"metric_type_subgroup_param": "case when sub_group is NULL then 'Non-Writer (D0)' else sub_group end as metric_type_subgroup",
		"new_metric_name_param": "cast('AVERAGE_CALLS_PER_DAY' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|time_bucket_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls_seg_dup_decile",
	"step_order": 5,
	"module_type": "metric",
	"module_name": "TOT_CALLS_SEGMENT_FOR_AVERAGE_CALLS_PER_DAY",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD','QTD','YTD','W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11', 'W12', 'W13')",
		"dim_time_kpi_param": "upper(kpi_group) in ('REP_ACTIVITY')",
		"metric_type_name_param": "TOTAL_CALLS_PER_WEEK",
		"franchise_type_name_param": "upper(franchise) in ('HEPATOLOGY')",
		"prescriber_status_filter_param": "upper(trim(prescriber_status))='Y'",
		"attribution_name_filter_param": "upper(attribution_name) in ('DUP DECILE')",
		"sub_group_filter_param": "1=1",
		"select_cols_param": "franchise|EXTERNAL_CALL_ACTIVITY_ID|call_activity_date|geo_id|geo_code|time_dimension_id|time_bucket_name|attribution_name|sub_group",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "case when attribution_name is null then 'DUP Decile' else attribution_name end as metric_type_group",
		"metric_type_subgroup_param": "case when sub_group is NULL then 'Non-Writer (D0)' else sub_group end as metric_type_subgroup",
		"new_metric_name_param": "cast('AVERAGE_CALLS_PER_DAY' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|time_bucket_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "tot_calls_for_average_calls_per_day_union",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "average_calls_per_day-tot_calls|average_calls_per_day-tot_calls_seg_call_plan|average_calls_per_day-tot_calls_seg_prescriber_status|average_calls_per_day-tot_calls_seg_market_decile|average_calls_per_day-tot_calls_seg_dup_decile",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "average_calls_per_day_final",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select tot.franchise, 'AVERAGE_CALLS_PER_DAY' as metric_name, case when sell.metric_value = 0 then 0 else ( ( tot.metric_value \/ sell.metric_value ) ) end as metric_value, tot.physician_id, tot.product_id, tot.product_name, tot.data_refresh_date, tot.run_id, tot.time_bucket_id, tot.time_bucket_name, tot.geo_id, tot.geo_code, tot.segment_name, tot.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id , tot.metric_type_group, tot.metric_type_subgroup from average_calls_per_day__tot_calls_for_average_calls_per_day_union tot inner join ( select * from selling_days__selling_days_all_geo ) sell on tot.franchise = sell.franchise and tot.product_id = sell.product_id and tot.data_refresh_date = sell.data_refresh_date and tot.run_id = sell.run_id and tot.time_bucket_name = sell.time_bucket_name and coalesce(tot.geo_id, '') = coalesce(sell.geo_id, '') and coalesce(tot.geo_code, '') = coalesce(sell.geo_code, '') and coalesce(tot.segment_name, '') = coalesce(sell.segment_name, '') and coalesce(tot.market_id, '') = coalesce(sell.market_id, '') and coalesce(tot.product_name, '') = coalesce(sell.product_name, '')"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "average_calls_per_day_final_1",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select tot.franchise, 'AVERAGE_CALLS_PER_DAY' as metric_name, case when sell.metric_value = 0 then 0 else cast( ( tot.metric_value \/ sell.metric_value ) as decimal(32, 2) ) end as metric_value, tot.physician_id, tot.product_id, tot.product_name, tot.data_refresh_date, tot.run_id, tot.time_bucket_id, tot.time_bucket_name, tot.geo_id, tot.geo_code, tot.segment_name, tot.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id , tot.metric_type_group, tot.metric_type_subgroup from average_calls_per_day__tot_calls_for_average_calls_per_day_union tot inner join ( select * from selling_days__selling_days_all_geo ) sell on tot.franchise = sell.franchise and tot.product_id = sell.product_id and tot.data_refresh_date = sell.data_refresh_date and tot.run_id = sell.run_id and tot.time_bucket_name = sell.time_bucket_name and coalesce(tot.geo_id, '') = coalesce(sell.geo_id, '') and coalesce(tot.geo_code, '') = coalesce(sell.geo_code, '') and coalesce(tot.segment_name, '') = coalesce(sell.segment_name, '') and coalesce(tot.market_id, '') = coalesce(sell.market_id, '') and coalesce(tot.product_name, '') = coalesce(sell.product_name, '')"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "average_calls_per_day",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "average_calls_per_day_final_select",
	"step_order": 9,
	"module_type": "analytical",
	"module_name": "select_columns",
	"params": {
		"input_table": "average_calls_per_day-average_calls_per_day_final_1",
		"columns_to_select": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup|plan_id"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "terr_dist_region",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "terr_dist_region_mapping",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select distinct territory_number, district, region from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl "
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "terr_dist_region",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dist_region_mapping",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select distinct district, region from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl "
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "terr_dist_region",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "nation_mapping",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select distinct territory_number as geo_id, 'territory' as geo_code, '-1' as nat from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl union all select distinct district as geo_id, 'district' as geo_code, '-1' as nat from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl union all select distinct region as geo_id, 'region' as geo_code, '-1' as nat from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "daily_calls_avg_dstrct_var_pct",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daily_calls_avg_dstrct_var_pct_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select terr.franchise, 'DAILY_CALLS_AVG_DSTRCT_VAR_PCT' as metric_name, case when dist.metric_value = 0 then 0 else cast ( ( ( terr.metric_value - dist.metric_value )* 100 \/ dist.metric_value ) as decimal(32, 2) ) end as metric_value, terr.physician_id, terr.product_id, terr.product_name, terr.data_refresh_date, terr.run_id, terr.time_bucket_id, terr.geo_id, terr.geo_code, terr.segment_name, terr.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id from ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) = 'TERRITORY' and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) terr inner join ( select * from terr_dist_region__terr_dist_region_mapping ) map on terr.geo_id = map.territory_number inner join ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) = 'DISTRICT' and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) dist on map.district = dist.geo_id and terr.time_bucket_name = dist.time_bucket_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "daily_calls_avg_region_var_pct",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daily_calls_avg_region_var_pct_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select dist.franchise, 'DAILY_CALLS_AVG_REGION_VAR_PCT' as metric_name, case when region.metric_value = 0 then 0 else cast ( ( ( dist.metric_value - region.metric_value )* 100 \/ region.metric_value ) as decimal(32, 2) ) end as metric_value, dist.physician_id, dist.product_id, dist.product_name, dist.data_refresh_date, dist.run_id, dist.time_bucket_id, dist.geo_id, dist.geo_code, dist.segment_name, dist.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id from ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) = 'DISTRICT' and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) dist inner join ( select * from terr_dist_region__dist_region_mapping ) map on dist.geo_id = map.district inner join ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) = 'REGION' and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) region on map.region = region.geo_id and dist.time_bucket_name = region.time_bucket_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "daily_calls_avg_nation_var_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daily_calls_avg_nation_var_pct_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select t.franchise, 'DAILY_CALLS_AVG_NATION_VAR_PCT' as metric_name, case when nation.metric_value = 0 then 0 else cast( ( ( t.metric_value - nation.metric_value )* 100 \/ nation.metric_value ) as decimal(32, 2) ) end as metric_value, t.physician_id, t.product_id, t.product_name, t.data_refresh_date, t.run_id, t.time_bucket_id, t.geo_id, t.geo_code, t.segment_name, t.market_id, cast(null as string) as access_type, cast(-1 as int) as plan_id from ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) in ( 'TERRITORY', 'DISTRICT', 'REGION' ) and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) t inner join ( select * from terr_dist_region__nation_mapping ) map on t.geo_id = map.geo_id and upper(t.geo_code) = upper(map.geo_code) inner join ( select * from average_calls_per_day__average_calls_per_day_final where upper(geo_code) = 'NATION' and upper(metric_type_group) = 'OVERALL' and upper(time_bucket_name) in ('MTD','QTD','YTD') ) nation on map.nat = nation.geo_id and t.franchise = nation.franchise and t.physician_id = nation.physician_id and t.product_id = nation.product_id and t.data_refresh_date = nation.data_refresh_date and t.run_id = nation.run_id and t.time_bucket_name = nation.time_bucket_name and coalesce(t.segment_name, '') = coalesce(nation.segment_name, '') and coalesce(t.market_id, '') = coalesce(nation.market_id, '') and coalesce(t.product_name, '') = coalesce(nation.product_name, '')"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_phy",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "PLANNED_CALLS",
	"params": {
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"pdrp_flag_filter_param": "upper(pdrp_flag)='N'",
		"ads_active_flag_type_filter_param": "upper(trim(ads_active_flag))='Y'",
		"current_week_flag_type_filter_param": "upper(trim(current_week_flag))='Y'",
		"geo_code_type_filter_param": "geo_code='territory'",
		"time_bucket_id_param": "cast(time_dimension_id_of_todate_bucket as int)",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls_territory",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_ter",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "PLANNED_CALLS_TER",
	"params": {
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"ads_active_flag_type_filter_param": "upper(trim(ads_active_flag))='Y'",
		"current_week_flag_type_filter_param": "upper(trim(current_week_flag))='Y'",
		"geo_code_type_filter_param": "geo_code in ('territory','region','district')",
		"time_bucket_id_param": "cast(time_dimension_id_of_todate_bucket as int)",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls_territory",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_union",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "planned_calls-planned_calls_phy|planned_calls_territory-planned_calls_ter",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls_territory",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_add",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "planned_calls_territory-planned_calls_union",
		"column_name": "metric_name",
		"expression": "cast('PLANNED_CALLS' as string)"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls_territory",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_metric_val",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "planned_calls_territory-planned_calls_add",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "planned_calls_territory",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "planned_calls_custom",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select *,cast(null as string) as access_type,cast(-1 as int) as plan_id from planned_calls_territory__planned_calls_metric_val"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_phy",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "DELIVERED_CALLS",
	"params": {
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"pdrp_flag_filter_param": "upper(pdrp_flag)='N'",
		"ads_active_flag_type_filter_param": "upper(trim(ads_active_flag))='Y'",
		"current_week_flag_type_filter_param": "upper(trim(current_week_flag))='Y'",
		"geo_code_type_filter_param": "geo_code='territory'",
		"time_bucket_id_param": "cast(time_dimension_id_of_todate_bucket as int)",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls_territory",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_ter",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "DELIVERED_CALLS_TER",
	"params": {
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"ads_active_flag_type_filter_param": "upper(trim(ads_active_flag))='Y'",
		"current_week_flag_type_filter_param": "upper(trim(current_week_flag))='Y'",
		"geo_code_type_filter_param": "geo_code in ('territory','region','district')",
		"time_bucket_id_param": "cast(time_dimension_id_of_todate_bucket as int)",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls_territory",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_union",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "delivered_calls-delivered_calls_phy|delivered_calls_territory-delivered_calls_ter",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls_territory",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_add",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "delivered_calls_territory-delivered_calls_union",
		"column_name": "metric_name",
		"expression": "cast('DELIVERED_CALLS' as string)"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls_territory",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_metric_val",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "delivered_calls_territory-delivered_calls_add",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "delivered_calls_territory",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "delivered_calls_custom",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select *,cast(null as string) as access_type,cast(-1 as int) as plan_id from delivered_calls_territory__delivered_calls_metric_val"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "weeks_left_call_plan",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "WEEKS_LEFT_CALL_PLAN",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "WEEKS_LEFT_CALL_PLAN",
	"params": {
		"metric_type_name_param": "cast('WEEKS_LEFT_CALL_PLAN' as STRING)",
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"time_dimension_filter_param": "upper(trim(time_bucket_name))='QTD'",
		"geo_id_param": "-1",
		"geo_code_param": "cast('nation' as STRING)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"select_col_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "weeks_left_call_plan",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "WEEKS_LEFT_CALL_PLAN_cast",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "weeks_left_call_plan-WEEKS_LEFT_CALL_PLAN",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "weeks_left_call_plan",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "WEEKS_LEFT_CALL_PLAN_fix",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select *,cast(null as string) as access_type,cast(-1 as int) as plan_id from weeks_left_call_plan__WEEKS_LEFT_CALL_PLAN_cast"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_achievement_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "GAITED_CALL_PLAN_ACHIEVEMENT",
	"params": {
		"franchise_type_name_param": "1=1",
		"select_col_param": "franchise|geo_id|geo_code|abbott_customer_id|time_bucket_id|gaited_planned_calls|capped_calls_current_sell_period",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast('OVERALL' as STRING)",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"metric_grain_param": "physician_id|franchise|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group|metric_type_subgroup",
		"metric_type_name_param": "cast('GAITED_CALL_PLAN_ACHIEVEMENT' as STRING)"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_achievement_phy",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "GAITED_CALL_PLAN_ACHIEVEMENT_PHY",
	"params": {
		"franchise_type_name_param": "1=1",
		"select_col_param": "franchise|geo_id|geo_code|abbott_customer_id|time_bucket_id|gaited_planned_calls|capped_calls_current_sell_period",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast(NULL as STRING)",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"metric_grain_param": "physician_id|franchise|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group|metric_type_subgroup",
		"metric_type_name_param": "cast('GAITED_CALL_PLAN_ACHIEVEMENT' as STRING)"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_market_decile_terr",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with dim_geo as ( select territory_number,sales_force, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where territory_number is not null ), dim_time as ( select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(time_bucket_name)) in ('QTD') and upper(kpi_group)='CALL_PLAN' ), base as ( select a.sales_force_code, a.franchise, a.territory_number, a.capped_calls_current_sell_period, a.gaited_planned_calls, a.reach_attainment, a.abbott_customer_id, a.roll_up_eligible_flag, hcv_decile.segment_value as market_decile, dg.geo_id, dg.geo_code, dt.time_bucket_id from abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl a inner join abv_hcp360_sales_marketing_dm.dim_call_campaign_period_tbl c on a.sales_force_code=c.sales_force_code and a.campaign_year=c.campaign_year and a.campaign_period=c.campaign_period and upper(trim(a.current_week_flag))='Y' inner join dim_geo dg on a.territory_number = dg.territory_number and a.sales_force_code = dg.sales_force inner join dim_time dt on cast(a.week_end_date as date )>= cast(dt.START_DATE as date) and cast(a.week_end_date as date ) <= cast(dt.END_DATE as date ) left join abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile on a.abbott_customer_id=hcv_decile.abbott_customer_id and upper(trim(hcv_decile.franchise_name))='HEPATOLOGY' and upper(trim(hcv_decile.segment_name))='HCV_DECILE' where upper(trim(a.franchise))= 'HEPATOLOGY' and upper(trim(c.ads_active_flag))='Y' ) select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('8','9','10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('High  (D8 - D10)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Medium  (D4 - D7)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('1','2','3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Low  (D1 - D3)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when base.market_decile is null or market_decile ='0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when base.market_decile is null or market_decile ='0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Non-Writer (D0)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_market_decile",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with dim_geo as ( select territory_number,sales_force, district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where district is not null union all select territory_number,sales_force, region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where region is not null union all select territory_number,sales_force, '-1' as geo_id, 'nation' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where territory_number is not null ), dim_time as ( select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(time_bucket_name)) in ('QTD') and upper(kpi_group)='CALL_PLAN' ), base as ( select a.sales_force_code, a.franchise, a.territory_number, a.capped_calls_current_sell_period, a.gaited_planned_calls, a.reach_attainment, a.abbott_customer_id, a.roll_up_eligible_flag, hcv_decile.segment_value as market_decile, dg.geo_id, dg.geo_code, dt.time_bucket_id from abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl a inner join abv_hcp360_sales_marketing_dm.dim_call_campaign_period_tbl c on a.sales_force_code=c.sales_force_code and a.campaign_year=c.campaign_year and a.campaign_period=c.campaign_period and upper(trim(a.current_week_flag))='Y' inner join dim_geo dg on a.territory_number = dg.territory_number and a.sales_force_code = dg.sales_force inner join dim_time dt on cast(a.week_end_date as date )>= cast(dt.START_DATE as date) and cast(a.week_end_date as date ) <= cast(dt.END_DATE as date ) left join abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile on a.abbott_customer_id=hcv_decile.abbott_customer_id and upper(trim(hcv_decile.franchise_name))='HEPATOLOGY' and upper(trim(hcv_decile.segment_name))='HCV_DECILE' where upper(trim(a.franchise))= 'HEPATOLOGY' and upper(trim(c.ads_active_flag))='Y' and upper(trim(a.roll_up_eligible_flag)) = 'Y' ) select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('8','9','10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('8','9','10') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('High  (D8 - D10)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('4','5','6','7') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Medium  (D4 - D7)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('1','2','3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('1','2','3') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Low  (D1 - D3)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when base.market_decile is null or market_decile ='0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when base.market_decile is null or market_decile ='0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='0' then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('Market_Decile' as string) as metric_type_group, cast('Non-Writer (D0)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_dup_decile_terr",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with dim_geo as ( select territory_number,sales_force, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where territory_number is not null ), dim_time as ( select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(time_bucket_name)) in ('QTD') and upper(kpi_group)='CALL_PLAN' ), base as ( select a.sales_force_code, a.franchise, a.territory_number, a.capped_calls_current_sell_period, a.gaited_planned_calls, a.reach_attainment, a.abbott_customer_id, a.roll_up_eligible_flag, hcv_decile.segment_value as market_decile, dg.geo_id, dg.geo_code, dt.time_bucket_id from abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl a inner join abv_hcp360_sales_marketing_dm.dim_call_campaign_period_tbl c on a.sales_force_code=c.sales_force_code and a.campaign_year=c.campaign_year and a.campaign_period=c.campaign_period and upper(trim(a.current_week_flag))='Y' inner join dim_geo dg on a.territory_number = dg.territory_number and a.sales_force_code = dg.sales_force inner join dim_time dt on cast(a.week_end_date as date )>= cast(dt.START_DATE as date) and cast(a.week_end_date as date ) <= cast(dt.END_DATE as date ) left join abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile on a.abbott_customer_id=hcv_decile.abbott_customer_id and upper(trim(hcv_decile.franchise_name))='HEPATOLOGY' and upper(trim(hcv_decile.segment_name)) like 'DUP DECILE%' where upper(trim(a.franchise))= 'HEPATOLOGY' and upper(trim(c.ads_active_flag))='Y' ) select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('High  (D8 - D10)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Medium  (D4 - D7)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Low  (D1 - D3)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when base.market_decile is null or market_decile ='D0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when base.market_decile is null or market_decile ='D0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Non-Writer (D0)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "gaited_call_plan_dup_decile",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with dim_geo as ( select territory_number,sales_force, district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where district is not null union all select territory_number,sales_force, region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where region is not null union all select territory_number,sales_force, '-1' as geo_id, 'nation' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where territory_number is not null ), dim_time as ( select start_date,end_date,time_dimension_id as time_bucket_id,time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(time_bucket_name)) in ('QTD') and upper(kpi_group)='CALL_PLAN' ), base as ( select a.sales_force_code, a.franchise, a.territory_number, a.capped_calls_current_sell_period, a.gaited_planned_calls, a.reach_attainment, a.abbott_customer_id, a.roll_up_eligible_flag, hcv_decile.segment_value as market_decile, dg.geo_id, dg.geo_code, dt.time_bucket_id from abv_hcp360_sales_marketing_dm.agg_call_plan_metric_fact_tbl a inner join abv_hcp360_sales_marketing_dm.dim_call_campaign_period_tbl c on a.sales_force_code=c.sales_force_code and a.campaign_year=c.campaign_year and a.campaign_period=c.campaign_period and upper(trim(a.current_week_flag))='Y' inner join dim_geo dg on a.territory_number = dg.territory_number and a.sales_force_code = dg.sales_force inner join dim_time dt on cast(a.week_end_date as date )>= cast(dt.START_DATE as date) and cast(a.week_end_date as date ) <= cast(dt.END_DATE as date ) left join abv_hcp360_sales_marketing_dm.rltn_segment_detail_tbl hcv_decile on a.abbott_customer_id=hcv_decile.abbott_customer_id and upper(trim(hcv_decile.franchise_name))='HEPATOLOGY' and upper(trim(hcv_decile.segment_name)) like 'DUP DECILE%' where upper(trim(a.franchise))= 'HEPATOLOGY' and upper(trim(c.ads_active_flag))='Y' and upper(trim(a.roll_up_eligible_flag)) = 'Y' ) select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D8','D9','D10') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('High  (D8 - D10)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D4','D5','D6','D7') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Medium  (D4 - D7)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when upper(trim(base.market_decile)) in ('D1','D2','D3') then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Low  (D1 - D3)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup union all select franchise,geo_id,geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string) as metric_name, case when coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) = 0 then 0 when (sum(case when base.market_decile is null or market_decile ='D0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) *100) > 100 then 100 else round(sum(case when base.market_decile is null or market_decile ='D0' then capped_calls_current_sell_period else 0 end) \/ coalesce(sum(case when base.market_decile is null or market_decile ='D0' then gaited_planned_calls else 0 end) ,0) *100) end as metric_value, time_bucket_id, current_date() as data_refresh_date, id as run_id, cast('-1' as int) as market_id, cast(null as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast('DUP Decile' as string) as metric_type_group, cast('Non-Writer (D0)' as string) as metric_type_subgroup from base cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by franchise, geo_id,geo_code,product_id,product_name,physician_id,metric_name,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,access_type,plan_id,metric_type_group,metric_type_subgroup"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "union_gaited_call_plan_achievement",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "gaited_call_plan_achievement-gaited_call_plan_achievement_geo|gaited_call_plan_achievement-gaited_call_plan_achievement_phy|gaited_call_plan_achievement-gaited_call_plan_market_decile_terr|gaited_call_plan_achievement-gaited_call_plan_market_decile|gaited_call_plan_achievement-gaited_call_plan_dup_decile_terr|gaited_call_plan_achievement-gaited_call_plan_dup_decile",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "call_plan",
	"procedure_name": "gaited_call_plan_achievement",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "rename_gaited_call_plan_achievement",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "gaited_call_plan_achievement-union_gaited_call_plan_achievement",
		"column_name": "metric_name",
		"expression": "cast('GAITED_CALL_PLAN_ACHIEVEMENT' as string)"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast('TOTAL' as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_geo_channel",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "CHANNEL_NAME",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_physician_channel",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "CHANNEL_NAME",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_union",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "filled_claims-filled_claims_geo|filled_claims-filled_claims_geo_channel|filled_claims-filled_claims_physician_channel",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_1",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) = 'hcv market'",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_2",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) in ('daa market','total_gilead')",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_group",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_3",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) = 'hcv market'",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_4",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "FILLED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) in ('daa market','total_gilead')",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_group",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_union",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "filled_claims-filled_claims_union|filled_claims_prdt-filled_claims_prdt_1|filled_claims_prdt-filled_claims_prdt_2|filled_claims_prdt-filled_claims_prdt_3|filled_claims_prdt-filled_claims_prdt_4",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "filled_claims_prdt",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "filled_claims_prdt_add",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "filled_claims_prdt-filled_claims_prdt_union",
		"column_name": "metric_name",
		"expression": "cast('FILLED_CLAIMS' as string)"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast('TOTAL' as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_geo_channel",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "CHANNEL_NAME",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_physician_channel",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "CHANNEL_NAME",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_union",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "submitted_claims-submitted_claims_geo|submitted_claims-submitted_claims_geo_channel|submitted_claims-submitted_claims_physician_channel",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_1",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) = 'hcv market'",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_2",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) in ('daa market','total_gilead')",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_group",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "cast('-1' as  string)",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_3",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) = 'hcv market'",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_4",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "SUBMITTED_CLAIMS_PRDT",
	"params": {
		"sales_force_filter": "lower(sales_force_code) = 'hcv1'",
		"channel_name_filter": "lower(channel_name) in ('commercial', 'medicare', 'total medi')",
		"franchise_filter": "lower(franchise_name) = 'hepatology'",
		"prdt_group_filter": "(lower(product_group)) in ('daa market','total_gilead')",
		"prdt_group_type_filter": "(lower(product_group_type)) = 'product'",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "product_group",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "ABBOTT_CUSTOMER_ID",
		"metric_type_group_param": "cast(null as  string)",
		"metric_grain_param": "FRANCHISE|GEO_ID|GEO_CODE|PRODUCT_ID|PRODUCT_NAME|PHYSICIAN_ID|TIME_BUCKET_ID|DATA_REFRESH_DATE|RUN_ID|MARKET_ID|SEGMENT_NAME|ACCESS_TYPE|PLAN_ID|METRIC_TYPE_GROUP|METRIC_TYPE_SUBGROUP"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_union",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "submitted_claims-submitted_claims_union|submitted_claims_prdt-submitted_claims_prdt_1|submitted_claims_prdt-submitted_claims_prdt_2|submitted_claims_prdt-submitted_claims_prdt_3|submitted_claims_prdt-submitted_claims_prdt_4",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "claims",
	"procedure_name": "submitted_claims_prdt",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "submitted_claims_prdt_add",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "submitted_claims_prdt-submitted_claims_prdt_union",
		"column_name": "metric_name",
		"expression": "cast('SUBMITTED_CLAIMS' as string)"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "product_weight",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "prdt_weight_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "PRODUCT_WEIGHT",
	"params": {
		"metric_name_param": "cast('PRODUCT_WEIGHT' as string)",
		"metric_value_param": "cast(PROD_WEIGHT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "product_weight",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "prdt_weight",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "product_weight-prdt_weight_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "target_payout_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "trgt_payout_pct_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TARGET_PAYOUT_PCT",
	"params": {
		"metric_name_param": "cast('TARGET_PAYOUT_PCT' as string)",
		"metric_value_param": "cast(PCNT_TARGET_PAYOUT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "target_payout_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "trgt_payout_pct",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "target_payout_pct-trgt_payout_pct_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "target_payout",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "trgt_payout_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TARGET_PAYOUT",
	"params": {
		"metric_name_param": "cast('TARGET_PAYOUT' as string)",
		"metric_value_param": "cast(TARGET_PAYOUT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "target_payout",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "trgt_payout",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "target_payout-trgt_payout_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "earnings",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "earn_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "EARNINGS",
	"params": {
		"metric_name_param": "cast('EARNINGS' as string)",
		"metric_value_param": "cast(EARNINGS as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "earnings",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "earn",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "earnings-earn_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "eligibility",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "eligible_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "ELIGIBILITY",
	"params": {
		"metric_name_param": "cast('ELIGIBILITY' as string)",
		"metric_value_param": "cast(ELIGIBILITY as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "eligibility",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "eligible",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "eligibility-eligible_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "total_payout",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "total_pay_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TOTAL_PAYOUT",
	"params": {
		"metric_name_param": "cast('TOTAL_PAYOUT' as string)",
		"metric_value_param": "cast(TOTAL_PAYOUT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|TERRITORY_NAME|PRODUCT_NAME|PLAN_TYPE|PLAN_PERIOD|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "total_payout",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "total_pay",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "total_payout-total_pay_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "dollar_sales",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "dollar_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "DOLLAR_SALES",
	"params": {
		"metric_name_param": "cast(METRIC_TYPE_NAME as string)",
		"metric_value_param": "cast(METRIC_VALUE as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|GEOGRAPHY|PRODUCT_NAME|PLAN_ID|START_DATE|END_DATE|METRIC_TYPE|METRIC_VALUE|ANNOUNCEMENTS|A_FLAG|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "dollar_sales",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "dollar_remove",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "remove_columns",
	"params": {
		"input_table": "dollar_sales-dollar_ic",
		"columns_to_remove": "metric_name"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "dollar_sales",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "dollar",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "dollar_sales-dollar_remove",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "summit_peer",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "non_metric_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUMMIT_PEER",
	"params": {
		"metric_value_param": "cast(METRIC_VALUE as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|TERRITORY_ID|RANK|PEER_NAME|TIME_BUCKET_NAME|RANK_GROUP|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "summit_peer",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "non_metric_remove",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "remove_columns",
	"params": {
		"input_table": "summit_peer-non_metric_ic",
		"columns_to_remove": "metric_name"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "summit_peer",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "non_metric",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "summit_peer-non_metric_remove",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "SUMMIT_ELIGIBLE_AMT",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "summit_eligible_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUMMIT_ELIGIBLE_AMT",
	"params": {
		"metric_name_param": "cast('SUMMIT_ELIGIBLE_AMT' as string)",
		"metric_value_param": "cast(SUMMIT_ELIGIBLE_AMOUNT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|PAYROLL_SUMMARY|PAYOUT_DATE|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "SUMMIT_ELIGIBLE_AMT",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "summit_eligible",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "SUMMIT_ELIGIBLE_AMT-summit_eligible_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "SUMMIT_INELIGIBLE_AMT",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "summit_ineligible_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUMMIT_INELIGIBLE_AMT",
	"params": {
		"metric_name_param": "cast('SUMMIT_INELIGIBLE_AMT' as string)",
		"metric_value_param": "cast(SUMMIT_INELIGIBLE_AMOUNT as decimal(32,2))",
		"select_cols_param": "REP_ID|DATA_MONTH|PAYROLL_SUMMARY|PAYOUT_DATE|METRIC_NAME|METRIC_VALUE|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "SUMMIT_INELIGIBLE_AMT",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "summit_ineligible",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "SUMMIT_INELIGIBLE_AMT-summit_ineligible_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "time_in_field_pct",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "time_in_field_pct_step_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TIME_IN_FIELD_PCT",
	"params": {
		"select_cols_param": "upi_id|data_month|terr_nbr|period|payout|target_payout|pcnt_target_payout|pcnt_time_in_field|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "time_in_field_pct",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "time_in_field_pct_step",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "time_in_field_pct-time_in_field_pct_step_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "ic_score",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "ic_score_step_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "IC_SCORE",
	"params": {
		"select_cols_param": "upi_id|data_month|terr_nbr|period|payout|target_payout|pcnt_target_payout|score|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "ic_score",
	"procedure_order": 12,
	"procedure_active_flag": "Y",
	"step_id": "ic_score_step",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "ic_score-ic_score_step_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "summit_rank",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "summit_rank_step_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SUMMIT_RANK",
	"params": {
		"select_cols_param": "upi_id|data_month|terr_nbr|period|payout|target_payout|pcnt_target_payout|summit_rank|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "summit_rank",
	"procedure_order": 13,
	"procedure_active_flag": "Y",
	"step_id": "summit_rank_step",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "summit_rank-summit_rank_step_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "total_rank",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "total_rank_step_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TOTAL_RANK",
	"params": {
		"select_cols_param": "upi_id|data_month|terr_nbr|period|payout|target_payout|pcnt_target_payout|total_rank|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "total_rank",
	"procedure_order": 14,
	"procedure_active_flag": "Y",
	"step_id": "total_rank_step",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "total_rank-total_rank_step_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "adjustment",
	"procedure_order": 15,
	"procedure_active_flag": "Y",
	"step_id": "adjustment_step_ic",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "ADJUSTMENT",
	"params": {
		"select_cols_param": "upi_id|data_month|terr_nbr|period|payout|target_payout|pcnt_target_payout|adjustment|REFRESH_DATE"
	}
}, {
	"workflow_name": "ic",
	"procedure_name": "adjustment",
	"procedure_order": 15,
	"procedure_active_flag": "Y",
	"step_id": "adjustment_step",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "adjustment-adjustment_step_ic",
		"key_columns": "$ALL$",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "NBRX_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_sel",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code,  q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_volume__nbrx_volume_MAVYRET_4) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_cust",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  nbrx_volume__nbrx_volume_MAVYRET_4) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "NBRX_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_sel",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code,  q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_volume__nbrx_volume_phy_MAVYRET_4)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_cust",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  nbrx_volume__nbrx_volume_phy_MAVYRET_4)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_trend",
	"step_order": 7,
	"module_type": "metric",
	"module_name": "NBRX_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_trend_sel",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code,  q.market_id,  cast('-1' as int) as plan_id from ( select * from  nbrx_volume__nbrx_volume_phy_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_trend_cust",
	"step_order": 9,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  nbrx_volume__nbrx_volume_phy_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_trend",
	"step_order": 10,
	"module_type": "metric",
	"module_name": "NBRX_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_trend_sel",
	"step_order": 11,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_volume__nbrx_volume_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_trend_cust",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  nbrx_volume__nbrx_volume_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_all_union",
	"step_order": 13,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_volume-nbrx_volume_MAVYRET_4_sel|nbrx_volume-nbrx_volume_phy_MAVYRET_4_sel|nbrx_volume-nbrx_volume_MAVYRET_4_trend_sel|nbrx_volume-nbrx_volume_phy_MAVYRET_4_trend_sel",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_prev",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "NBRX_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_MAVYRET_4_prev_cust",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast('-1' as int) as plan_id, cast (NULL as string) as access_type, cast(NULL as string) as metric_type_group,cast(NULL as string) as metric_type_subgroup from ( select * from  nbrx_volume_prev__nbrx_volume_MAVYRET_4_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_prev",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "NBRX_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_phy_MAVYRET_4_prev_cust",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name,  ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast('-1' as int) as plan_id, cast (NULL as string) as access_type, cast(NULL as string) as metric_type_group,cast(NULL as string) as metric_type_subgroup from ( select * from  nbrx_volume_prev__nbrx_volume_phy_MAVYRET_4_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_all_union_prev",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_volume_prev-nbrx_volume_MAVYRET_4_prev_cust|nbrx_volume_prev-nbrx_volume_phy_MAVYRET_4_prev_cust",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_prev",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_prev_sel",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'NBRX_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  q.product_name as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_volume_prev__nbrx_volume_all_union_prev) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_vol_change",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_c4w_p4w",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX' ), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume__nbrx_volume_MAVYRET_4_cust curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_prev__nbrx_volume_MAVYRET_4_prev_cust prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_CHANGE' as metric_name, case when prev.metric_value = 0 then 0 else ( coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) ) end as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_vol_change",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_c4w_p4w_phy",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX' ), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume__nbrx_volume_phy_MAVYRET_4_cust curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_prev__nbrx_volume_phy_MAVYRET_4_prev_cust prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_CHANGE' as metric_name, case when prev.metric_value = 0 then 0 else ( coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) ) end as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_vol_change",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_union",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_vol_change-nbrx_volume_change_c4w_p4w|nbrx_vol_change-nbrx_volume_change_c4w_p4w_phy",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_vol_change",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_custom",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, q.geo_id, q.geo_code, q.product_id,  q.product_name as product_name, q.physician_id, 'NBRX_VOL_CHANGE' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value ,q.time_bucket_id, q.data_refresh_date, q.run_id, q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_vol_change__nbrx_volume_change_union) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_change_pct",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_pct_c4w_p4w",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX' ), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume__nbrx_volume_MAVYRET_4_cust curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_prev__nbrx_volume_MAVYRET_4_prev_cust prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_CHANGE_PCT' as metric_name, case when prev.metric_value = 0 then 0.00 when ( curr.metric_value - prev.metric_value ) = 0 then 0.00 when prev.metric_value is null then 0.00 when ( curr.metric_value - prev.metric_value ) is null then 0.00 else cast( ( ( curr.metric_value - prev.metric_value ) \/ prev.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_change_pct",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_pct_phy_c4w_p4w",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX' ), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume__nbrx_volume_phy_MAVYRET_4_cust curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_prev__nbrx_volume_phy_MAVYRET_4_prev_cust prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_CHANGE_PCT' as metric_name, case when prev.metric_value = 0 then 0.00 when ( curr.metric_value - prev.metric_value ) = 0 then 0.00 when prev.metric_value is null then 0.00 when ( curr.metric_value - prev.metric_value ) is null then 0.00 else cast( ( ( curr.metric_value - prev.metric_value ) \/ prev.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_change_pct",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_pct_union",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_volume_change_pct-nbrx_volume_change_pct_c4w_p4w|nbrx_volume_change_pct-nbrx_volume_change_pct_phy_c4w_p4w",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "nbrx_volume_change_pct",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_change_pct_custom",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, q.geo_id, q.geo_code, q.product_id,  q.product_name as product_name, q.physician_id, 'NBRX_VOL_CHANGE_PCT' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value ,q.time_bucket_id, q.data_refresh_date, q.run_id, q.market_id, cast('-1' as int) as plan_id from ( select * from  nbrx_volume_change_pct__nbrx_volume_change_pct_union) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_sel",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id, cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id,  cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_MAVYRET_4) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_cust",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id, cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_MAVYRET_4) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_8",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C8W'  as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_8_sel",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id, cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id,  cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_MAVYRET_8) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_8_cust",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id, cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_MAVYRET_8) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_13",
	"step_order": 7,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C13W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_13_sel",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id,  cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_MAVYRET_13)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_13_cust",
	"step_order": 9,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_MAVYRET_13)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4",
	"step_order": 10,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_sel",
	"step_order": 11,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id, cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_phy_MAVYRET_4)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_cust",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name,( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_phy_MAVYRET_4)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_8",
	"step_order": 13,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C8W'  as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_8_sel",
	"step_order": 14,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id,  cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_phy_MAVYRET_8)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_8_cust",
	"step_order": 15,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_phy_MAVYRET_8)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_13",
	"step_order": 16,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C13W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_13_sel",
	"step_order": 17,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code,  q.market_id,  cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_phy_MAVYRET_13)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_13_cust",
	"step_order": 18,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_phy_MAVYRET_13)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_trend",
	"step_order": 19,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_trend_sel",
	"step_order": 20,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code,  q.market_id, cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_phy_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_trend_cust",
	"step_order": 21,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_phy_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_trend",
	"step_order": 22,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_trend_sel",
	"step_order": 23,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.market_id, cast('-1' as int) as plan_id from ( select * from  daa_vol__daa_vol_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_trend_cust",
	"step_order": 24,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_MAVYRET_4_trend)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_qtd_ytd",
	"step_order": 25,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_QTD_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_1_bucket_name_param": "YTD|QTD|P4W|P8W|P13W|PQTD|PYTD",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_qtd_ytd_cust",
	"step_order": 26,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast( null as string) as access_type, cast('-1' as int) as plan_id, cast( null as string) as metric_type_group, cast( null as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_phy_MAVYRET_qtd_ytd)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_qtd_ytd",
	"step_order": 27,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_QTD",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_1_bucket_name_param": "YTD|QTD|P4W|P8W|P13W|PQTD|PYTD",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_qtd_ytd_cust",
	"step_order": 28,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast( null as string) as access_type, cast('-1' as int) as plan_id, cast( null as string) as metric_type_group, cast( null as string) as metric_type_subgroup from ( select * from  daa_vol__daa_vol_MAVYRET_qtd_ytd)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_all_union",
	"step_order": 29,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "daa_vol-daa_vol_MAVYRET_4_sel|daa_vol-daa_vol_MAVYRET_8_sel|daa_vol-daa_vol_MAVYRET_13_sel|daa_vol-daa_vol_phy_MAVYRET_4_sel|daa_vol-daa_vol_phy_MAVYRET_8_sel|daa_vol-daa_vol_phy_MAVYRET_13_sel|daa_vol-daa_vol_MAVYRET_4_trend_sel|daa_vol-daa_vol_phy_MAVYRET_4_trend_sel|daa_vol-daa_vol_MAVYRET_qtd_ytd_cust|daa_vol-daa_vol_phy_MAVYRET_qtd_ytd_cust",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_all_union_final",
	"step_order": 30,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "daa_vol-daa_vol_all_union",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_prev",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W5|W6|W7|W8"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_4_prev_cust",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast ('NULL' as string) as metric_type_group, cast ('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_MAVYRET_4_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_8_prev",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P8W'  as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W9|W10|W11|W12|W13|W14|W15|W16"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_8_prev_cust",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_MAVYRET_8_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_13_prev",
	"step_order": 5,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P13W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_MAVYRET_13_prev_cust",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_MAVYRET_13_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_prev",
	"step_order": 7,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W5|W6|W7|W8"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_4_prev_cust",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)   as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_phy_MAVYRET_4_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_8_prev",
	"step_order": 9,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P8W'  as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W9|W10|W11|W12|W13|W14|W15|W16"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_8_prev_cust",
	"step_order": 10,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_phy_MAVYRET_8_prev)q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_13_prev",
	"step_order": 11,
	"module_type": "metric",
	"module_name": "DAA_MARKET_VOL_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P13W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('HCV MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_prev",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_phy_MAVYRET_13_prev_cust",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, 'DAA_MARKET_VOL' as metric_name, ( q.metric_value)  as metric_value, q.physician_id, q.product_id,  cast('MAVYRET' as string) as product_name, q.data_refresh_date, q.run_id, q.time_bucket_id, q.geo_id, q.geo_code, q.segment_name, q.market_id, cast ('NULL' as string) as access_type, cast('-1' as int) as plan_id, cast('NULL' as string) as metric_type_group, cast('NULL' as string) as metric_type_subgroup from ( select * from  daa_vol_prev__daa_vol_phy_MAVYRET_13_prev) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c4w_p4w",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c4w.franchise, c4w.geo_id, c4w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c4w.metric_value - p4w.metric_value as metric_value, c4w.physician_id, c4w.product_id, c4w.product_name, c4w.data_refresh_date, c4w.run_id, c4w.time_bucket_id, c4w.market_id, c4w.segment_name, c4w.access_type, c4w.plan_id, c4w.metric_type_group, c4w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_4_cust c4w inner join daa_vol_prev__daa_vol_MAVYRET_4_prev_cust p4w on c4w.franchise = p4w.franchise and c4w.geo_code = p4w.geo_code and c4w.geo_id = p4w.geo_id and c4w.metric_name = p4w.metric_name and c4w.physician_id = p4w.physician_id and c4w.data_refresh_date = p4w.data_refresh_date and c4w.run_id = p4w.run_id and c4w.plan_id = p4w.plan_id and c4w.product_id = p4w.product_id and c4w.product_name = p4w.product_name and c4w.market_id = p4w.market_id and coalesce(c4w.segment_name ,'0') = coalesce(p4w.segment_name ,'0') And coalesce(c4w.access_type ,'0') = coalesce(p4w.access_type ,'0') and coalesce(c4w.metric_type_group ,'0') = coalesce(p4w.metric_type_group ,'0') and coalesce(c4w.metric_type_subgroup ,'0') = coalesce(p4w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c8w_p8w",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c8w.franchise, c8w.geo_id, c8w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c8w.metric_value - p8w.metric_value as metric_value, c8w.physician_id, c8w.product_id, c8w.product_name, c8w.data_refresh_date, c8w.run_id, c8w.time_bucket_id, c8w.market_id, c8w.segment_name, c8w.access_type, c8w.plan_id, c8w.metric_type_group, c8w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_8_cust c8w inner join daa_vol_prev__daa_vol_MAVYRET_8_prev_cust p8w on c8w.franchise = p8w.franchise and c8w.geo_code = p8w.geo_code and c8w.geo_id = p8w.geo_id and c8w.metric_name = p8w.metric_name and c8w.physician_id = p8w.physician_id and c8w.data_refresh_date = p8w.data_refresh_date and c8w.run_id = p8w.run_id and c8w.plan_id = p8w.plan_id and c8w.product_id = p8w.product_id and c8w.product_name = p8w.product_name and c8w.market_id = p8w.market_id and coalesce(c8w.segment_name ,'0') = coalesce(p8w.segment_name ,'0') And coalesce(c8w.access_type ,'0') = coalesce(p8w.access_type ,'0') and coalesce(c8w.metric_type_group ,'0') = coalesce(p8w.metric_type_group ,'0') and coalesce(c8w.metric_type_subgroup ,'0') = coalesce(p8w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c13w_p13w",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c13w.franchise, c13w.geo_id, c13w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c13w.metric_value - p13w.metric_value as metric_value, c13w.physician_id, c13w.product_id, c13w.product_name, c13w.data_refresh_date, c13w.run_id, c13w.time_bucket_id, c13w.market_id, c13w.segment_name, c13w.access_type, c13w.plan_id, c13w.metric_type_group, c13w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_13_cust c13w inner join daa_vol_prev__daa_vol_MAVYRET_13_prev_cust p13w on c13w.franchise = p13w.franchise and c13w.geo_code = p13w.geo_code and c13w.geo_id = p13w.geo_id and c13w.metric_name = p13w.metric_name and c13w.physician_id = p13w.physician_id and c13w.data_refresh_date = p13w.data_refresh_date and c13w.run_id = p13w.run_id and c13w.plan_id = p13w.plan_id and c13w.product_id = p13w.product_id and c13w.product_name = p13w.product_name and c13w.market_id = p13w.market_id and coalesce(c13w.segment_name ,'0') = coalesce(p13w.segment_name ,'0') And coalesce(c13w.access_type ,'0') = coalesce(p13w.access_type ,'0') and coalesce(c13w.metric_type_group ,'0') = coalesce(p13w.metric_type_group ,'0') and coalesce(c13w.metric_type_subgroup ,'0') = coalesce(p13w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c4w_p4w_phy",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c4w.franchise, c4w.geo_id, c4w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c4w.metric_value - p4w.metric_value as metric_value, c4w.physician_id, c4w.product_id, c4w.product_name, c4w.data_refresh_date, c4w.run_id, c4w.time_bucket_id, c4w.market_id, c4w.segment_name, c4w.access_type, c4w.plan_id, c4w.metric_type_group, c4w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_4_cust c4w inner join daa_vol_prev__daa_vol_phy_MAVYRET_4_prev_cust p4w on c4w.franchise = p4w.franchise and c4w.geo_code = p4w.geo_code and c4w.geo_id = p4w.geo_id and c4w.metric_name = p4w.metric_name and c4w.physician_id = p4w.physician_id and c4w.data_refresh_date = p4w.data_refresh_date and c4w.run_id = p4w.run_id and c4w.plan_id = p4w.plan_id and c4w.product_id = p4w.product_id and c4w.product_name = p4w.product_name and c4w.market_id = p4w.market_id and coalesce(c4w.segment_name ,'0') = coalesce(p4w.segment_name ,'0') And coalesce(c4w.access_type ,'0') = coalesce(p4w.access_type ,'0') and coalesce(c4w.metric_type_group ,'0') = coalesce(p4w.metric_type_group ,'0') and coalesce(c4w.metric_type_subgroup ,'0') = coalesce(p4w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c8w_p8w_phy",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c8w.franchise, c8w.geo_id, c8w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c8w.metric_value - p8w.metric_value as metric_value, c8w.physician_id, c8w.product_id, c8w.product_name, c8w.data_refresh_date, c8w.run_id, c8w.time_bucket_id, c8w.market_id, c8w.segment_name, c8w.access_type, c8w.plan_id, c8w.metric_type_group, c8w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_8_cust c8w inner join daa_vol_prev__daa_vol_phy_MAVYRET_8_prev_cust p8w on c8w.franchise = p8w.franchise and c8w.geo_code = p8w.geo_code and c8w.geo_id = p8w.geo_id and c8w.metric_name = p8w.metric_name and c8w.physician_id = p8w.physician_id and c8w.data_refresh_date = p8w.data_refresh_date and c8w.run_id = p8w.run_id and c8w.plan_id = p8w.plan_id and c8w.product_id = p8w.product_id and c8w.product_name = p8w.product_name and c8w.market_id = p8w.market_id and coalesce(c8w.segment_name ,'0') = coalesce(p8w.segment_name ,'0') And coalesce(c8w.access_type ,'0') = coalesce(p8w.access_type ,'0') and coalesce(c8w.metric_type_group ,'0') = coalesce(p8w.metric_type_group ,'0') and coalesce(c8w.metric_type_subgroup ,'0') = coalesce(p8w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_c13w_p13w_phy",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c13w.franchise, c13w.geo_id, c13w.geo_code, 'DAA_MARKET_VOL_CHANGE' as metric_name, c13w.metric_value - p13w.metric_value as metric_value, c13w.physician_id, c13w.product_id, c13w.product_name, c13w.data_refresh_date, c13w.run_id, c13w.time_bucket_id, c13w.market_id, c13w.segment_name, c13w.access_type, c13w.plan_id, c13w.metric_type_group, c13w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_13_cust c13w inner join daa_vol_prev__daa_vol_phy_MAVYRET_13_prev_cust p13w on c13w.franchise = p13w.franchise and c13w.geo_code = p13w.geo_code and c13w.geo_id = p13w.geo_id and c13w.metric_name = p13w.metric_name and c13w.physician_id = p13w.physician_id and c13w.data_refresh_date = p13w.data_refresh_date and c13w.run_id = p13w.run_id and c13w.plan_id = p13w.plan_id and c13w.product_id = p13w.product_id and c13w.product_name = p13w.product_name and c13w.market_id = p13w.market_id and coalesce(c13w.segment_name ,'0') = coalesce(p13w.segment_name ,'0') And coalesce(c13w.access_type ,'0') = coalesce(p13w.access_type ,'0') and coalesce(c13w.metric_type_group ,'0') = coalesce(p13w.metric_type_group ,'0') and coalesce(c13w.metric_type_subgroup ,'0') = coalesce(p13w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_union",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "daa_vol_change-daa_vol_change_c4w_p4w|daa_vol_change-daa_vol_change_c8w_p8w|daa_vol_change-daa_vol_change_c13w_p13w|daa_vol_change-daa_vol_change_c4w_p4w_phy|daa_vol_change-daa_vol_change_c8w_p8w_phy|daa_vol_change-daa_vol_change_c13w_p13w_phy",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_custom",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, q.geo_id, q.geo_code, q.product_id,  q.product_name as product_name, q.physician_id, 'DAA_MARKET_VOL_CHANGE' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value ,q.time_bucket_id, q.data_refresh_date, q.run_id, q.market_id, cast('-1' as int) as plan_id from ( select * from  daa_vol_change__daa_vol_change_union) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_c4w_p4w",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c4w.franchise, c4w.geo_id, c4w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p4w.metric_value = 0 then 0.00 when ( c4w.metric_value - p4w.metric_value ) = 0 then 0.00 when p4w.metric_value is null then 0.00 when ( c4w.metric_value - p4w.metric_value ) is null then 0.00 else cast( ( ( c4w.metric_value - p4w.metric_value ) \/ p4w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c4w.physician_id, c4w.product_id, c4w.product_name, c4w.data_refresh_date, c4w.run_id, c4w.time_bucket_id, c4w.market_id, c4w.segment_name, c4w.access_type, c4w.plan_id, c4w.metric_type_group, c4w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_4_cust c4w inner join daa_vol_prev__daa_vol_MAVYRET_4_prev_cust p4w on c4w.franchise = p4w.franchise and c4w.geo_code = p4w.geo_code and c4w.geo_id = p4w.geo_id and c4w.metric_name = p4w.metric_name and c4w.physician_id = p4w.physician_id and c4w.data_refresh_date = p4w.data_refresh_date and c4w.run_id = p4w.run_id and c4w.plan_id = p4w.plan_id and c4w.product_id = p4w.product_id and c4w.product_name = p4w.product_name and c4w.market_id = p4w.market_id and coalesce(c4w.segment_name ,'0') = coalesce(p4w.segment_name ,'0') And coalesce(c4w.access_type ,'0') = coalesce(p4w.access_type ,'0') and coalesce(c4w.metric_type_group ,'0') = coalesce(p4w.metric_type_group ,'0') and coalesce(c4w.metric_type_subgroup ,'0') = coalesce(p4w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_c8w_p8w",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c8w.franchise, c8w.geo_id, c8w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p8w.metric_value = 0 then 0.00 when ( c8w.metric_value - p8w.metric_value ) = 0 then 0.00 when p8w.metric_value is null then 0.00 when ( c8w.metric_value - p8w.metric_value ) is null then 0.00 else cast( ( ( c8w.metric_value - p8w.metric_value ) \/ p8w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c8w.physician_id, c8w.product_id, c8w.product_name, c8w.data_refresh_date, c8w.run_id, c8w.time_bucket_id, c8w.market_id, c8w.segment_name, c8w.access_type, c8w.plan_id, c8w.metric_type_group, c8w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_8_cust c8w inner join daa_vol_prev__daa_vol_MAVYRET_8_prev_cust p8w on c8w.franchise = p8w.franchise and c8w.geo_code = p8w.geo_code and c8w.geo_id = p8w.geo_id and c8w.metric_name = p8w.metric_name and c8w.physician_id = p8w.physician_id and c8w.data_refresh_date = p8w.data_refresh_date and c8w.run_id = p8w.run_id and c8w.plan_id = p8w.plan_id and c8w.product_id = p8w.product_id and c8w.product_name = p8w.product_name and c8w.market_id = p8w.market_id and coalesce(c8w.segment_name ,'0') = coalesce(p8w.segment_name ,'0') And coalesce(c8w.access_type ,'0') = coalesce(p8w.access_type ,'0') and coalesce(c8w.metric_type_group ,'0') = coalesce(p8w.metric_type_group ,'0') and coalesce(c8w.metric_type_subgroup ,'0') = coalesce(p8w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_c13w_p13w",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c13w.franchise, c13w.geo_id, c13w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p13w.metric_value = 0 then 0.00 when ( c13w.metric_value - p13w.metric_value ) = 0 then 0.00 when p13w.metric_value is null then 0.00 when ( c13w.metric_value - p13w.metric_value ) is null then 0.00 else cast( ( ( c13w.metric_value - p13w.metric_value ) \/ p13w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c13w.physician_id, c13w.product_id, c13w.product_name, c13w.data_refresh_date, c13w.run_id, c13w.time_bucket_id, c13w.market_id, c13w.segment_name, c13w.access_type, c13w.plan_id, c13w.metric_type_group, c13w.metric_type_subgroup from daa_vol__daa_vol_MAVYRET_13_cust c13w inner join daa_vol_prev__daa_vol_MAVYRET_13_prev_cust p13w on c13w.franchise = p13w.franchise and c13w.geo_code = p13w.geo_code and c13w.geo_id = p13w.geo_id and c13w.metric_name = p13w.metric_name and c13w.physician_id = p13w.physician_id and c13w.data_refresh_date = p13w.data_refresh_date and c13w.run_id = p13w.run_id and c13w.plan_id = p13w.plan_id and c13w.product_id = p13w.product_id and c13w.product_name = p13w.product_name and c13w.market_id = p13w.market_id and coalesce(c13w.segment_name ,'0') = coalesce(p13w.segment_name ,'0') And coalesce(c13w.access_type ,'0') = coalesce(p13w.access_type ,'0') and coalesce(c13w.metric_type_group ,'0') = coalesce(p13w.metric_type_group ,'0') and coalesce(c13w.metric_type_subgroup ,'0') = coalesce(p13w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_phy_c4w_p4w",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c4w.franchise, c4w.geo_id, c4w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p4w.metric_value = 0 then 0.00 when ( c4w.metric_value - p4w.metric_value ) = 0 then 0.00 when p4w.metric_value is null then 0.00 when ( c4w.metric_value - p4w.metric_value ) is null then 0.00 else cast( ( ( c4w.metric_value - p4w.metric_value ) \/ p4w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c4w.physician_id, c4w.product_id, c4w.product_name, c4w.data_refresh_date, c4w.run_id, c4w.time_bucket_id, c4w.market_id, c4w.segment_name, c4w.access_type, c4w.plan_id, c4w.metric_type_group, c4w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_4_cust c4w inner join daa_vol_prev__daa_vol_phy_MAVYRET_4_prev_cust p4w on c4w.franchise = p4w.franchise and c4w.geo_code = p4w.geo_code and c4w.geo_id = p4w.geo_id and c4w.metric_name = p4w.metric_name and c4w.physician_id = p4w.physician_id and c4w.data_refresh_date = p4w.data_refresh_date and c4w.run_id = p4w.run_id and c4w.plan_id = p4w.plan_id and c4w.product_id = p4w.product_id and c4w.product_name = p4w.product_name and c4w.market_id = p4w.market_id and coalesce(c4w.segment_name ,'0') = coalesce(p4w.segment_name ,'0') And coalesce(c4w.access_type ,'0') = coalesce(p4w.access_type ,'0') and coalesce(c4w.metric_type_group ,'0') = coalesce(p4w.metric_type_group ,'0') and coalesce(c4w.metric_type_subgroup ,'0') = coalesce(p4w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_phy_c8w_p8w",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c8w.franchise, c8w.geo_id, c8w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p8w.metric_value = 0 then 0.00 when ( c8w.metric_value - p8w.metric_value ) = 0 then 0.00 when p8w.metric_value is null then 0.00 when ( c8w.metric_value - p8w.metric_value ) is null then 0.00 else cast( ( ( c8w.metric_value - p8w.metric_value ) \/ p8w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c8w.physician_id, c8w.product_id, c8w.product_name, c8w.data_refresh_date, c8w.run_id, c8w.time_bucket_id, c8w.market_id, c8w.segment_name, c8w.access_type, c8w.plan_id, c8w.metric_type_group, c8w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_8_cust c8w inner join daa_vol_prev__daa_vol_phy_MAVYRET_8_prev_cust p8w on c8w.franchise = p8w.franchise and c8w.geo_code = p8w.geo_code and c8w.geo_id = p8w.geo_id and c8w.metric_name = p8w.metric_name and c8w.physician_id = p8w.physician_id and c8w.data_refresh_date = p8w.data_refresh_date and c8w.run_id = p8w.run_id and c8w.plan_id = p8w.plan_id and c8w.product_id = p8w.product_id and c8w.product_name = p8w.product_name and c8w.market_id = p8w.market_id and coalesce(c8w.segment_name ,'0') = coalesce(p8w.segment_name ,'0') And coalesce(c8w.access_type ,'0') = coalesce(p8w.access_type ,'0') and coalesce(c8w.metric_type_group ,'0') = coalesce(p8w.metric_type_group ,'0') and coalesce(c8w.metric_type_subgroup ,'0') = coalesce(p8w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_phy_c13w_p13w",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select c13w.franchise, c13w.geo_id, c13w.geo_code, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, case when p13w.metric_value = 0 then 0.00 when ( c13w.metric_value - p13w.metric_value ) = 0 then 0.00 when p13w.metric_value is null then 0.00 when ( c13w.metric_value - p13w.metric_value ) is null then 0.00 else cast( ( ( c13w.metric_value - p13w.metric_value ) \/ p13w.metric_value ) * 100 as decimal(32, 2) ) end as metric_value, c13w.physician_id, c13w.product_id, c13w.product_name, c13w.data_refresh_date, c13w.run_id, c13w.time_bucket_id, c13w.market_id, c13w.segment_name, c13w.access_type, c13w.plan_id, c13w.metric_type_group, c13w.metric_type_subgroup from daa_vol__daa_vol_phy_MAVYRET_13_cust c13w inner join daa_vol_prev__daa_vol_phy_MAVYRET_13_prev_cust p13w on c13w.franchise = p13w.franchise and c13w.geo_code = p13w.geo_code and c13w.geo_id = p13w.geo_id and c13w.metric_name = p13w.metric_name and c13w.physician_id = p13w.physician_id and c13w.data_refresh_date = p13w.data_refresh_date and c13w.run_id = p13w.run_id and c13w.plan_id = p13w.plan_id and c13w.product_id = p13w.product_id and c13w.product_name = p13w.product_name and c13w.market_id = p13w.market_id and coalesce(c13w.segment_name ,'0') = coalesce(p13w.segment_name ,'0') And coalesce(c13w.access_type ,'0') = coalesce(p13w.access_type ,'0') and coalesce(c13w.metric_type_group ,'0') = coalesce(p13w.metric_type_group ,'0') and coalesce(c13w.metric_type_subgroup ,'0') = coalesce(p13w.metric_type_subgroup,'0')"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_union",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "daa_vol_change_pct-daa_vol_change_pct_c4w_p4w|daa_vol_change_pct-daa_vol_change_pct_c8w_p8w|daa_vol_change_pct-daa_vol_change_pct_c13w_p13w|daa_vol_change_pct-daa_vol_change_pct_phy_c4w_p4w|daa_vol_change_pct-daa_vol_change_pct_phy_c8w_p8w|daa_vol_change_pct-daa_vol_change_pct_phy_c13w_p13w",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "daa_vol_change_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "daa_vol_change_pct_union_custom",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select q.franchise, q.geo_id, q.geo_code, q.product_id,  q.product_name as product_name, q.physician_id, 'DAA_MARKET_VOL_CHANGE_PCT' as metric_name, cast( ( q.metric_value) as decimal(32, 2) )  as metric_value ,q.time_bucket_id, q.data_refresh_date, q.run_id, q.market_id, cast('-1' as int) as plan_id from ( select * from  daa_vol_change_pct__daa_vol_change_pct_union) q"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "terr_4w_cont",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP' GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "dist_4w_cont",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "terr_8w_cont",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP' GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "dist_8w_cont",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "terr_13w_cont",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP' GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "dist_13w_cont",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') ), time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX WHERE RX.UNIVERSE_NAME='1VIEW' AND RX.METRIC_NAME='NBRX' and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_ID, SUM(CUR_VOL) AS agg_VOL, RANK() OVER (PARTITION BY  VOL.GEO_ID ORDER BY SUM(CUR_VOL) DESC) AS rnk from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id, metric_value AS CUR_VOL,RX.TIME_DIMENSION, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, run_log.run_id FROM fact RX INNER JOIN CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID inner join time on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.RUN_Id ) SELECT FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'TOP_20_DAA_WRITERS_PCT' as METRIC_NAME, CAST((SUM(CASE WHEN RNK BETWEEN 1 AND 20 THEN agg_VOL END)\/SUM(agg_VOL) *100) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID, GEO_CODE, FRANCHISE, TIME_BUCKET_ID, RUN_ID"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "top_20_writers_cont",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "top_20_union",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "top_20_writers_cont-terr_4w_cont|top_20_writers_cont-dist_4w_cont|top_20_writers_cont-terr_8w_cont|top_20_writers_cont-dist_8w_cont|top_20_writers_cont-terr_13w_cont|top_20_writers_cont-dist_13w_cont",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "terr_4w_cont",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "dist_4w_cont",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "terr_8w_cont",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "dist_8w_cont",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "terr_13w_cont",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "dist_13w_cont",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  AND RX.BRAND='MAVYRET'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.BRAND, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, PHYS.BRAND as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MAV_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, PHYS.BRAND, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "mav_writers_cont",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "mav_writers_union",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mav_writers_cont-terr_4w_cont|mav_writers_cont-dist_4w_cont|mav_writers_cont-terr_8w_cont|mav_writers_cont-dist_8w_cont|mav_writers_cont-terr_13w_cont|mav_writers_cont-dist_13w_cont",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "terr_4w_cont",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "dist_4w_cont",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C4W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "terr_8w_cont",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "dist_8w_cont",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C8W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "terr_13w_cont",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name,abbott_customer_id, zip_code, territory_number,region,district, territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1','HCV3') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N' ), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON REP.TERRITORY_NUMBER=VOL.GEO_ID AND REP.TERRITORY_TYPE_ID='REP'  GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='TERRITORY' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='TERRITORY' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "dist_13w_cont",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "WITH CUST as ( select DISTINCT FIRST_NAME, MIDDLE_NAME, LAST_NAME, SALES_FORCE_CODE,franchise_name, abbott_customer_id, zip_code, territory_number,region,district, district as geo_id, 'district' as geo_code  from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl where sales_force_code in ('HCV1') and region in ('HA','HB','HC') and upper(trim(pdrp_flag)) = 'N'), time as (  select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='RX' ), run_log as (  select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as (  select *,'C13W' as time_id from abv_hcp360_sales_marketing_dm.rltn_metric_fact_tbl RX  WHERE RX.UNIVERSE_NAME='1VIEW'  AND RX.METRIC_NAME='NBRX'  and trim(RX.TIME_DIMENSION) in ('W1','W2','W3','W4','W5','W6','W7','W8','W9','W10','W11','W12','W13') ), BASE AS ( SELECT VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id, SUM(CUR_VOL) AS agg_VOL from (SELECT DISTINCT CUST.SALES_FORCE_CODE,CUST.GEO_ID,CUST.GEO_CODE,BRAND,RX.ABBOTT_CUSTOMER_ID as ID, RX.ZIP_CODE,RX.CHANNEL_NAME,RX.Abbott_product_id,metric_value AS CUR_VOL,RX.time_dimension, RX.FRANCHISE_NAME as FRANCHISE, time.time_bucket_id, concat(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS NAME, run_log.run_id FROM fact RX   INNER JOIN   CUST ON CUST.ZIP_CODE=RX.ZIP_CODE AND CUST.ABBOTT_CUSTOMER_ID=RX.ABBOTT_CUSTOMER_ID AND CUST.TERRITORY_NUMBER=RX.GEO_ID inner join time  on RX.time_id=time.time_bucket_name cross join run_log ) VOL GROUP BY VOL.GEO_ID, VOL.GEO_CODE, ID, VOL.FRANCHISE, VOL.time_bucket_id, VOL.NAME, VOL.run_id ) SELECT FRANCHISE, PHYS.GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast('DAA MARKET' as string) as PRODUCT_NAME, ID as PHYSICIAN_ID, 'PHYS_MKT_CON_PCT' as METRIC_NAME, CAST(NVL((SUM(agg_VOL)\/GEO_VOL *100),0) AS DECIMAL(10,2)) AS METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as plan_id, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP FROM BASE PHYS JOIN (SELECT GEO_ID, SUM(agg_VOL) AS GEO_VOL FROM BASE where upper(geo_code) ='DISTRICT' GROUP BY GEO_ID) AS GEO ON GEO.GEO_ID=PHYS.GEO_ID where upper(PHYS.geo_code) ='DISTRICT' GROUP BY PHYS.GEO_ID, ID, GEO_CODE, FRANCHISE, time_bucket_id, run_id, GEO_VOL"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "market_writers_cont",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "mav_writers_union",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "market_writers_cont-terr_4w_cont|market_writers_cont-dist_4w_cont|market_writers_cont-terr_8w_cont|market_writers_cont-dist_8w_cont|market_writers_cont-terr_13w_cont|market_writers_cont-dist_13w_cont",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx",
	"procedure_name": "run_log_postgres",
	"procedure_order": 999,
	"procedure_active_flag": "Y",
	"step_id": "run_log_update",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_MAVYRET",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_ALL_PROD",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date,mavyret.run_id,mavyret.market_id,mavyret.segment_name from nbrx_volume_share__nbrx_volume_share_ALL_PROD a  inner join nbrx_volume_share__nbrx_volume_share_MAVYRET mavyret on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_phy_MAVYRET",
	"step_order": 10,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_phy_ALL_PROD",
	"step_order": 11,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('C4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "C4W|C8W|C13W|QTD|YTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PHY",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date,mavyret.run_id,mavyret.market_id,mavyret.segment_name from nbrx_volume_share__nbrx_volume_share_phy_ALL_PROD a  inner join nbrx_volume_share__nbrx_volume_share_phy_MAVYRET mavyret on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_MAVYRET_4_trend",
	"step_order": 19,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_ALL_PROD_4_trend",
	"step_order": 20,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_TREND",
	"step_order": 21,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date,mavyret.run_id,mavyret.market_id,mavyret.segment_name from nbrx_volume_share__nbrx_volume_share_ALL_PROD_4_trend a  inner join nbrx_volume_share__nbrx_volume_share_MAVYRET_4_trend mavyret on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_MAVYRET_4_prev",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_ALL_PROD_4_prev",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PREV",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date, mavyret.run_id, mavyret.market_id, mavyret.segment_name from nbrx_volume_share_pct__nbrx_volume_share_MAVYRET_4_prev mavyret inner join nbrx_volume_share_pct__nbrx_volume_share_ALL_PROD_4_prev a on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PCT",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX'), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume_share__nbrx_volume_share_GEO curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_share_pct__nbrx_volume_share_GEO_PREV prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_SHARE_CHANGE_PCT' as metric_name, (coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) ) as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_phy_MAVYRET_4_prev",
	"step_order": 13,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_phy_ALL_PROD_4_prev",
	"step_order": 14,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "cast('P4W' as STRING)",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "P4W|P8W|P13W|PQTD|PYTD"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PHY_PREV",
	"step_order": 15,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date,mavyret.run_id,mavyret.market_id,mavyret.segment_name from nbrx_volume_share_pct__nbrx_volume_share_phy_ALL_PROD_4_prev a      inner join nbrx_volume_share_pct__nbrx_volume_share_phy_MAVYRET_4_prev mavyret  on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PHY_PCT",
	"step_order": 16,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as( select time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where kpi_group = 'RX'), curr as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,curr.time_bucket_id,data_refresh_date,run_id,market_id,segment_name,time.time_bucket_name as time_bucket_name from nbrx_volume_share__nbrx_volume_share_GEO_PHY curr left join time on curr.time_bucket_id=time.time_bucket_id ), prev as ( select franchise,geo_id,geo_code,product_id,product_name,physician_id,metric_name,metric_value,prev.time_bucket_id,data_refresh_date,run_id,market_id,segment_name, case when time.time_bucket_name='P4W' THEN 'C4W' when time.time_bucket_name='P8W' THEN 'C8W' when time.time_bucket_name='P13W' THEN 'C13W' when time.time_bucket_name='PQTD' THEN 'QTD' when time.time_bucket_name='PYTD' THEN 'YTD' end as time_bucket_name from nbrx_volume_share_pct__nbrx_volume_share_GEO_PHY_PREV prev left join time on prev.time_bucket_id=time.time_bucket_id ) select coalesce(curr.franchise, prev.franchise) as franchise, coalesce(curr.geo_id, prev.geo_id) as geo_id, coalesce(curr.geo_code, prev.geo_code) as geo_code, coalesce(curr.product_id, prev.product_id) as product_id, coalesce(curr.product_name, prev.product_name) as product_name, coalesce(curr.physician_id, prev.physician_id) as physician_id, 'NBRX_VOL_SHARE_CHANGE_PCT' as metric_name, ( coalesce(curr.metric_value, 0) - coalesce(prev.metric_value, 0) ) as metric_value, coalesce(curr.time_bucket_id, 0) as time_bucket_id, coalesce(curr.data_refresh_date, prev.data_refresh_date) as data_refresh_date, coalesce(curr.run_id, prev.run_id) as run_id, coalesce(curr.market_id, prev.market_id) as market_id, coalesce(curr.segment_name, prev.segment_name) as segment_name from curr inner join prev on coalesce(lower(trim(curr.franchise)), '') = coalesce(lower(trim(prev.franchise)), '') and coalesce(lower(trim(curr.product_name)), '') = coalesce(lower(trim(prev.product_name)), '') and coalesce(lower(trim(curr.geo_id)), '') = coalesce(lower(trim(prev.geo_id)), '') and coalesce(lower(trim(curr.geo_code)), '') = coalesce(lower(trim(prev.geo_code)), '') and coalesce(lower(trim(curr.physician_id)), '') = coalesce(lower(trim(prev.physician_id)), '') and date(curr.data_refresh_date) = date(prev.data_refresh_date) and coalesce(lower(trim(curr.run_id)), 0) = coalesce(lower(trim(prev.run_id)), 0) and coalesce(lower(trim(curr.product_id)), 0) = coalesce(lower(trim(prev.product_id)), 0) and coalesce(lower(trim(curr.segment_name)), '') = coalesce(lower(trim(prev.segment_name)), '') and coalesce(lower(trim(curr.market_id)), '') = coalesce(lower(trim(prev.market_id)), '') and coalesce(curr.time_bucket_name,'') = coalesce(prev.time_bucket_name,'')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_MAVYRET_4_trend_phy",
	"step_order": 25,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "1=1",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_ALL_PROD_4_trend_phy",
	"step_order": 26,
	"module_type": "metric",
	"module_name": "NBRX_VOL_SHARE_PHY",
	"params": {
		"metric_type_name_param": "upper(trim(metric_name))='NBRX'",
		"franchise_type_name_param": "upper(trim(franchise_name))='HEPATOLOGY'",
		"select_col_pvt_prdt_geo_param": "franchise_name|abbott_customer_id|metric_name|metric_value|product_name|geo_id|geo_code|product_group|time_bucket_id",
		"time_bucket_id_param": "time_dimension",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id",
		"metric_grain_param": "franchise|metric_name|physician_id|data_refresh_date|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"seg_name_param": "cast(NULL as STRING)",
		"product_id_param": "-1",
		"seg_indicator_param": "1=1",
		"all_prod": "upper(trim(product_name)) not in ('TOTAL_GILEAD','DAA MARKET')",
		"geo_code_filter_param": "region|territory|district|nation",
		"time_dimension_filter_param": "W1|W2|W3|W4|W5|W6|W7|W8|W9|W10|W11|W12|W13|W14|W15|W16|W17|W18|W19|W20|W21|W22|W23|W24|W25|W26"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_GEO_PHY_TREND",
	"step_order": 27,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise,mavyret.geo_id,mavyret.geo_code,mavyret.product_id,mavyret.product_name,mavyret.physician_id,'NBRX_VOL_SHARE_PCT' as metric_name, case when a.metric_value = 0 then 0 else ((mavyret.metric_value\/a.metric_value)*100) end as metric_value, mavyret.time_bucket_id, mavyret.data_refresh_date,mavyret.run_id,mavyret.market_id,mavyret.segment_name from nbrx_volume_share_pct__nbrx_volume_share_ALL_PROD_4_trend_phy a  inner join nbrx_volume_share_pct__nbrx_volume_share_MAVYRET_4_trend_phy mavyret on coalesce(lower(trim(mavyret.franchise)), '') = coalesce(lower(trim(a.franchise)), '') and coalesce(lower(trim(mavyret.geo_code)), '') = coalesce(lower(trim(a.geo_code)), '') and coalesce(lower(trim(mavyret.geo_id)), '') = coalesce(lower(trim(a.geo_id)), '')  and coalesce(lower(trim(mavyret.physician_id)), '') = coalesce(lower(trim(a.physician_id)), '') and date(mavyret.data_refresh_date) = date(a.data_refresh_date) and coalesce(mavyret.run_id, 0) = coalesce(a.run_id, 0) and coalesce(mavyret.time_bucket_id, 0) = coalesce(a.time_bucket_id, 0) and coalesce(lower(trim(mavyret.segment_name)), '') = coalesce(lower(trim(a.segment_name)), '') and coalesce(lower(trim(mavyret.market_id)), '') = coalesce(lower(trim(a.market_id)), '')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_all_union",
	"step_order": 28,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_volume_share-nbrx_volume_share_GEO|nbrx_volume_share-nbrx_volume_share_GEO_PHY|nbrx_volume_share-nbrx_volume_share_GEO_TREND|nbrx_volume_share_pct-nbrx_volume_share_GEO_PHY_TREND|nbrx_volume_share_pct-nbrx_volume_share_GEO_PCT|nbrx_volume_share_pct-nbrx_volume_share_GEO_PHY_PCT",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_metric_load",
	"step_order": 29,
	"module_type": "analytical",
	"module_name": "select_columns",
	"params": {
		"input_table": "nbrx_volume_share_pct-nbrx_volume_share_all_union",
		"columns_to_select": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_all",
	"step_order": 30,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "nbrx_volume_share_pct-nbrx_volume_share_metric_load",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_vol_share",
	"step_order": 31,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select *,cast(null as string) as access_type,cast(-1 as int) as plan_id from nbrx_volume_share_pct__nbrx_volume_share_all"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_prev_union",
	"step_order": 32,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "nbrx_volume_share_pct-nbrx_volume_share_GEO_PREV|nbrx_volume_share_pct-nbrx_volume_share_GEO_PHY_PREV",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_metric_load_prev",
	"step_order": 33,
	"module_type": "analytical",
	"module_name": "select_columns",
	"params": {
		"input_table": "nbrx_volume_share_pct-nbrx_volume_share_prev_union",
		"columns_to_select": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_volume_share_all_prev",
	"step_order": 34,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "nbrx_volume_share_pct-nbrx_volume_share_metric_load_prev",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "nbrx_volume_share_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "nbrx_vol_share_prev",
	"step_order": 35,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select *,cast(null as string) as access_type,cast(-1 as int) as plan_id from nbrx_volume_share_pct__nbrx_volume_share_all_prev"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "new_writers",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "NEW_WRITERS_STEP",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "NEW_WRITERS",
	"params": {
		"metric_type_name_param": "NEW_WRITERS",
		"geo_id_param": "geo_id",
		"geo_code_param": "lower(geo_code)",
		"physician_id_param": "-1",
		"mkt_id_param": "-1",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"time_bucket_id_param": "time_dimension_id as time_bucket_id",
		"select_writers_filter_param": "geo_id|geo_code|physician_id|metric_name|metric_value|product_name|product_id|data_refresh_date|run_id|time_bucket_id|franchise|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "new_writers",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "NEW_WRITERS_STEP_DIST",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "drop_duplicates",
	"params": {
		"input_table": "new_writers-NEW_WRITERS_STEP",
		"key_columns": "geo_id|geo_code|physician_id|metric_name|metric_value|product_name|product_id|data_refresh_date|run_id|time_bucket_id|franchise|segment_name|market_id|plan_id|access_type",
		"maintain_structure": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "new_writers",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "NEW_WRITERS_STEP_ADD_METRIC_NAME",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "new_writers-NEW_WRITERS_STEP_DIST",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal)"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "new_writers",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "NEW_WRITERS_STEP_CUSTOM",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise,metric_name,physician_id, product_id,metric_value,product_name,data_refresh_date,run_id,time_bucket_id,geo_code,case when geo_id = 'NATION' then '-1'  else geo_id end as geo_id ,segment_name, market_id,plan_id,access_type from new_writers__NEW_WRITERS_STEP_ADD_METRIC_NAME"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_mvrt_plan",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_all_prod_plan",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_custom",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_mvrt_plan_geo",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_all_prod_plan_geo",
	"step_order": 5,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_geo_custom",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_mvrt_by_state_access_type",
	"step_order": 7,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_all_prd_by_state_access_type",
	"step_order": 8,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_custom",
	"step_order": 9,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_mvrt_by_state_access_type_geo",
	"step_order": 10,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_all_prd_by_state_access_type_geo",
	"step_order": 11,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_custom_geo",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_mvrt_phy",
	"step_order": 13,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) = 'parity'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_all_prod_phy",
	"step_order": 14,
	"module_type": "metric",
	"module_name": "mrkt_access_share_pct_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) = 'parity'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation','state')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_custom",
	"step_order": 15,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select  mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_final",
	"step_order": 16,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_custom|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_custom|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_custom|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_geo_custom|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_custom_geo",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c4w",
	"step_order": 17,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c4w' and   lower(all_prd.time_bucket_name) = 'c4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p4w",
	"step_order": 18,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p4w' and   lower(all_prd.time_bucket_name) = 'p4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c4w_p4w",
	"step_order": 19,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p4w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c4w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c8w",
	"step_order": 20,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c8w' and   lower(all_prd.time_bucket_name) = 'c8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p8w",
	"step_order": 21,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p8w' and   lower(all_prd.time_bucket_name) = 'p8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c8w_p8w",
	"step_order": 22,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p8w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c8w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c13w",
	"step_order": 23,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c13w' and   lower(all_prd.time_bucket_name) = 'c13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p13w",
	"step_order": 24,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p13w' and   lower(all_prd.time_bucket_name) = 'p13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c13w_p13w",
	"step_order": 25,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p13w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c13w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_qtd",
	"step_order": 26,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'qtd' and   lower(all_prd.time_bucket_name) = 'qtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_pqtd",
	"step_order": 27,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pqtd' and   lower(all_prd.time_bucket_name) = 'pqtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_qtd_pqtd",
	"step_order": 28,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_pqtd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_qtd  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_ytd",
	"step_order": 29,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'ytd' and   lower(all_prd.time_bucket_name) = 'ytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_pytd",
	"step_order": 30,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pytd' and   lower(all_prd.time_bucket_name) = 'pytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_ytd_pytd",
	"step_order": 31,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_pytd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_ytd  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_plan",
	"step_order": 32,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c4w_p4w|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c8w_p8w|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c13w_p13w|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_qtd_pqtd|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_ytd_pytd",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c4w_geo",
	"step_order": 33,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c4w' and   lower(all_prd.time_bucket_name) = 'c4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p4w_geo",
	"step_order": 34,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p4w' and   lower(all_prd.time_bucket_name) = 'p4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c4w_p4w_geo",
	"step_order": 35,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p4w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c4w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c8w_geo",
	"step_order": 36,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c8w' and   lower(all_prd.time_bucket_name) = 'c8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p8w_geo",
	"step_order": 37,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p8w' and   lower(all_prd.time_bucket_name) = 'p8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c8w_p8w_geo",
	"step_order": 38,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p8w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c8w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c13w_geo",
	"step_order": 39,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c13w' and   lower(all_prd.time_bucket_name) = 'c13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_p13w_geo",
	"step_order": 40,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p13w' and   lower(all_prd.time_bucket_name) = 'p13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_c13w_p13w_geo",
	"step_order": 41,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_p13w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_c13w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_qtd_geo",
	"step_order": 42,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'qtd' and   lower(all_prd.time_bucket_name) = 'qtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_pqtd_geo",
	"step_order": 43,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pqtd' and   lower(all_prd.time_bucket_name) = 'pqtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_qtd_pqtd_geo",
	"step_order": 44,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_pqtd_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_qtd_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_ytd_geo",
	"step_order": 45,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'ytd' and   lower(all_prd.time_bucket_name) = 'ytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_pytd_geo",
	"step_order": 46,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_plan_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_plan_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pytd' and   lower(all_prd.time_bucket_name) = 'pytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_plan_ytd_pytd_geo",
	"step_order": 47,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_pytd_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_plan_ytd_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_plan_geo",
	"step_order": 48,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c4w_p4w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c8w_p8w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_c13w_p13w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_qtd_pqtd_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_plan_ytd_pytd_geo",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c4w",
	"step_order": 49,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c4w' and   lower(all_prd.time_bucket_name) = 'c4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p4w",
	"step_order": 50,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p4w' and   lower(all_prd.time_bucket_name) = 'p4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c4w_p4w",
	"step_order": 51,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p4w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c4w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c8w",
	"step_order": 52,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c8w' and   lower(all_prd.time_bucket_name) = 'c8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p8w",
	"step_order": 53,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p8w' and   lower(all_prd.time_bucket_name) = 'p8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c8w_p8w",
	"step_order": 54,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p8w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c8w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c13w",
	"step_order": 55,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c13w' and   lower(all_prd.time_bucket_name) = 'c13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p13w",
	"step_order": 56,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p13w' and   lower(all_prd.time_bucket_name) = 'p13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c13w_p13w",
	"step_order": 57,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p13w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c13w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_qtd",
	"step_order": 58,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'qtd' and   lower(all_prd.time_bucket_name) = 'qtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_pqtd",
	"step_order": 59,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pqtd' and   lower(all_prd.time_bucket_name) = 'pqtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_qtd_pqtd",
	"step_order": 60,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_pqtd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_qtd  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_ytd",
	"step_order": 61,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'ytd' and   lower(all_prd.time_bucket_name) = 'ytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_pytd",
	"step_order": 62,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pytd' and   lower(all_prd.time_bucket_name) = 'pytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_ytd_pytd",
	"step_order": 63,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_pytd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_ytd  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_state_access_type",
	"step_order": 64,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c4w_p4w|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c8w_p8w|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c13w_p13w|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_qtd_pqtd|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_ytd_pytd",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c4w_geo",
	"step_order": 65,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c4w' and   lower(all_prd.time_bucket_name) = 'c4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p4w_geo",
	"step_order": 66,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p4w' and   lower(all_prd.time_bucket_name) = 'p4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c4w_p4w_geo",
	"step_order": 67,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p4w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c4w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c8w_geo",
	"step_order": 68,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c8w' and   lower(all_prd.time_bucket_name) = 'c8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p8w_geo",
	"step_order": 69,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p8w' and   lower(all_prd.time_bucket_name) = 'p8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c8w_p8w_geo",
	"step_order": 70,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p8w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c8w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c13w_geo",
	"step_order": 71,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c13w' and   lower(all_prd.time_bucket_name) = 'c13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_p13w_geo",
	"step_order": 72,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p13w' and   lower(all_prd.time_bucket_name) = 'p13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_c13w_p13w_geo",
	"step_order": 73,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_p13w_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_c13w_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_qtd_geo",
	"step_order": 74,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'qtd' and   lower(all_prd.time_bucket_name) = 'qtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_pqtd_geo",
	"step_order": 75,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pqtd' and   lower(all_prd.time_bucket_name) = 'pqtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_qtd_pqtd_geo",
	"step_order": 76,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_pqtd_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_qtd_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_ytd_geo",
	"step_order": 77,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'ytd' and   lower(all_prd.time_bucket_name) = 'ytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_pytd_geo",
	"step_order": 78,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prd_by_state_access_type_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_by_state_access_type_geo mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pytd' and   lower(all_prd.time_bucket_name) = 'pytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_state_access_type_ytd_pytd_geo",
	"step_order": 79,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_pytd_geo all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_state_access_type_ytd_geo  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_state_access_type_geo",
	"step_order": 80,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c4w_p4w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c8w_p8w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_c13w_p13w_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_qtd_pqtd_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_state_access_type_ytd_pytd_geo",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c4w",
	"step_order": 81,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c4w' and   lower(all_prd.time_bucket_name) = 'c4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_p4w",
	"step_order": 82,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p4w' and   lower(all_prd.time_bucket_name) = 'p4w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c4w_p4w",
	"step_order": 83,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_p4w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_c4w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c8w",
	"step_order": 85,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c8w' and   lower(all_prd.time_bucket_name) = 'c8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_p8w",
	"step_order": 86,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p8w' and   lower(all_prd.time_bucket_name) = 'p8w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c8w_p8w",
	"step_order": 87,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_p8w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_c8w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c13w",
	"step_order": 88,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'c13w' and   lower(all_prd.time_bucket_name) = 'c13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_p13w",
	"step_order": 89,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'p13w' and   lower(all_prd.time_bucket_name) = 'p13w'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_c13w_p13w",
	"step_order": 90,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_p13w all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_c13w  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_qtd",
	"step_order": 91,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'qtd' and   lower(all_prd.time_bucket_name) = 'qtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_pqtd",
	"step_order": 92,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pqtd' and   lower(all_prd.time_bucket_name) = 'pqtd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_qtd_pqtd",
	"step_order": 93,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_pqtd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_qtd mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_ytd",
	"step_order": 94,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as curr_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'ytd' and   lower(all_prd.time_bucket_name) = 'ytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_pytd",
	"step_order": 95,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast((mavyret.metric_value\/all_prd.metric_value) * 100 as decimal(32,2)) end  as prev_metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_all_prod_phy all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_mvrt_phy mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id where lower(mavyret.time_bucket_name) = 'pytd' and   lower(all_prd.time_bucket_name) = 'pytd'"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_phy_ytd_pytd",
	"step_order": 96,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select mavyret.franchise, mavyret.geo_id, mavyret.geo_code,  'MRKT_ACCESS_SHARE_CHANGE_PCT' as metric_name, mavyret.curr_metric_value - all_prd.prev_metric_value as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id from mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_pytd all_prd inner join mrkt_access_share_pct_proc__mrkt_access_share_pct_phy_ytd  mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.access_type=all_prd.access_type and mavyret.plan_id=all_prd.plan_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_phy",
	"step_order": 97,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_c4w_p4w|mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_c8w_p8w|mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_c13w_p13w|mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_qtd_pqtd|mrkt_access_share_pct_proc-mrkt_access_share_pct_phy_ytd_pytd",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_geo_phy_channel",
	"step_order": 98,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "SELECT CUST.franchise,ID as physician_id,ZIP_TERR.TERRITORY_NUMBER as geo_id,'territory' as geo_code , 'MRKT_ACCESS_SHARE_PCT' as metric_name, -1 as product_id, 'MAVYRET' as product_name, now() as data_refresh_date, run_log.run_id, dim_time.time_bucket_id, '-1' as market_id, -1 as plan_id, Null as segment_name, Null as access_type ,case when rx.channel in ('FFS+MGD','FFS','MGD') THEN 'MEDICAID' ELSE rx.CHANNEL END AS metric_type_group, COALESCE(cast(SUM( case when prd.product_name='MAVYRET' then metric_value end) \/SUM(metric_value) *100 as decimal(10,2)),0.00) as metric_value FROM (SELECT DISTINCT time_dimension_id, ABBOTT_CUSTOMER_ID as ID,ZIP_CODE,SOURCE_PLAN_NAME,ACCOUNT_NAME,product_name, SOURCE_PLAN_PAYMENT_TYPE_NAME as channel,effective_date, mavyret_access_level_indicator, metric_value FROM abv_hcp360_sales_marketing_dm.rapper_parity_report_fact_tbl WHERE lower(mavyret_access_level_indicator)<>'unknown') RX LEFT OUTER JOIN ( select distinct cast(ALIGNMENT_DATE as date),ZIP_CODE,territory_number from abv_hcp360_sales_marketing_dm.dim_geo_to_terr_align_tbl where cast(ALIGNMENT_DATE as date) in (select max(cast(ALIGNMENT_DATE as date)) from abv_hcp360_sales_marketing_dm.dim_geo_to_terr_align_tbl where trim(DDS_ACTIVE_FLAG)='Y' and unit_code in ('HCV1','HCV3')) and trim(DDS_ACTIVE_FLAG)='Y' and unit_code in ('HCV1','HCV3') ) ZIP_TERR ON RX.ZIP_CODE=ZIP_TERR.ZIP_CODE inner JOIN ( SELECT DISTINCT ABBOTT_CUSTOMER_ID, franchise_name as franchise FROM abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl WHERE UNIVERSE_NAME='1VIEW' AND SALES_FORCE_CODE IN ('HCV1','HCV3' ) and pdrp_flag = 'N') CUST ON CUST.ABBOTT_CUSTOMER_ID=RX.ID inner join ( select start_date, kpi_group, end_date, time_dimension_id, time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(time_bucket_name) in ('W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11','W12', 'W13' ) and lower(kpi_group) = 'parity_share' ) dim_time on rx.time_dimension_id = dim_time.time_dimension_id inner join abv_hcp360_sales_marketing_dm.dim_market_tbl prd on rx.product_name=prd.product_name and lower(prd.product_group) = 'daa market' and lower(prd.product_group_type) = 'product' inner join abv_hcp360_sales_marketing_dm.dim_market_access_plan_tbl dim_mkt on coalesce(lower((rx.account_name)), '') = coalesce(lower((dim_mkt.account)), '') and coalesce(lower((rx.mavyret_access_level_indicator)),'') = coalesce(lower((dim_mkt.access_type)),'') and coalesce((rx.effective_date), '') = coalesce((dim_mkt.effective_date),'') and coalesce(lower((rx.channel)),'') = coalesce(lower((dim_mkt.channel)),'') and coalesce(lower((rx.source_plan_name)),'') = coalesce(lower((dim_mkt.plan)),'') inner join ( SELECT franchise, max(id) AS run_id FROM abv_hcp360_sales_marketing_dm.run_log WHERE upper(franchise) = 'HEPATOLOGY' GROUP BY franchise ) run_log on run_log.franchise = CUST.franchise GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_pct_geo_channel",
	"step_order": 99,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with rep_dim_gio as ( select distinct rep.franchise as franchise_name, zip_code, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep inner join abv_hcp360_sales_marketing_dm.dim_geo_to_terr_align_tbl dim_geo on DIM_GEO.TERRITORY_NUMBER = REP.TERRITORY_NUMBER where lower(rep.franchise)='hepatology' and trim(upper(rep.sales_force)) in ('HCV1', 'HCV3') and rep.region in ('HA','HB','HC') and upper(rep.territory_type_id) = 'REP' union all select distinct rep.franchise as franchise_name, zip_code, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep inner join abv_hcp360_sales_marketing_dm.dim_geo_to_terr_align_tbl dim_geo on DIM_GEO.TERRITORY_NUMBER = REP.TERRITORY_NUMBER where lower(rep.franchise)='hepatology' and trim(upper(rep.sales_force))='HCV1' and rep.region in ('HA','HB','HC') and upper(rep.territory_type_id) = 'REP' union all select distinct rep.franchise as franchise_name, zip_code, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep inner join abv_hcp360_sales_marketing_dm.dim_geo_to_terr_align_tbl dim_geo on DIM_GEO.TERRITORY_NUMBER = REP.TERRITORY_NUMBER where lower(rep.franchise)='hepatology' and trim(upper(rep.sales_force))='HCV1' and rep.region in ('HA','HB','HC') and upper(rep.territory_type_id) = 'REP' ), dim_time as ( select start_date, kpi_group, end_date, time_dimension_id, time_bucket_name, time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(time_bucket_name) in ('W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10', 'W11','W12', 'W13' ) and lower(kpi_group) = 'parity_share' ), cust_dim as ( select distinct abbott_customer_id,zip_code from abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl ) ,run_log AS ( SELECT franchise, max(id) AS run_id FROM abv_hcp360_sales_marketing_dm.run_log WHERE upper(franchise) = 'HEPATOLOGY' GROUP BY franchise ), mavyret as ( select franchise , physician_id , product_id , metric_name , sum(metric_value) as metric_value , product_name , data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type ,metric_type_group from ( select rep_dim_gio.franchise_name as franchise, 'MRKT_ACCESS_SHARE_PCT' as metric_name, -1 as physician_id, -1 as product_id, fact.metric_value as metric_value, fact.product_name as product_name, now() as data_refresh_date, run_log.run_id as run_id, dim_time.time_bucket_id as time_bucket_id, rep_dim_gio.geo_id as geo_id, rep_dim_gio.geo_code as geo_code, Null as segment_name, -1 as market_id, Null as access_type, -1 as plan_id , case when dim_mkt.channel in ('FFS','MGD','FFS+MGD') then 'MEDICAID' else dim_mkt.channel end as metric_type_group from abv_hcp360_sales_marketing_dm.rapper_parity_report_fact_tbl fact inner join rep_dim_gio on fact.zip_code=rep_dim_gio.zip_code inner join abv_hcp360_sales_marketing_dm.dim_market_tbl prd on fact.product_name=prd.product_name inner join abv_hcp360_sales_marketing_dm.dim_market_access_plan_tbl dim_mkt on coalesce(lower((fact.account_name)), '') = coalesce(lower((dim_mkt.account)), '') and coalesce(lower((fact.mavyret_access_level_indicator)),'') = coalesce(lower((dim_mkt.access_type)),'') and coalesce((fact.effective_date), '') = coalesce((dim_mkt.effective_date),'') and coalesce(lower((fact.source_plan_payment_type_name)),'') = coalesce(lower((dim_mkt.channel)),'') and coalesce(lower((fact.source_plan_name)),'') = coalesce(lower((dim_mkt.plan)),'') inner join dim_time on fact.time_dimension_id = dim_time.time_dimension_id inner join run_log on run_log.franchise = rep_dim_gio.franchise_name where lower(fact.mavyret_access_level_indicator) != 'unknown' and lower(prd.product_group) = 'daa market' and lower(prd.product_group_type) = 'product' and lower(fact.product_name) = 'mavyret' and lower(rep_dim_gio.geo_code) in ('territory', 'region', 'district') )a group by franchise , physician_id , product_id , metric_name , product_name , data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type,metric_type_group ), All_prod as ( select franchise , physician_id , metric_name , sum(metric_value) as metric_value , data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type, metric_type_group from ( select rep_dim_gio.franchise_name as franchise, 'MRKT_ACCESS_SHARE_PCT' as metric_name, -1 as physician_id, fact.metric_value as metric_value, now() as data_refresh_date, run_log.run_id as run_id, dim_time.time_bucket_id as time_bucket_id, rep_dim_gio.geo_id as geo_id, rep_dim_gio.geo_code as geo_code, Null as segment_name, -1 as market_id, Null as access_type, -1 as plan_id , case when dim_mkt.channel in ('FFS','MGD','FFS+MGD') then 'MEDICAID' else dim_mkt.channel end as metric_type_group from abv_hcp360_sales_marketing_dm.rapper_parity_report_fact_tbl fact inner join rep_dim_gio on fact.zip_code=rep_dim_gio.zip_code inner join abv_hcp360_sales_marketing_dm.dim_market_tbl prd on fact.product_name=prd.product_name inner join abv_hcp360_sales_marketing_dm.dim_market_access_plan_tbl dim_mkt on fact.account_name = dim_mkt.account and fact.mavyret_access_level_indicator = dim_mkt.access_type and fact.effective_date = dim_mkt.effective_date and fact.source_plan_payment_type_name = dim_mkt.channel and fact.source_plan_name = dim_mkt.plan inner join dim_time on fact.time_dimension_id = dim_time.time_dimension_id inner join run_log on run_log.franchise = rep_dim_gio.franchise_name where lower(fact.mavyret_access_level_indicator) != 'unknown' and lower(prd.product_group) = 'daa market' and lower(prd.product_group_type) = 'product' and lower(rep_dim_gio.geo_code) in ('territory', 'region', 'district') )b group by franchise , physician_id , metric_name , data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type,metric_type_group ) select mavyret.franchise, mavyret.geo_code, mavyret.geo_id, 'MRKT_ACCESS_SHARE_PCT' as metric_name, case when all_prd.metric_value = 0 then 0.00 when mavyret.metric_value = 0 then 0.00 when all_prd.metric_value is null then 0.00 when mavyret.metric_value is null then 0.00 else cast( ( mavyret.metric_value \/ all_prd.metric_value ) * 100 as decimal(32,2)) end as metric_value, mavyret.physician_id, mavyret.product_id, mavyret.product_name, mavyret.data_refresh_date, mavyret.run_id, mavyret.time_bucket_id, mavyret.market_id, mavyret.segment_name, mavyret.access_type, mavyret.plan_id, mavyret.metric_type_group from All_prod all_prd inner join mavyret on mavyret.franchise=all_prd.franchise and mavyret.geo_code=all_prd.geo_code and mavyret.geo_id=all_prd.geo_id and mavyret.metric_name=all_prd.metric_name and mavyret.physician_id=all_prd.physician_id and mavyret.data_refresh_date=all_prd.data_refresh_date and mavyret.run_id=all_prd.run_id and mavyret.time_bucket_id=all_prd.time_bucket_id and mavyret.plan_id=all_prd.plan_id and mavyret.metric_type_group=all_prd.metric_type_group where mavyret.metric_type_group not in ('CASH','ASSISTANCE PROGRAMS')"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "mrkt_access_share_pct_proc",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "mrkt_access_share_change_pct_final",
	"step_order": 100,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "mrkt_access_share_pct_proc-mrkt_access_share_change_pct_phy|mrkt_access_share_pct_proc-mrkt_access_share_change_pct_state_access_type|mrkt_access_share_pct_proc-mrkt_access_share_change_pct_plan|mrkt_access_share_pct_proc-mrkt_access_share_change_pct_plan_geo|mrkt_access_share_pct_proc-mrkt_access_share_change_pct_state_access_type_geo|mrkt_access_share_pct_proc-mrkt_access_share_pct_geo_phy_channel|mrkt_access_share_pct_proc-mrkt_access_share_pct_geo_channel",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_mvrt_plan_geo",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "dispensed_claims",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"metric_grain_param": "franchise|physician_id|product_id|metric_name|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_plan_geo",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "dispensed_claims",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|access_type|source_plan_name|time_bucket_name",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_plan_final1",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select \tmavyret.franchise,  mavyret.geo_code,  mavyret.geo_id,           'DISPENSED_CLAIMS' as metric_name,    case when mavyret.metric_value is null then 0.00 else cast(mavyret.metric_value as decimal(32,2)) end as metric_value,           mavyret.physician_id,           mavyret.product_id,           mavyret.product_name,           mavyret.data_refresh_date,           mavyret.run_id,           mavyret.time_bucket_id,    mavyret.market_id,    mavyret.segment_name,    mavyret.access_type,    mavyret.plan_id , Null as metric_type_group          from dispensed_claims_proc__dispensed_claims_mvrt_plan_geo as mavyret union all  select  market.franchise,  market.geo_code,  market.geo_id,           'DISPENSED_CLAIMS' as metric_name,    case when market.metric_value is null then 0.00 else cast(market.metric_value as decimal(32,2)) end as metric_value,           market.physician_id,           -1 as product_id,           'DAA MARKET' as product_name,           market.data_refresh_date,           market.run_id,           market.time_bucket_id,    market.market_id,    market.segment_name,    market.access_type,  market.plan_id, Null as metric_type_group  from dispensed_claims_proc__dispensed_claims_all_prod_plan_geo as market"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_mvrt_plan_phy",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "dispensed_claims_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "lower(trim(product_name))='mavyret'",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_mvrt_plan_phy_custom",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise , physician_id , product_id , metric_name , sum( metric_value) as metric_value , product_name ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type from dispensed_claims_proc__dispensed_claims_mvrt_plan_phy group by franchise , physician_id , product_id , metric_name , product_name ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_plan_phy",
	"step_order": 6,
	"module_type": "metric",
	"module_name": "dispensed_claims_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "mavyret_acces_lvl_indctr_1view",
		"plan_id_param": "plan_id",
		"prdct_name_filter_param": "1=1",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_plan_phy_custom",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise , physician_id  , metric_name , sum( metric_value) as metric_value  ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type from dispensed_claims_proc__dispensed_claims_all_prod_plan_phy group by franchise , physician_id  , metric_name  ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_plan_final2",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select \tdistinct mavyret.franchise,  mavyret.geo_code,  mavyret.geo_id,           'DISPENSED_CLAIMS' as metric_name,    case when mavyret.metric_value is null then 0.00 else cast(mavyret.metric_value as decimal(32,2)) end as metric_value,           mavyret.physician_id,           mavyret.product_id,           mavyret.product_name,           mavyret.data_refresh_date,           mavyret.run_id,           mavyret.time_bucket_id,    mavyret.market_id,    mavyret.segment_name,    mavyret.access_type,    mavyret.plan_id  ,  Null as metric_type_group         from dispensed_claims_proc__dispensed_claims_mvrt_plan_phy_custom as mavyret union all  select  distinct market.franchise,  market.geo_code,  market.geo_id,           'DISPENSED_CLAIMS' as metric_name,    case when market.metric_value is null then 0.00 else cast(market.metric_value as decimal(32,2)) end as metric_value,           market.physician_id,           -1 as product_id,           'DAA MARKET' as product_name,           market.data_refresh_date,           market.run_id,           market.time_bucket_id,    market.market_id,    market.segment_name,    market.access_type,  market.plan_id,    Null as metric_type_group  from dispensed_claims_proc__dispensed_claims_all_prod_plan_phy_custom as market"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_top_plan_ter",
	"step_order": 9,
	"module_type": "metric",
	"module_name": "dispensed_claims_top_plan",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|source_plan_name|time_bucket_name|metric_type_group|access_type",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','district','region')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"metric_type_group_param": "plan",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "-1"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_top_plan_final1",
	"step_order": 10,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select        market.franchise      , market.geo_id      , market.geo_code      , 'DISPENSED_CLAIMS' as metric_name      , case               when market.metric_value is null                      then 0.00                      else cast(market.metric_value as decimal(32,2))        end as metric_value      , market.physician_id \t , -1           as product_id \t , 'DAA MARKET' as product_name      , market.data_refresh_date      , market.run_id      , market.time_bucket_id      , market.market_id      , market.segment_name      , market.access_type      , market.plan_id      , market.metric_type_group           from        dispensed_claims_proc__dispensed_claims_all_prod_top_plan_ter market"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_top_plan_phy",
	"step_order": 11,
	"module_type": "metric",
	"module_name": "dispensed_claims_top_plan_phy",
	"params": {
		"mavyret_access_level_indicator_param": "lower(trim(mavyret_access_level_indicator)) != 'unknown'",
		"product_group_filter_param": "lower(trim(product_group)) = 'daa market'",
		"product_group_type_filter_param": "lower(trim(product_group_type)) = 'product'\t",
		"add_clm_mavyret_access_level_indicator_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"prdct_name_filter_param": "1=1",
		"metric_grain_param": "franchise|physician_id|metric_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|market_id|segment_name|plan_id|source_plan_name|time_bucket_name|metric_type_group",
		"geo_code_type_filter_param": "lower(trim(geo_code)) in ('territory','region','district','nation')",
		"time_bucket_id_param": "time_bucket_id",
		"product_id_param": "-1",
		"metric_type_group_param": "plan",
		"product_name_param": "product_name",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"physician_id_param": "abbott_customer_id"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_all_prod_top_plan_phy_custom",
	"step_order": 12,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise , metric_type_group,physician_id , metric_name , sum( metric_value) as metric_value  ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type from dispensed_claims_proc__dispensed_claims_all_prod_top_plan_phy group by franchise , physician_id  , metric_name  ,data_refresh_date , run_id , time_bucket_id , geo_id , geo_code , market_id , segment_name, plan_id, access_type,metric_type_group"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_top_plan_final2",
	"step_order": 13,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select        market.franchise      , market.geo_id      , market.geo_code      , 'DISPENSED_CLAIMS' as metric_name      , case               when market.metric_value is null                      then 0.00                      else cast(market.metric_value as decimal(32,2))        end as metric_value      , market.physician_id \t , -1           as product_id \t , 'DAA MARKET' as product_name      , market.data_refresh_date      , market.run_id      , market.time_bucket_id      , market.market_id      , market.segment_name      , market.access_type      , market.plan_id      , market.metric_type_group           from        dispensed_claims_proc__dispensed_claims_all_prod_top_plan_phy_custom market"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_geo_plan_region_district_custom",
	"step_order": 14,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with rep_dim_gio as      (             SELECT DISTINCT                    CUST.ZIP_CODE                  , ABBOTT_CUSTOMER_ID                  , CUST.DISTRICT as geo_id                  , 'district'    as geo_code                  , CUST.franchise_name             FROM                    abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl CUST                    JOIN                           abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP                           ON                                  CUST.TERRITORY_NUMBER=REP.TERRITORY_NUMBER             WHERE                    UNIVERSE_NAME            ='1VIEW'                    AND REP.TERRITORY_TYPE_ID='REP'             union all             SELECT DISTINCT                    CUST.ZIP_CODE                  , ABBOTT_CUSTOMER_ID                  , CUST.region as geo_id                  , 'region'    as geo_Code                  , CUST.franchise_name             FROM                    abv_hcp360_sales_marketing_dm.dim_physician_geo_universe_tbl CUST                    JOIN                           abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP                           ON                                  CUST.TERRITORY_NUMBER=REP.TERRITORY_NUMBER             WHERE                    UNIVERSE_NAME            ='1VIEW'                    AND REP.TERRITORY_TYPE_ID='REP'      )    , dim_time as      (             select    distinct                    start_date                  , kpi_group                  , end_date                  , time_dimension_id                  , time_bucket_name                  , time_dimension_id as time_bucket_id             from                    abv_hcp360_sales_marketing_dm.time_dimension_tbl             where                    lower(time_bucket_name) in ( 'c4w'                                              ,'c8w'                                              ,'c13w'                                              , 'qtd'                                              ,'ytd'                                              , 'p4w'                                              ,'p8w'                                              ,'p13w'                                              , 'pqtd'                                              ,'pytd' )                    and lower(kpi_group) = 'parity_share'      )    , prod_dim as      (             select distinct                    product_group                  , product_group_type                  , product_name                  , franchise_name as franchise             from                    abv_hcp360_sales_marketing_dm.dim_market_tbl      )    , run_log as      (               select                        franchise                      , max(id) as run_id               from                        abv_hcp360_sales_marketing_dm.run_log               where                        upper(franchise) = 'HEPATOLOGY'               group by                        franchise      )    , mavyret as      (               select                        franchise                      , -1 as physician_id                      , metric_name                      , sum( metric_value ) as metric_value                      , product_name                      , product_id                      , plan                      , plan_id                      , data_refresh_date                      , run_id                      , time_bucket_id                      , geo_id                      , geo_code                      , market_id                      , segment_name                      , access_type               from                        (                                   select                                              rep_dim_gio.franchise_name          as franchise                                            , 'DISPENSED_CLAIMS'                  as metric_name                                            , rep_dim_gio.abbott_customer_id      as physician_id                                            , -1                                  as product_id                                            , fact.metric_value                   as metric_value                                            , fact.product_name                   as product_name                                            , now()                               as data_refresh_date                                            , run_log.run_id                      as run_id                                            , dim_time.time_bucket_id             as time_bucket_id                                            , rep_dim_gio.geo_id                  as geo_id                                            , rep_dim_gio.geo_code                as geo_code                                            , Null                                as segment_name                                            , -1                                  as market_id                                            , fact.mavyret_access_level_indicator as access_type                                            , dim_mkt.plan_id                     as plan_id                                            , fact.source_plan_name               as plan                                            , fact.ZIP_CODE                                            , ACCOUNT_NAME                                            , SOURCE_PLAN_PAYMENT_TYPE_NAME                                            , fact.effective_date                                            , fact.state_code                                   from                                              abv_hcp360_sales_marketing_dm.rapper_parity_report_fact_tbl fact                                              inner join                                                         rep_dim_gio                                                         on                                                                    fact.abbott_customer_id = rep_dim_gio.abbott_customer_id                                                                    and fact.zip_code       = rep_dim_gio.zip_code                                              inner join                                                         run_log                                                         on                                                                    run_log.franchise = rep_dim_gio.franchise_name                                              inner join                                                         prod_dim as prd                                                         on                                                                    fact.product_name=prd.product_name                                              inner join                                                         abv_hcp360_sales_marketing_dm.dim_market_access_plan_tbl dim_mkt                                                         on                                                                    coalesce(lower((fact.account_name)), '')                      = coalesce(lower((dim_mkt.account)), '')                                                                    and coalesce(lower((fact.mavyret_access_level_indicator)),'') = coalesce(lower((dim_mkt.access_type)),'')                                                                    and coalesce((fact.effective_date), '')                       = coalesce((dim_mkt.effective_date),'')                                                                    and coalesce(lower((fact.source_plan_payment_type_name)),'')  = coalesce(lower((dim_mkt.channel)),'')                                                                    and coalesce(lower((fact.source_plan_name)),'')               = coalesce(lower((dim_mkt.plan)),'')                                              inner join                                                         dim_time                                                         on                                                                    fact.time_dimension_id = dim_time.time_dimension_id                                   where                                              lower(fact.mavyret_access_level_indicator) != 'unknown'                                              and lower(prd.product_group)                = 'daa market'                                              and lower(prd.product_group_type)           = 'product'                                              and lower(fact.product_name)                = 'mavyret'                                              and lower(rep_dim_gio.geo_code) in ( 'region'                                                                                , 'district')                        )                        a               group by                        franchise                      , physician_id                      , metric_name                      , product_name                      , product_id                      , plan                      , plan_id                      , data_refresh_date                      , run_id                      , time_bucket_id                      , geo_id                      , geo_code                      , market_id                      , segment_name                      , access_type      )    , daa_market as      (               select                        franchise                      , -1 as physician_id                      , metric_name                      , sum( metric_value ) as metric_value                      , plan                      , plan_id                      , data_refresh_date                      , run_id                      , time_bucket_id                      , geo_id                      , geo_code                      , market_id                      , segment_name                      , access_type               from                        (                                   select                                              rep_dim_gio.franchise_name          as franchise                                            , 'DISPENSED_CLAIMS'                  as metric_name                                            , rep_dim_gio.abbott_customer_id      as physician_id                                            , -1                                  as product_id                                            , fact.metric_value                   as metric_value                                            , fact.product_name                   as product_name                                            , now()                               as data_refresh_date                                            , run_log.run_id                      as run_id                                            , dim_time.time_bucket_id             as time_bucket_id                                            , rep_dim_gio.geo_id                  as geo_id                                            , rep_dim_gio.geo_code                as geo_code                                            , Null                                as segment_name                                            , -1                                  as market_id                                            , fact.mavyret_access_level_indicator as access_type                                            , dim_mkt.plan_id                     as plan_id                                            , fact.source_plan_name               as plan                                            , fact.ZIP_CODE                                            , ACCOUNT_NAME                                            , SOURCE_PLAN_PAYMENT_TYPE_NAME                                            , fact.effective_date                                            , fact.state_code                                   from                                              abv_hcp360_sales_marketing_dm.rapper_parity_report_fact_tbl fact                                              inner join                                                         rep_dim_gio                                                         on                                                                    fact.abbott_customer_id = rep_dim_gio.abbott_customer_id                                                                    and fact.zip_code       = rep_dim_gio.zip_code                                              inner join                                                         run_log                                                         on                                                                    run_log.franchise = rep_dim_gio.franchise_name                                              inner join                                                         prod_dim as prd                                                         on                                                                    fact.product_name=prd.product_name                                              inner join                                                         abv_hcp360_sales_marketing_dm.dim_market_access_plan_tbl dim_mkt                                                         on                                                                    coalesce(lower((fact.account_name)), '')                      = coalesce(lower((dim_mkt.account)), '')                                                                    and coalesce(lower((fact.mavyret_access_level_indicator)),'') = coalesce(lower((dim_mkt.access_type)),'')                                                                    and coalesce((fact.effective_date), '')                       = coalesce((dim_mkt.effective_date),'')                                                                    and coalesce(lower((fact.source_plan_payment_type_name)),'')  = coalesce(lower((dim_mkt.channel)),'')                                                                    and coalesce(lower((fact.source_plan_name)),'')               = coalesce(lower((dim_mkt.plan)),'')                                              inner join                                                         dim_time                                                         on                                                                    fact.time_dimension_id = dim_time.time_dimension_id                                   where                                              lower(fact.mavyret_access_level_indicator) != 'unknown'                                              and lower(prd.product_group)                = 'daa market'                                              and lower(prd.product_group_type)           = 'product'                                              and lower(rep_dim_gio.geo_code) in ( 'region'                                                                                , 'district')                        )                        a               group by                        franchise                      , physician_id                      , metric_name                      , plan                      , plan_id                      , data_refresh_date                      , run_id                      , time_bucket_id                      , geo_id                      , geo_code                      , market_id                      , segment_name                      , access_type      ) select        mavyret.franchise      , mavyret.geo_code      , mavyret.geo_id      , 'DISPENSED_CLAIMS' as metric_name      , sum(case               when mavyret.metric_value is null                      then 0.00                      else cast(mavyret.metric_value as decimal(32,2))        end) as metric_value      , mavyret.physician_id      , mavyret.product_id      , mavyret.product_name      , mavyret.data_refresh_date      , mavyret.run_id      , mavyret.time_bucket_id      , mavyret.market_id      , mavyret.segment_name      , mavyret.access_type      , mavyret.plan_id      , Null as metric_type_group from        mavyret as mavyret \t   group by 1,2,3,4,6,7,8,9,10,11,12,13,14,15,16 union select  franchise      , geo_code      , geo_id      , metric_name      ,  metric_value      , physician_id      , -1 as product_id      , product_name      , data_refresh_date      , run_id      , time_bucket_id      , market_id      , segment_name      , access_type      , plan_id      , metric_type_group from      (select        market.franchise      , market.geo_code      , market.geo_id      , 'DISPENSED_CLAIMS' as metric_name      , sum(case               when market.metric_value is null                      then 0.00                      else cast(market.metric_value as decimal(32,2))        end) as metric_value      , market.physician_id          , 'DAA MARKET' as product_name      , market.data_refresh_date      , market.run_id      , market.time_bucket_id      , market.market_id      , market.segment_name      , market.access_type      , market.plan_id      , Null as metric_type_group from        daa_market as market \t   group by 1,2,3,4,6,7,8,9,10,11,12,13,14,15)a"
	}
}, {
	"workflow_name": "nbrx_share",
	"procedure_name": "dispensed_claims_proc",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "dispensed_claims_union",
	"step_order": 15,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "dispensed_claims_proc-dispensed_claims_top_plan_final1|dispensed_claims_proc-dispensed_claims_top_plan_final2|dispensed_claims_proc-dispensed_claims_plan_final1|dispensed_claims_proc-dispensed_claims_plan_final2|dispensed_claims_proc-dispensed_claims_geo_plan_region_district_custom",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "isa_util_pct",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "all_geo_mtd_qtd_ytd",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='REP_ACTIVITY' and time_bucket_name in ('MTD','QTD','YTD','M1','M2','M3','M4','M5','M6','M7','M8','M9','M10','M11','M12') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select calls.FRANCHISE, calls.REGION, calls.DISTRICT, calls.TERRITORY_NUMBER, calls.call_activity_date, calls.ISA_CALL_FLAG, calls.PRESCRIBER_STATUS, calls.roll_up_eligible_flag, calls.external_call_activity_id, time.time_bucket_id from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl calls inner join time on to_date(calls.call_activity_date) >= to_date(time.start_date) and to_date(calls.call_activity_date) <= to_date(time.end_date) where calls.franchise='Hepatology' and calls.sales_force_code in ('HCV1','HCV3') ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'ISA_UTIL_PCT' as METRIC_NAME, cast(nvl(METRIC_VALUE, 0) as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from (SELECT FRANCHISE, fact.TERRITORY_NUMBER as GEO_ID, 'territory' as GEO_CODE, cast(count(distinct case when fact.ISA_CALL_FLAG='Y' and fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end) *100\/ NULLIF(count( distinct case when fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end),0) as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.TERRITORY_NUMBER, TIME_BUCKET_ID UNION SELECT FRANCHISE, fact.DISTRICT as GEO_ID, 'district' as GEO_CODE, cast(count(distinct case when fact.ISA_CALL_FLAG='Y' and fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end) *100\/ NULLIF(count( distinct case when fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end),0) as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.DISTRICT, TIME_BUCKET_ID UNION SELECT FRANCHISE, fact.REGION as GEO_ID, 'region' as GEO_CODE, cast(count(distinct case when fact.ISA_CALL_FLAG='Y' and fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end) *100\/ NULLIF(count( distinct case when fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end),0) as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.REGION, TIME_BUCKET_ID UNION SELECT FRANCHISE, cast(-1 as string) as GEO_ID, 'nation' as GEO_CODE, cast(count(distinct case when fact.ISA_CALL_FLAG='Y' and fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end) *100\/ NULLIF(count( distinct case when fact.PRESCRIBER_STATUS= 'Y' then fact.external_call_activity_id end),0) as decimal(10,2)) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY fact.FRANCHISE, TIME_BUCKET_ID) base inner join run_log on base.franchise = run_log.franchise"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "isa_util_avg_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "isa_util_avg_pct_district_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'REP_ACTIVITY' and time_bucket_name in ('YTD', 'QTD', 'MTD','M1','M2','M3','M4','M5','M6','M7','M8','M9','M10','M11','M12') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ), fact as ( select calls.FRANCHISE, calls.REGION, calls.DISTRICT, calls.TERRITORY_NUMBER, calls.call_activity_date, calls.ISA_CALL_FLAG, calls.PRESCRIBER_STATUS, calls.roll_up_eligible_flag, calls.external_call_activity_id, time.time_bucket_id, start_date, end_date from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl calls JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON calls.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP') inner join time on to_date(calls.call_activity_date) >= to_date(time.start_date) and to_date(calls.call_activity_date) <= to_date(time.end_date) where calls.franchise = 'Hepatology' and calls.sales_force_code in ('HCV1', 'HCV3') ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'ISA_UTIL_AVG_PCT' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, 'DISTRICT' as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from ( SELECT FRANCHISE, fact.REGION as GEO_ID, 'region' as GEO_CODE, cast( count( distinct case when fact.ISA_CALL_FLAG = 'Y' and fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ) * 100 \/ NULLIF( count( distinct case when fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ), 0 ) as decimal(10, 2) ) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.REGION, TIME_BUCKET_ID UNION SELECT FRANCHISE, cast(-1 as string) as GEO_ID, 'nation' as GEO_CODE, cast( count( distinct case when fact.ISA_CALL_FLAG = 'Y' and fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ) * 100 \/ NULLIF( count( distinct case when fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ), 0 ) as decimal(10, 2) ) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY fact.FRANCHISE, TIME_BUCKET_ID)base inner join run_log on base.franchise = run_log.franchise"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "isa_util_avg_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "isa_util_avg_pct_territory_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'REP_ACTIVITY' and time_bucket_name in ('YTD', 'QTD', 'MTD','M1','M2','M3','M4','M5','M6','M7','M8','M9','M10','M11','M12') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE='Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ), fact as ( select calls.FRANCHISE, calls.REGION, calls.DISTRICT, calls.TERRITORY_NUMBER, calls.call_activity_date, calls.ISA_CALL_FLAG, calls.PRESCRIBER_STATUS, calls.roll_up_eligible_flag, calls.external_call_activity_id, time.time_bucket_id from abv_hcp360_sales_marketing_dm.call_activity_trans_fact_tbl calls JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON calls.TERRITORY_NUMBER=REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP') inner join time on to_date(calls.call_activity_date) >= to_date(time.start_date) and to_date(calls.call_activity_date) <= to_date(time.end_date) where calls.franchise = 'Hepatology' and calls.sales_force_code in ('HCV1', 'HCV3') ) select base.FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'ISA_UTIL_AVG_PCT' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, 'TERRITORY' as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from ( SELECT FRANCHISE, fact.DISTRICT as GEO_ID, 'district' as GEO_CODE, cast( count( distinct case when fact.ISA_CALL_FLAG = 'Y' and fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ) * 100 \/ NULLIF( count( distinct case when fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ), 0 ) as decimal(10, 2) ) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.DISTRICT, TIME_BUCKET_ID UNION SELECT FRANCHISE, fact.REGION as GEO_ID, 'region' as GEO_CODE, cast( count( distinct case when fact.ISA_CALL_FLAG = 'Y' and fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ) * 100 \/ NULLIF( count( distinct case when fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ), 0 ) as decimal(10, 2) ) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY FRANCHISE, fact.REGION, TIME_BUCKET_ID UNION SELECT FRANCHISE, cast(-1 as string) as GEO_ID, 'nation' as GEO_CODE, cast( count( distinct case when fact.ISA_CALL_FLAG = 'Y' and fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ) * 100 \/ NULLIF( count( distinct case when fact.PRESCRIBER_STATUS = 'Y' then fact.external_call_activity_id end ), 0 ) as decimal(10, 2) ) as METRIC_VALUE, TIME_BUCKET_ID from fact GROUP BY fact.FRANCHISE, TIME_BUCKET_ID ) base inner join run_log on base.franchise = run_log.franchise"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "isa_util_avg_pct",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "isa_util_avg_pct_union",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "isa_util_avg_pct-isa_util_avg_pct_district_custom|isa_util_avg_pct-isa_util_avg_pct_territory_custom",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "field_coaching_days_goal_count",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "all_geo_ytd",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with time as ( select DISTINCT franchise_name,time_dimension_id as time_bucket_id, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group))='COACHING_DAYS' and time_bucket_name in ('YTD') ), fact as ( select a.franchise_name, a.time_bucket_id, cast(nvl(datediff(max_date, start_date)*80\/365, 0) as decimal(10,2)) as metric_value from (select ca.franchise_name, time.time_bucket_id, to_date(MAX(SALES_REP_VISIT_DATE)) AS max_date, time.start_date AS start_date FROM abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl ca inner join time on to_date(ca.SALES_REP_VISIT_DATE) >= to_date(time.start_date) and to_date(ca.SALES_REP_VISIT_DATE) <= to_date(time.end_date) WHERE ca.SALES_FORCE_NAME IN ('HCV0') and ca.franchise_name = 'Hepatology' group by ca.franchise_name, time.time_bucket_id, time.start_date) a ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), geography as ( select distinct franchise_name, 'region' as geo_code, region as geo_id from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl ca WHERE ca.SALES_FORCE_NAME IN ('HCV0') and ca.franchise_name = 'Hepatology' union all select distinct franchise_name, 'district' as geo_code, district as geo_id from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl ca WHERE ca.SALES_FORCE_NAME IN ('HCV0') and ca.franchise_name = 'Hepatology' union all select distinct franchise_name, 'nation' as geo_code, cast(-1 as string) as geo_id from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl ca WHERE ca.SALES_FORCE_NAME IN ('HCV0') and ca.franchise_name = 'Hepatology' ) select fact.franchise_name as FRANCHISE, GEO_ID, GEO_CODE, -1 as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, -1 as PHYSICIAN_ID, 'FIELD_COACHING_DAYS_GOAL_COUNT' as METRIC_NAME, METRIC_VALUE, TIME_BUCKET_ID, to_date(current_timestamp()) as DATA_REFRESH_DATE, RUN_ID, -1 as MARKET_ID, cast(NULL as STRING) as SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, -1 as PLAN_ID, cast(NULL as string) as METRIC_TYPE_GROUP, cast(NULL as string) as METRIC_TYPE_SUBGROUP from fact inner join geography on fact.franchise_name = geography.franchise_name inner join run_log on fact.franchise_name = run_log.franchise"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "field_coaching_days_count",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "all_geo_ytd",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as (select distinct franchise, rep.territory_number as territory_number, rep.territory_number as geo_id, 'territory' as geo_code from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'REP' union all select distinct franchise, rep.territory_number, rep.district as geo_id, 'district' as geo_code from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl rx left outer join abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep on rx.territory_number = rep.territory_number where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'DM' union all select distinct franchise, rep.territory_number, rep.region as geo_id, 'region' as geo_code from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl rx left outer join abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep on rx.territory_number = rep.territory_number where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID = 'DM' ), time_dim as ( select start_date, end_date, time_dimension_id as time_bucket_id, time_bucket_name from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)= 'COACHING_DAYS' and upper(time_bucket_name)= 'YTD' ), time_dim_ytd as ( select time_dimension_id as time_bucket_id from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)= 'COACHING_DAYS' and upper(time_bucket_name)= 'YTD' ), run_dim as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log group by franchise ), fact as( select * from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl WHERE SALES_FORCE_NAME IN ('HCV0') ) select 'FIELD_COACHING_DAYS_COUNT' as metric_name, NVL( sum( cast( rx.coaching_duration_in_days as decimal(10, 2) ) ), 0 ) as metric_value, geo.geo_code as geo_code, geo.geo_id as geo_id, NVL(rx.time_bucket_id, tytd.time_bucket_id) as time_bucket_id, run.run_id as run_id, geo.franchise as franchise, -1 as physician_id, -1 as product_id, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id from ( select * from geo_dim where geo_code = 'territory' ) geo left outer join ( select coaching_duration_in_days, tim.time_bucket_id, rx.source_territory_number from fact rx inner join time_dim tim on cast( rx.sales_rep_visit_date as timestamp ) <= cast(tim.end_date as timestamp) and cast( rx.sales_rep_visit_date as timestamp ) >= cast(tim.start_date as timestamp) ) rx on geo.territory_number = rx.source_territory_number cross join run_dim run cross join time_dim_ytd tytd group by metric_name, geo.geo_code, geo.geo_id, 5, run.run_id, geo.franchise, physician_id, product_id, data_refresh_date, market_id, plan_id union all select 'FIELD_COACHING_DAYS_COUNT' as metric_name, NVL( sum( cast( rx.coaching_duration_in_days as decimal(10, 2) ) ), 0 ) as metric_value, geo.geo_code as geo_code, geo.geo_id as geo_id, rx.time_bucket_id as time_bucket_id, run.run_id as run_id, rx.franchise_name as franchise, -1 as physician_id, -1 as product_id, to_date( current_timestamp() ) as data_refresh_date, -1 as market_id, -1 as plan_id from ( select * from geo_dim where geo_code in ('district', 'region') ) geo left outer join ( select coaching_duration_in_days, tim.time_bucket_id, rx.franchise_name, rx.territory_number from fact rx inner join time_dim tim on cast( rx.sales_rep_visit_date as timestamp ) <= cast(tim.end_date as timestamp) and cast( rx.sales_rep_visit_date as timestamp ) >= cast(tim.start_date as timestamp) ) rx on geo.territory_number = rx.territory_number cross join run_dim run group by metric_name, geo.geo_code, geo.geo_id, rx.time_bucket_id, run.run_id, rx.franchise_name, physician_id, product_id, data_refresh_date, market_id , plan_id"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "field_coaching_days_avg",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "all_geo_ytd",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with rep as ( select sales_force, territory_number, district, region, franchise from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise = 'Hepatology' and sales_force = 'HCV0' ), time AS ( SELECT DISTINCT franchise_name, start_date, end_date, time_dimension_id AS time_bucket_id, time_bucket_name FROM abv_hcp360_sales_marketing_dm.time_dimension_tbl TIME WHERE Upper( Trim(kpi_group) )= 'COACHING_DAYS' and upper(time_bucket_name)= 'YTD' ), time2 as ( SELECT DISTINCT time_dimension_id AS time_bucket_id FROM abv_hcp360_sales_marketing_dm.time_dimension_tbl TIME WHERE Upper( Trim(kpi_group) )= 'COACHING_DAYS' and upper(time_bucket_name)= 'YTD' ), run_log AS ( SELECT Max(id) AS run_id, franchise FROM abv_hcp360_sales_marketing_dm.run_log WHERE Upper(franchise) = 'HEPATOLOGY' GROUP BY franchise ), geo_dim as ( select rpt.territory_number, rpt.district as geo_id, 'district' as geo_code, count(distinct rpt.territory_number) as tcnt from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl rx left outer join abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rpt on rx.territory_number = rpt.territory_number where rpt.FRANCHISE = 'Hepatology' AND rpt.TERRITORY_TYPE_ID = 'DM' group by 1, 2 ), fact as( select * from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl WHERE SALES_FORCE_NAME IN ('HCV0') ) SELECT coach.franchise_name as franchise, geo.geo_id, geo.geo_code, -1 AS product_id, -1 AS physician_id, Cast(NULL AS STRING) AS product_name, 'FIELD_COACHING_DAYS_AVG' AS metric_name, cast( nvl( SUM( cast( coach.COACHING_DURATION_IN_DAYS as decimal(10, 2) ) )\/ terr_cnt, 0 ) as decimal(10, 2) ) AS metric_value, t.time_bucket_id, to_date( CURRENT_TIMESTAMP() ) AS data_refresh_date, r.run_id, -1 AS market_id, 'DISTRICT' AS segment_name, cast(NULL AS string) AS access_type, -1 AS plan_id, cast(NULL AS string) AS metric_type_group, cast(NULL AS string) AS metric_type_subgroup from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl COACH INNER JOIN ( select region as geo_id, 'region' as geo_code, count(distinct district) as terr_cnt, sales_force from rep GROUP BY REGION, sales_force ) geo ON COACH.region = geo.geo_id and geo.sales_force = COACH.SALES_FORCE_NAME INNER JOIN time t on to_date(coach.sales_rep_visit_date)>= to_date(t.start_date) and to_date(coach.sales_rep_visit_date)<= to_date(t.end_date) CROSS JOIN run_log r WHERE coach.franchise_name = 'Hepatology' AND SALES_FORCE_NAME IN ('HCV0') group by 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, terr_cnt union SELECT coach.franchise_name as franchise, geo.geo_id, geo.geo_code, -1 AS product_id, -1 AS physician_id, Cast(NULL AS STRING) AS product_name, 'FIELD_COACHING_DAYS_AVG' AS metric_name, cast( nvl( SUM( cast( coach.COACHING_DURATION_IN_DAYS as decimal(10, 2) ) ), 0 )\/ count(distinct geo.territory_number) as decimal(10, 2) ) AS metric_value, t.time_bucket_id, to_date( CURRENT_TIMESTAMP() ) AS data_refresh_date, r.run_id, -1 AS market_id, 'TERRITORY' AS segment_name, cast(NULL AS string) AS access_type, -1 AS plan_id, cast(NULL AS string) AS metric_type_group, cast(NULL AS string) AS metric_type_subgroup from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl COACH INNER JOIN ( select distinct region as geo_id, 'region' as geo_code, territory_number, sales_force from rep where region in ('HA', 'HB', 'HC') ) geo ON COACH.territory_number = geo.territory_number and geo.sales_force = COACH.SALES_FORCE_NAME INNER JOIN time t on to_date(coach.sales_rep_visit_date)>= to_date(t.start_date) and to_date(coach.sales_rep_visit_date)<= to_date(t.end_date) CROSS JOIN run_log r WHERE coach.franchise_name = 'Hepatology' AND SALES_FORCE_NAME IN ('HCV0') group by 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 union SELECT rep.franchise, '-1' as geo_id, 'nation' as geo_code, -1 AS product_id, -1 AS physician_id, Cast(NULL AS STRING) AS product_name, 'FIELD_COACHING_DAYS_AVG' AS metric_name, cast( nvl( SUM( cast( coach.TOTAL as decimal(10, 2) ) )\/ count(distinct rep.territory_number), 0 ) as decimal(10, 2) ) AS metric_value, t2.time_bucket_id, to_date( CURRENT_TIMESTAMP() ) AS data_refresh_date, r.run_id, -1 AS market_id, 'TERRITORY' AS segment_name, cast(NULL AS string) AS access_type, -1 AS plan_id, cast(NULL AS string) AS metric_type_group, cast(NULL AS string) AS metric_type_subgroup from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep left outer JOIN ( select SUM( cast( COACHING_DURATION_IN_DAYS as decimal ) ) AS TOTAL, TERRITORY_NUMBER from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl inner join time t on to_date(sales_rep_visit_date)>= to_date(t.start_date) and to_date(sales_rep_visit_date)<= to_date(t.end_date) WHERE SALES_FORCE_NAME IN ('HCV0') Group by TERRITORY_NUMBER ) coach ON COACH.TERRITORY_NUMBER = REP.TERRITORY_NUMBER cross join time2 t2 cross join run_log r WHERE rep.franchise = 'Hepatology' AND rep.sales_force IN ('HCV0') and rep.territory_type_id = 'DM' group by 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 union SELECT coach.franchise_name as franchise, geo.geo_id, geo.geo_code, -1 AS product_id, -1 AS physician_id, Cast(NULL AS STRING) AS product_name, 'FIELD_COACHING_DAYS_AVG' AS metric_name, cast( nvl( SUM( cast( coach.COACHING_DURATION_IN_DAYS as decimal(10, 2) ) )\/ terr_cnt, 0 ) as decimal(10, 2) ) AS metric_value, t.time_bucket_id, to_date( CURRENT_TIMESTAMP() ) AS data_refresh_date, r.run_id, -1 AS market_id, 'DISTRICT' AS segment_name, cast(NULL AS string) AS access_type, -1 AS plan_id, cast(NULL AS string) AS metric_type_group, cast(NULL AS string) AS metric_type_subgroup from abv_hcp360_sales_marketing_dm.coaching_activity_wkly_tbl COACH INNER JOIN ( select cast(-1 as string) as geo_id, 'nation' as geo_code, count(distinct DISTRICT) as terr_cnt, sales_force from rep group by sales_force ) geo ON geo.sales_force = COACH.SALES_FORCE_NAME INNER JOIN time t on to_date(coach.sales_rep_visit_date)>= to_date(t.start_date) and to_date(coach.sales_rep_visit_date)<= to_date(t.end_date) CROSS JOIN run_log r WHERE coach.franchise_name = 'Hepatology' AND SALES_FORCE_NAME IN ('HCV0') group by 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, terr_cnt union SELECT rx.franchise_name as franchise, geo.geo_id, geo.geo_code, -1 AS product_id, -1 AS physician_id, Cast(NULL AS STRING) AS product_name, 'FIELD_COACHING_DAYS_AVG' AS metric_name, cast( NVL( sum( cast( rx.coaching_duration_in_days as decimal(10, 2) ) )\/(geo.tcnt), 0 ) as decimal(10, 2) ) as metric_value, rx.time_bucket_id as time_bucket_id, to_date( CURRENT_TIMESTAMP() ) AS data_refresh_date, rx.run_id as run_id, -1 AS market_id, 'TERRITORY' AS segment_name, cast(NULL AS string) AS access_type, -1 AS plan_id, cast(NULL AS string) AS metric_type_group, cast(NULL AS string) AS metric_type_subgroup from ( select * from geo_dim where geo_code in ('district') ) geo left outer join ( select coaching_duration_in_days, tim.time_bucket_id, run.run_id, rx.franchise_name, rx.territory_number from fact rx inner join time tim on to_date(rx.sales_rep_visit_date) <= to_date(tim.end_date) and to_date(rx.sales_rep_visit_date) >= to_date(tim.start_date) inner join run_log run on rx.franchise_name = run.franchise ) rx on geo.territory_number = rx.territory_number group by 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, tcnt"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "selling_days_avg",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_avg_dist",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with num_sd as( select fact.franchise, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth as flag , time_period.month_start_date, time_period.month_end_date, count(data_date) as num_of_days, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth, time_period.month_start_date, time_period.month_end_date, time.time_dimension_id), num_terr as( select fact.franchise, fact.district, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth as flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'Y' then count(distinct fact.territory_number) end as y_flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'N' then count(distinct fact.territory_number) end as n_flag, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, fact.district, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth, time.time_dimension_id ) select num_sd.franchise as franchise, num_terr.district as geo_id, 'district' as geo_code, cast('-1' as int) as product_id,cast(null as string) as product_name, cast('-1' as int) as physician_id, 'SELLING_DAYS_AVG' as metric_name, cast(sum(num_sd.num_of_days\/y_flag) as decimal(32,2)) as metric_value, num_sd.time_dimension_id as time_bucket_id, current_date() as data_refresh_date, run_dim.id as run_id, cast('-1' as int) as market_id, cast('TERRITORY' as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup from num_sd left join num_terr on num_sd.district = num_terr.district and num_sd.month_start_date = num_terr.month_start_date and num_sd.month_end_date = num_sd.month_end_date and num_sd.flag = num_terr.flag and num_sd.time_dimension_id = num_terr.time_dimension_id cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by num_terr.district, num_sd.franchise, geo_code, product_name, metric_name, time_bucket_id, data_refresh_date,run_id, market_id, segment_name, access_type, plan_id, metric_type_group, metric_type_subgroup"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "selling_days_avg",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_avg_region",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with num_sd as( select fact.franchise, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth as flag , time_period.month_start_date, time_period.month_end_date, count(data_date) as num_of_days, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth, time_period.month_start_date, time_period.month_end_date, time.time_dimension_id), num_terr as( select fact.franchise, fact.region, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth as flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'Y' then count(distinct fact.territory_number) end as y_flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'N' then count(distinct fact.territory_number) end as n_flag, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, fact.region, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth, time.time_dimension_id ) select num_sd.franchise as franchise, num_terr.region as geo_id, 'region' as geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, 'SELLING_DAYS_AVG' as metric_name, cast(sum(num_sd.num_of_days\/y_flag) as decimal(32,2)) as metric_value, num_sd.time_dimension_id as time_bucket_id, current_date() as data_refresh_date, run_dim.id as run_id, cast('-1' as int) as market_id, cast('TERRITORY' as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup from num_sd left join num_terr on num_sd.region = num_terr.region and num_sd.month_start_date = num_terr.month_start_date and num_sd.month_end_date = num_sd.month_end_date and num_sd.flag = num_terr.flag and num_sd.time_dimension_id = num_terr.time_dimension_id cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by num_terr.region, num_sd.franchise, geo_code, product_name, metric_name, time_bucket_id, data_refresh_date,run_id, market_id, segment_name, access_type, plan_id, metric_type_group, metric_type_subgroup"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "selling_days_avg",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_avg_nation",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with num_sd as( select fact.franchise,'nation' as hierarchy, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth as flag , time_period.month_start_date, time_period.month_end_date, count(data_date) as num_of_days, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, fact.region, fact.district, fact.territory_number, fact.roll_up_eligible_flag_mnth, time_period.month_start_date, time_period.month_end_date, time.time_dimension_id, hierarchy), num_terr as( select fact.franchise, 'nation' as hierarchy, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth as flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'Y' then count(distinct fact.territory_number) end as y_flag, case when upper(trim(roll_up_eligible_flag_mnth)) = 'N' then count(distinct fact.territory_number) end as n_flag, time.time_dimension_id from abv_hcp360_sales_marketing_dm.selling_days_fact_tbl fact inner join abv_hcp360_sales_marketing_dm.time_period_tbl time_period on fact.data_date = time_period.day_date inner join (select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(trim(kpi_group)) = 'SELLING_DAYS' and upper(trim(time_bucket_name)) in ('QTD', 'YTD', 'MTD')) time on cast(fact.data_date as date)>=cast(time.start_date as date) and cast(fact.data_date as date)<= cast(time.end_date as date) inner join (select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(trim(territory_type_id)) = 'REP') rh on fact.territory_number = rh.territory_number where upper(trim(roll_up_eligible_flag_mnth)) = 'Y' group by fact.franchise, time_period.month_start_date, time_period.month_end_date, fact.roll_up_eligible_flag_mnth, time.time_dimension_id, hierarchy ) select num_sd.franchise as franchise, cast('-1' as int) as geo_id, 'nation' as geo_code, cast('-1' as int) as product_id, cast(null as string) as product_name, cast('-1' as int) as physician_id, 'SELLING_DAYS_AVG' as metric_name, cast(sum(num_sd.num_of_days\/y_flag) as decimal(32,2))  as metric_value, num_sd.time_dimension_id as time_bucket_id, current_date() as data_refresh_date, run_dim.id as run_id, cast('-1' as int) as market_id, cast('TERRITORY' as string) as segment_name, cast(null as string) as access_type, cast('-1' as int) as plan_id, cast(null as string) as metric_type_group , cast(null as string) as metric_type_subgroup from num_sd left join num_terr on num_sd.hierarchy = num_terr.hierarchy and num_sd.month_start_date = num_terr.month_start_date and num_sd.month_end_date = num_sd.month_end_date and num_sd.flag = num_terr.flag and num_sd.time_dimension_id = num_terr.time_dimension_id cross join (select max(id) as id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise) run_dim group by num_terr.hierarchy, num_sd.franchise, geo_code, product_name, metric_name, time_bucket_id, data_refresh_date,run_id, market_id, segment_name, access_type, plan_id, metric_type_group, metric_type_subgroup"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "selling_days_avg",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "selling_days_avg_union",
	"step_order": 4,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "selling_days_avg-selling_days_avg_dist|selling_days_avg-selling_days_avg_region|selling_days_avg-selling_days_avg_nation",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "spkr_prog_spend_avg",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_spend_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with base as ( select a.franchise_name as franchise, cast(-1 as string) as geo_id, 'nation' as geo_code, 'SPKR_PROG_SPEND_AVG' as metric_name, 'DISTRICT' as segment_name, SUM(A.USED_BUDJET_TOTAL) \/ count(distinct rep.district) as metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER = REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP','DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME = 'Hepatology' group by a.franchise_name, geo_id, geo_code union all select ter.franchise as franchise, cast(-1 as string) as geo_id, 'nation' as geo_code, 'SPKR_PROG_SPEND_AVG' as metric_name, 'TERRITORY' as segment_name, cast( SUM(spend.USED_BUDJET_TOTAL)\/ count(distinct ter.territory_number) as decimal(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as USED_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name = 'Hepatology' group by data_date, territory_number ) spend on ter.territory_number = spend.territory_number where ter.franchise = 'Hepatology' and territory_type_id in ('REP', 'RM', 'DM') and ter.sales_force IN ('HCV1', 'HCV3') group by ter.franchise, geo_id, geo_code union all SELECT a.franchise_name as franchise, a.REGION as geo_id, 'region' as geo_code, 'SPKR_PROG_SPEND_AVG' as metric_name, 'DISTRICT' as segment_name, cast( sum(A.USED_BUDJET_TOTAL)\/ count(distinct rep.DISTRICT) as decimal(10, 2) ) AS metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER = REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP', 'DM') Where PRODUCT_DESCRIPTION <> 'Strategic Spend' AND A.FRANCHISE_NAME = 'Hepatology' group by a.franchise_name, geo_id, geo_code union all select ter.franchise as franchise, TER.REGION as geo_id, 'region' as geo_code, 'SPKR_PROG_SPEND_AVG' as metric_name, 'TERRITORY' as segment_name, cast( SUM(spend.SPKR_PROG_SPEND_AVG)\/ count(distinct ter.territory_number) as decimal(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as SPKR_PROG_SPEND_AVG from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name = 'Hepatology' group by data_date, territory_number ) spend on ter.territory_number = spend.territory_number where ter.franchise = 'Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1', 'HCV3') group by ter.franchise, geo_id, geo_code union all select ter.franchise as franchise, ter.district as geo_id, 'district' as geo_code, 'SPKR_PROG_SPEND_AVG' as metric_name, 'TERRITORY' as segment_name, cast( SUM(spend.USED_BUDJET_TOTAL)\/ count(distinct ter.territory_number) as DECIMAL(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as USED_BUDJET_TOTAL from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where PRODUCT_DESCRIPTION <> 'Strategic Spend' and franchise_name = 'Hepatology' group by data_date, territory_number ) spend on ter.territory_number = spend.territory_number where ter.franchise = 'Hepatology' and territory_type_id in ('REP') and ter.sales_force IN ('HCV1', 'HCV3') group by ter.franchise, geo_id, geo_code ), time as ( select DISTINCT franchise_name, time_dimension_id as TIME_BUCKET_ID, time_bucket_name, time.start_date, time.end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper( trim(kpi_group) )= 'SPKR_PROG' and time_bucket_name in ('YTD') ), run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), rep as ( select * from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl rep where REP.FRANCHISE = 'Hepatology' AND REP.TERRITORY_TYPE_ID IN ('REP') ) select base.FRANCHISE, GEO_ID, GEO_CODE, cast(-1 as INT) as PRODUCT_ID, cast(NULL as string) as PRODUCT_NAME, cast(-1 as INT) as PHYSICIAN_ID, 'SPKR_PROG_SPEND_AVG' as METRIC_NAME, cast( METRIC_VALUE as decimal(10, 2) ) *-1 as METRIC_VALUE, TIME_BUCKET_ID, to_date( current_timestamp() ) as DATA_REFRESH_DATE, RUN_ID, cast(-1 as INT) as MARKET_ID, SEGMENT_NAME, cast(NULL as STRING) as ACCESS_TYPE, cast(-1 as INT) as PLAN_ID, cast(null as string) as METRIC_TYPE_GROUP, cast(null as string) as METRIC_TYPE_SUBGROUP from base inner join time on time.franchise_name = base.franchise inner join run_log on run_log.franchise = base.franchise"
	}
}, {
	"workflow_name": "rddm",
	"procedure_name": "strategic_spend_avg",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "strategic_spend_avg_custom",
	"step_order": 1,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with run_log as ( select max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ) SELECT a.franchise_name as franchise, cast(-1 as int) as geo_id, 'nation' as geo_code, 'STRATEGIC_SPEND_AVG' as metric_name, dt.time_dimension_id as time_bucket_id, run_id, current_date() as data_refresh_date, cast(-1 as int) as market_id, 'DISTRICT' as segment_name, cast(-1 as int) as plan_id, cast(-1 as int) as product_id, cast(-1 as int) as physician_id, cast(SUM(used_budjet_total) \/ count(distinct a.district) * -1 as decimal(10, 2) ) as metric_value From ( select * from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL ) A inner join ( select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group) = ('STRATEGIC_SPEND') and upper(time_bucket_name) in ('YTD') ) dt on cast(a.DATA_DATE as date) >= dt.START_DATE and cast(a.DATA_DATE as date) <= dt.END_DATE JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER = REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP', 'DM') join run_log rl Where lower(PRODUCT_DESCRIPTION) = 'strategic spend' AND A.FRANCHISE_NAME = 'Hepatology' Group by a.franchise_name, segment_name, geo_id, geo_code, dt.time_dimension_id, run_id, data_refresh_date union all SELECT a.franchise_name as franchise, a.region as geo_id, 'region' as geo_code, 'STRATEGIC_SPEND_AVG' as metric_name, dt.time_dimension_id as time_bucket_id, run_id, current_date() as data_refresh_date, cast(-1 as int) as market_id, 'DISTRICT' as segment_name, cast(-1 as int) as plan_id, cast(-1 as int) as product_id, cast(-1 as int) as physician_id, CAST(SUM(USED_BUDJET_TOTAL)\/ COUNT(DISTINCT A.DISTRICT) * -1 as decimal(10, 2) ) as metric_value From abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A inner join ( select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)=('STRATEGIC_SPEND') and upper(time_bucket_name) in ('YTD') ) dt on cast(a.data_date as date) >= dt.START_DATE and cast(a.data_date as date) <= dt.END_DATE JOIN abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl REP ON A.TERRITORY_NUMBER = REP.TERRITORY_NUMBER AND REP.TERRITORY_TYPE_ID IN ('REP', 'DM') join run_log rl Where lower(PRODUCT_DESCRIPTION) = 'strategic spend' AND A.FRANCHISE_NAME = 'Hepatology' Group by a.franchise_name, geo_id, geo_code, dt.time_dimension_id, run_id, data_refresh_date union all select ter.franchise, cast(-1 as int) as geo_id, 'nation' as geo_code, 'STRATEGIC_SPEND_AVG' as metric_name, dt.time_dimension_id as time_bucket_id, run_id, current_date() as data_refresh_date, cast(-1 as int) as market_id, 'TERRITORY' as segment_name, cast(-1 as int) as plan_id, cast(-1 as int) as product_id, cast(-1 as int) as physician_id, cast( SUM(spend.Used_Budget)\/ count(distinct ter.territory_number) *-1 as decimal(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as Used_Budget from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A join run_log rl Where lower(PRODUCT_DESCRIPTION) = 'strategic spend' and franchise_name = 'Hepatology' group by territory_number, a.data_date ) spend on ter.territory_number = spend.territory_number inner join ( select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)=('STRATEGIC_SPEND') and upper(time_bucket_name) in ('YTD') ) dt on cast(spend.data_date as date) >= dt.START_DATE and cast(spend.data_date as date) <= dt.END_DATE join run_log rl where ter.franchise = 'Hepatology' and ter.sales_force IN ('HCV1', 'HCV3') Group by ter.franchise, geo_id, geo_code, dt.time_dimension_id, run_id, data_refresh_date union all select ter.franchise, ter.region as geo_id, 'region' as geo_code, 'STRATEGIC_SPEND_AVG' as metric_name, dt.time_dimension_id as time_bucket_id, run_id, current_date() as data_refresh_date, cast(-1 as int) as market_id, 'TERRITORY' as segment_name, cast(-1 as int) as plan_id, cast(-1 as int) as product_id, cast(-1 as int) as physician_id, cast( SUM(spend.Used_Budget)\/ count(distinct ter.territory_number) * -1 as decimal(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as Used_Budget from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where lower(PRODUCT_DESCRIPTION) = 'strategic spend' and franchise_name = 'Hepatology' group by a.data_date, territory_number ) spend on ter.territory_number = spend.territory_number inner join ( select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)=('STRATEGIC_SPEND') and upper(time_bucket_name) in ('YTD') ) dt on cast(spend.data_date as date) >= dt.START_DATE and cast(spend.data_date as date) <= dt.END_DATE join run_log rl where ter.franchise = 'Hepatology' and ter.sales_force IN ('HCV1', 'HCV3') Group by ter.franchise, geo_id, geo_code, dt.time_dimension_id, run_id, data_refresh_date union all select ter.franchise, ter.district as geo_id, 'district' as geo_code, 'STRATEGIC_SPEND_AVG' as metric_name, dt.time_dimension_id as time_bucket_id, run_id, current_date() as data_refresh_date, cast(-1 as int) as market_id, 'TERRITORY' as segment_name, cast(-1 as int) as plan_id, cast(-1 as int) as product_id, cast(-1 as int) as physician_id, cast(SUM(spend.Used_Budget)\/ count(distinct ter.territory_number) *-1 as decimal(10, 2) ) as metric_value from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl ter left join ( SELECT a.data_date, territory_number, CAST( SUM(USED_BUDJET_TOTAL) AS DECIMAL(10, 2) ) as Used_Budget from abv_hcp360_sales_marketing_dm.STRATEGIC_SPEND_TBL A Where lower(PRODUCT_DESCRIPTION) = 'strategic spend' and franchise_name = 'Hepatology' group by a.data_date, territory_number ) spend on ter.territory_number = spend.territory_number inner join ( select * from abv_hcp360_sales_marketing_dm.time_dimension_tbl where upper(kpi_group)= 'STRATEGIC_SPEND' and upper(time_bucket_name) in ('YTD') ) dt on cast(spend.data_date as date) >= dt.START_DATE and cast(spend.data_date as date) <= dt.END_DATE join run_log rl where ter.franchise = 'Hepatology' and ter.sales_force IN ('HCV1', 'HCV3') Group by franchise, geo_id, geo_code, time_dimension_id, run_id, data_refresh_date"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "strategic_spend",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "strategic_spend_sum_all",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "STRATEGIC_SPEND",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('MTD', 'QTD', 'YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('STRATEGIC_SPEND')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|used_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('STRATEGIC_SPEND' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "strategic_spend",
	"procedure_order": 1,
	"procedure_active_flag": "Y",
	"step_id": "strategic_spend_sum_all_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'STRATEGIC_SPEND' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)) , product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id,cast(null as string) as access_type,cast(-1 as int) as plan_id from strategic_spend__strategic_spend_sum_all"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "strategic_spend_per",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "strategic_spend_all",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "STRATEGIC_SPEND_PCT",
	"params": {
		"time_bucket_name_param": "upper(time_bucket_name) in ('MTD', 'QTD', 'YTD')",
		"dim_time_kpi_param": "upper(kpi_group) in ('STRATEGIC_SPEND')",
		"franchise_type_name_param": "upper(franchise_name) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|strategic_spend_percent",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('STRATEGIC_SPEND_PCT' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "strategic_spend_per",
	"procedure_order": 2,
	"procedure_active_flag": "Y",
	"step_id": "strategic_spend_all_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise,'STRATEGIC_SPEND_PCT' as metric_name,physician_id, product_id, cast(metric_value as decimal(32,2)),product_name,data_refresh_date, run_id,time_bucket_id as time_bucket_id,geo_id,geo_code ,segment_name, market_id,cast(null as string) as access_type,cast(-1 as int) as plan_id, cast(null as string) as metric_type_group, cast(null as string) as metric_type_subgroup  from strategic_spend_per__strategic_spend_all"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "Total_Spend_Budget",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "Total_Spend_Budget_All",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "TOTAL_SPEND_BUDGET",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('MTD', 'QTD', 'YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('STRATEGIC_SPEND')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|budget_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"new_metric_name_param": "cast('TOTAL_SPEND_BUDGET' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id",
		"cast_metric_value_param": "cast(metric_value as numeric(20,2))"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "Total_Spend_Budget",
	"procedure_order": 3,
	"procedure_active_flag": "Y",
	"step_id": "Total_Spend_Budget_All_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'TOTAL_SPEND_BUDGET' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)), product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, cast(null as string) as access_type,cast(-1 as int) as plan_id from Total_Spend_Budget__Total_Spend_Budget_All"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_spent",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_spent_calc",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_SPENT",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PROG')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|used_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"new_metric_name_param": "cast('SPKR_PROG_SPENT' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_spent",
	"procedure_order": 4,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_spent_calc_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_SPENT' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)) , product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, plan_id, access_type from speaker_program_spent__speaker_program_spent_calc"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_committed",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_committed_calc",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COMMITTED",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PROG')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|committed_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"new_metric_name_param": "cast('SPKR_PROG_COMMITTED' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_committed",
	"procedure_order": 5,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_committed_calc_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_COMMITTED' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)), product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, plan_id, access_type from speaker_program_committed__speaker_program_committed_calc"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_remaining",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_remaining_calc",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_REMAINING",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PROG')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|balance_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"new_metric_name_param": "cast('SPKR_PROG_REMAINING' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_remaining",
	"procedure_order": 6,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_remaining_calc_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_REMAINING' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)), product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, plan_id, access_type from speaker_program_remaining__speaker_program_remaining_calc"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_budget",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_budget_calc",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_BUDGET",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PROG')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|used_budjet_total|committed_budjet_total|balance_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"new_metric_name_param": "cast('SPKR_PROG_BUDGET' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_budget",
	"procedure_order": 7,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_budget_calc_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_BUDGET' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)), product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, plan_id, access_type from speaker_program_budget__speaker_program_budget_calc"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_spend_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_spend_pct_calc",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_SPEND_PCT",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PROG')",
		"franchise_type_name_param": "upper(trim(franchise_name)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise_name|time_dimension_id|geo_code|geo_id|used_budjet_total|committed_budjet_total|balance_budjet_total",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"new_metric_name_param": "cast('SPKR_PROG_SPEND_PCT' as STRING)",
		"metric_grain_param": "franchise_name|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_spend_pct",
	"procedure_order": 8,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_spend_custom",
	"step_order": 2,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_SPEND_PCT' as metric_name, physician_id, product_id, case when ( sum_used_budjet_total + sum_balance_budjet_total + sum_committed_budjet_total) = 0 then 0 else cast((100*(sum_used_budjet_total)\/(sum_used_budjet_total + sum_balance_budjet_total + sum_committed_budjet_total)) as decimal(32,2)) end as metric_value, product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, plan_id, access_type from speaker_program_spend_pct__speaker_program_spend_pct_calc"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_spend_yearly_avg",
	"procedure_order": 9,
	"procedure_active_flag": "Y",
	"step_id": "speaker_prog",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_SPEND_YEARLY_AVG",
	"params": {
		"time_bucket_name_filter": "upper(trim(TIME_BUCKET_NAME)) = 'YTD'",
		"dim_time_kpi_filter": "upper(trim(KPI_GROUP))='SPKR_PROG'",
		"franchise_type_name_filter": "upper(trim(franchise_name))='HEPATOLOGY'",
		"product_desc_filter": "upper(trim(product_description)) not in ('STRATEGIC SPEND')",
		"time_bucket_id_param": "time_dimension_id",
		"product_id_param": "-1",
		"product_name_param": "cast(null as  string)",
		"physician_id_param": "cast('-1' as  string)",
		"metric_grain_param": "franchise|GEO_ID|GEO_CODE|PHYSICIAN_ID|METRIC_NAME|PRODUCT_NAME|PRODUCT_ID|data_refresh_date|RUN_ID|time_bucket_id|MARKET_ID|SEGMENT_NAME|PLAN_ID|ACCESS_TYPE",
		"select_cols_param": "franchise|GEO_ID|GEO_CODE|PHYSICIAN_ID|METRIC_NAME|PRODUCT_NAME|PRODUCT_ID|data_refresh_date|RUN_ID|time_bucket_id|MARKET_ID|SEGMENT_NAME|PLAN_ID|ACCESS_TYPE|metric_value"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_overall",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_ATTENDEES",
	"params": {
		"metric_type_name_param": "cast('SPKR_PROG_ATTENDEES' as STRING)",
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"rep_filter_param": "1=1",
		"sales_force_code_param": "upper(trim(sales_force_code))<>'HCV2'",
		"product_id_param": "-1",
		"physician_id_param": "-1",
		"geo_code_filter_param": "1=1",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"metric_type_group_param": "cast('OVERALL' as STRING)",
		"seg_name_param": "cast(NULL as STRING)",
		"attribution_name_param": "1=1",
		"sub_group_param": "1=1",
		"prescriber_status_param": "upper(trim(prescriber_status))='Y'",
		"mkt_id_param": "-1",
		"time_dimension_filter_param": "upper(trim(time_bucket_name)) in ('QTD','YTD','C4W','C13W')",
		"metric_grain_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup",
		"select_col_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_presVsNon",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "SPKR_PROG_ATTENDEES",
	"params": {
		"metric_type_name_param": "cast('SPKR_PROG_ATTENDEES' as STRING)",
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"rep_filter_param": "1=1",
		"sales_force_code_param": "upper(trim(sales_force_code))<>'HCV2'",
		"product_id_param": "-1",
		"physician_id_param": "-1",
		"geo_code_filter_param": "1=1",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"metric_type_group_param": "case when prescriber_status='Y' THEN 'PRESCRIBER' when prescriber_status='N' THEN 'NON-PRESCRIBER' end as metric_type_group",
		"seg_name_param": "cast(NULL as STRING)",
		"attribution_name_param": "1=1",
		"sub_group_param": "1=1",
		"prescriber_status_param": "1=1",
		"mkt_id_param": "-1",
		"time_dimension_filter_param": "upper(trim(time_bucket_name)) in ('QTD','YTD','C4W','C13W')",
		"metric_grain_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup|prescriber_status",
		"select_col_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_attr",
	"step_order": 3,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "with geo_dim as( select territory_number, sales_force, territory_number as geo_id, 'territory' as geo_code, territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where territory_number <> 'null' and upper(territory_type_id) in('REP') union all select territory_number, sales_force, district as geo_id, 'district' as geo_code, territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where district <> 'null' and upper(territory_type_id) in('REP', 'DM') union all select territory_number, sales_force, region as geo_id, 'region' as geo_code, territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where region <> 'null' and upper(territory_type_id) in('REP', 'DM', 'RM') union all select territory_number, sales_force, cast(-1 as string) as geo_id, 'nation' as geo_code, territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where upper(territory_type_id) in('REP', 'DM', 'RM')), time as ( select DISTINCT franchise_name, time_dimension_id as time_bucket_id, time_bucket_name, start_date, end_date from abv_hcp360_sales_marketing_dm.time_dimension_tbl time where upper(trim(kpi_group)) = \"SPKR_PROG_ATTENDEES\" and time_bucket_name in ('QTD', 'YTD', 'C4W', 'C13W') ), rep as ( select sales_force, territory_number, district, region, franchise, territory_type_id from abv_hcp360_sales_marketing_dm.rpt_rep_hierarchy_tbl where franchise = 'Hepatology' and region in ('HA', 'HB', 'HC') ),run_log as ( select franchise, max(id) as run_id from abv_hcp360_sales_marketing_dm.run_log where upper(franchise) = 'HEPATOLOGY' group by franchise ), fact as ( select fact1.abbott_customer_id, fact1.DISTRICT, fact1.REGION, fact1.franchise, 'Market_Decile' as attribution_name, fact1.territory_number, fact1.sales_force_code, fact1.prescriber_status, rep.territory_type_id, fact1.event_date, fact1.attendee_id, case WHEN cast(hcv_decile.SEGMENT_VALUE as int) >= 8 and cast(hcv_decile.SEGMENT_VALUE as int) <= 10 THEN 'High (D8 - D10)' WHEN cast(hcv_decile.SEGMENT_VALUE as int) >= 4 and cast(hcv_decile.SEGMENT_VALUE as int) <= 7 THEN 'Medium (D4 - D7)' WHEN cast(hcv_decile.SEGMENT_VALUE as int) >= 1 and cast(hcv_decile.SEGMENT_VALUE as int) <= 3 THEN 'Low (D1 - D3)' ELSE 'Non-Writer (D0)' END AS sub_group from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_ATTENDEE_FACT_TBL fact1 inner join rep on rep.territory_number = fact1.territory_number and rep.territory_type_id in ('REP', 'RM', 'DM') left join abv_hcp360_sales_marketing_dm.RLTN_SEGMENT_DETAIL_tbl hcv_decile ON fact1.abbott_customer_id = hcv_decile.abbott_customer_id and hcv_decile.franchise_name = 'Hepatology' and hcv_decile.segment_name = 'HCV_DECILE' union all select fact1.abbott_customer_id, fact1.DISTRICT, fact1.REGION, fact1.franchise, 'DUP Decile' as attribution_name, fact1.territory_number, fact1.sales_force_code, fact1.prescriber_status, rep.territory_type_id, fact1.event_date, fact1.attendee_id, case WHEN (hcv_decile.SEGMENT_VALUE in ('D8', 'D9', 'D10')) THEN 'High (D8 - D10)' WHEN (hcv_decile.SEGMENT_VALUE in ('D4', 'D5', 'D6', 'D7')) THEN 'Medium (D4 - D7)' WHEN (hcv_decile.SEGMENT_VALUE in ('D1', 'D2', 'D3')) THEN 'Low (D1 - D3)' ELSE 'Non-Writer (D0)' END AS sub_group from abv_hcp360_sales_marketing_dm.SPEAKER_EVENT_ATTENDEE_FACT_TBL fact1 inner join rep on rep.territory_number = fact1.territory_number and rep.territory_type_id in ('REP', 'RM', 'DM') left join abv_hcp360_sales_marketing_dm.RLTN_SEGMENT_DETAIL_tbl hcv_decile ON fact1.abbott_customer_id = hcv_decile.abbott_customer_id and hcv_decile.franchise_name = 'Hepatology' and hcv_decile.segment_name like 'DUP%' ) select fact.franchise, 'SPKR_PROG_ATTENDESS' as metric_name, cast(-1 as string) as physician_id, cast(-1 as int) as product_id, count(distinct fact.attendee_id) as metric_value, cast(null as string) as product_name, to_date(current_timestamp()) as DATA_REFRESH_DATE, run_log.run_id as run_id, time.time_bucket_id as time_bucket_id, geo_dim.geo_id as geo_id, geo_dim.geo_code as geo_code, cast(null as string) as segment_name, cast(-1 as int) as market_id, fact.attribution_name as METRIC_TYPE_GROUP, fact.sub_group as METRIC_TYPE_SUBGROUP from fact inner join geo_dim on fact.territory_number = geo_dim.territory_number and fact.sales_force_code = geo_dim.sales_force inner join time on to_date(fact.event_date) between to_date(time.start_date) and to_date(time.end_date) inner join run_log on fact.franchise = run_log.franchise where upper(fact.franchise) = 'HEPATOLOGY' and fact.sales_force_code not in ('HCV2') and fact.prescriber_status = 'Y' GROUP BY 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_call_plan",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "SPKR_PROG_ATTENDEES",
	"params": {
		"metric_type_name_param": "cast('SPKR_PROG_ATTENDEES' as STRING)",
		"franchise_type_name_param": "upper(trim(franchise))='HEPATOLOGY'",
		"geo_id_param": "geo_id",
		"geo_code_param": "geo_code",
		"rep_filter_param": "1=1",
		"sales_force_code_param": "upper(trim(sales_force_code))<>'HCV2'",
		"product_id_param": "-1",
		"physician_id_param": "-1",
		"geo_code_filter_param": "1=1",
		"metric_type_subgroup_param": "cast(NULL as STRING)",
		"metric_type_group_param": "case when call_plan_flag='Y' THEN 'CALL_PLAN' when call_plan_flag='N' THEN 'NON_CALL_PLAN' end as METRIC_TYPE_GROUP",
		"seg_name_param": "cast(NULL as STRING)",
		"attribution_name_param": "1=1",
		"sub_group_param": "1=1",
		"prescriber_status_param": "upper(trim(prescriber_status))='Y'",
		"mkt_id_param": "-1",
		"time_dimension_filter_param": "upper(trim(time_bucket_name)) in ('QTD','YTD','C4W','C13W')",
		"metric_grain_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup|call_plan_flag",
		"select_col_param": "franchise|geo_id|geo_code|product_id|product_name|physician_id|metric_name|metric_value|time_bucket_id|data_refresh_date|run_id|market_id|segment_name|metric_type_group|metric_type_subgroup"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "spkr_prog_attendees-spkr_prog_attendees_overall|spkr_prog_attendees-spkr_prog_attendees_presVsNon|spkr_prog_attendees-spkr_prog_attendees_attr|spkr_prog_attendees-spkr_prog_attendees_call_plan",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_cast",
	"step_order": 6,
	"module_type": "analytical",
	"module_name": "add_column",
	"params": {
		"input_table": "spkr_prog_attendees-spkr_prog_attendees",
		"column_name": "metric_value",
		"expression": "cast(metric_value as decimal(32,2))"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "spkr_prog_attendees",
	"procedure_order": 10,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_attendees_fix",
	"step_order": 7,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise,geo_id,geo_code,product_id,product_name,physician_id,'SPKR_PROG_ATTENDEES' as metric_name,metric_value,time_bucket_id,data_refresh_date,run_id,market_id,segment_name,metric_type_group,metric_type_subgroup,cast(null as string) as access_type,cast(-1 as int) as plan_id from spkr_prog_attendees__spkr_prog_attendees_cast"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_deck",
	"step_order": 1,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD','C13W','C4W','QTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_EVENT')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|deck_type|satellite_event_id",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "deck_type",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_venue",
	"step_order": 2,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD','C13W','C4W','QTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_EVENT')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|venue_type|satellite_event_id",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "venue_type",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_completed",
	"step_order": 3,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD','C13W','C4W','QTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_EVENT')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|satellite_event_id",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast('Completed' as string)",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_pif",
	"step_order": 4,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT_PIF",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('YTD','C13W','C4W','QTD')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_EVENT')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|program_identifier",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast(\"PIF'd\" as string)",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_total",
	"step_order": 5,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select pif.franchise, 'SPKR_PROG_COUNT' as metric_name, ( cast (( pif.metric_value + com.metric_value)  as decimal(32, 2))) as metric_value, pif.physician_id, pif.product_id, pif.product_name, pif.data_refresh_date, pif.run_id, pif.time_bucket_id, pif.geo_id, pif.geo_code, pif.segment_name, pif.market_id, pif.access_type, pif.plan_id, cast('Total' as string) as metric_type_group from ( select * from speaker_program_count__speaker_program_count_pif ) pif inner join ( select * from speaker_program_count__speaker_program_count_completed ) com on pif.franchise = com.franchise and pif.geo_id = com.geo_id and pif.geo_code = com.geo_code and pif.physician_id = com.physician_id and pif.product_id = com.product_id and pif.data_refresh_date = com.data_refresh_date and pif.run_id = com.run_id and pif.time_bucket_id = com.time_bucket_id and pif.plan_id = com.plan_id and coalesce(pif.segment_name, '') = coalesce(com.segment_name, '') and coalesce(pif.market_id, '') = coalesce(com.market_id, '') and coalesce(pif.product_name, '') = coalesce(com.product_name, '') and coalesce(pif.access_type, '') = coalesce(com.access_type, '')"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_completed_qtr",
	"step_order": 6,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT_QTR",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('CQTR')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PIF')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|satellite_event_id",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast('Completed' as string)",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "speaker_program_count_pif_qtr",
	"step_order": 7,
	"module_type": "metric",
	"module_name": "SPKR_PROG_COUNT_PIF_QTR",
	"params": {
		"time_bucket_name_param": "upper(trim(time_bucket_name)) in ('CQTR','NQTR')",
		"dim_time_kpi_param": "upper(trim(kpi_group))in ('SPKR_PIF')",
		"franchise_type_name_param": "upper(trim(franchise)) in ('HEPATOLOGY')",
		"select_cols_param": "franchise|time_dimension_id|geo_code|geo_id|program_identifier",
		"time_bucket_id_param": "cast(time_dimension_id as int)",
		"physician_id_param": "-1",
		"product_id_param": "-1",
		"product_name_param": "cast(NULL as STRING)",
		"mkt_id_param": "-1",
		"seg_name_param": "cast(NULL as STRING)",
		"access_type_param": "cast(NULL as STRING)",
		"plan_id_param": "-1",
		"metric_type_group_param": "cast(\"PIF'd\" as string)",
		"new_metric_name_param": "cast('SPKR_PROG_COUNT' as STRING)",
		"metric_grain_param": "franchise|metric_name|physician_id|product_id|product_name|data_refresh_date|run_id|time_bucket_id|geo_id|geo_code|segment_name|market_id|plan_id|access_type|metric_type_group"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count",
	"step_order": 8,
	"module_type": "analytical",
	"module_name": "union",
	"params": {
		"input_ids": "speaker_program_count-speaker_program_count_deck|speaker_program_count-speaker_program_count_venue|speaker_program_count-speaker_program_count_completed|speaker_program_count-speaker_program_count_pif|speaker_program_count-speaker_program_count_total|speaker_program_count-speaker_program_count_completed_qtr|speaker_program_count-speaker_program_count_pif_qtr",
		"normalize_columns": "Y"
	}
}, {
	"workflow_name": "speaker_program",
	"procedure_name": "speaker_program_count",
	"procedure_order": 11,
	"procedure_active_flag": "Y",
	"step_id": "spkr_prog_count_custom",
	"step_order": 9,
	"module_type": "analytical",
	"module_name": "custom_sql",
	"params": {
		"query": "select franchise, 'SPKR_PROG_COUNT' as metric_name, physician_id, product_id, cast(metric_value as decimal(32,2)) , product_name, data_refresh_date, run_id, time_bucket_id as time_bucket_id, geo_id, geo_code, segment_name, market_id, access_type,  plan_id , metric_type_group from speaker_program_count__spkr_prog_count"
	}
}]